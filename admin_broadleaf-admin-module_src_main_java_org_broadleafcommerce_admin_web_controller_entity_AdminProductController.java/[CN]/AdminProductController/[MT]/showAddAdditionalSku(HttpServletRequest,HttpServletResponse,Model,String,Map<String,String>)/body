{
  String collectionField="additionalSkuXrefs";
  String mainClassName=getClassNameForSection(SECTION_KEY);
  List<SectionCrumb> sectionCrumbs=getSectionCrumbs(request,SECTION_KEY,id);
  ClassMetadata mainMetadata=service.getClassMetadata(getSectionPersistencePackageRequest(mainClassName,sectionCrumbs,pathVars)).getDynamicResultSet().getClassMetaData();
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(md,sectionCrumbs).withCustomCriteria(new String[]{id});
  BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
  ClassMetadata cmd=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
  String entityType=null;
  if (request.getParameter("entityType") != null) {
    entityType=request.getParameter("entityType");
  }
  if (StringUtils.isBlank(entityType)) {
    if (cmd.getPolymorphicEntities().getChildren().length == 0) {
      entityType=cmd.getPolymorphicEntities().getFullyQualifiedClassname();
    }
 else {
      entityType=getDefaultEntityType();
    }
  }
 else {
    entityType=URLDecoder.decode(entityType,"UTF-8");
  }
  if (StringUtils.isBlank(entityType)) {
    List<ClassTree> entityTypes=getAddEntityTypes(cmd.getPolymorphicEntities());
    model.addAttribute("entityTypes",entityTypes);
    model.addAttribute("viewType","modal/entityTypeSelection");
    model.addAttribute("entityFriendlyName",cmd.getPolymorphicEntities().getFriendlyName());
    String requestUri=request.getRequestURI();
    if (!request.getContextPath().equals("/") && requestUri.startsWith(request.getContextPath())) {
      requestUri=requestUri.substring(request.getContextPath().length() + 1,requestUri.length());
    }
    model.addAttribute("currentUri",requestUri);
    model.addAttribute("modalHeaderType","addEntity");
    setModelAttributes(model,SECTION_KEY);
    return "modules/modalContainer";
  }
 else {
    ppr=ppr.withCeilingEntityClassname(entityType);
  }
  ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
  EntityForm entityForm=formService.createEntityForm(collectionMetadata,sectionCrumbs);
  entityForm.setCeilingEntityClassname(ppr.getCeilingEntityClassname());
  entityForm.setEntityType(ppr.getCeilingEntityClassname());
  formService.removeNonApplicableFields(collectionMetadata,entityForm,ppr.getCeilingEntityClassname());
  entityForm.removeAction(DefaultEntityFormActions.DELETE);
  removeRequiredValidation(entityForm);
  model.addAttribute("entityForm",entityForm);
  model.addAttribute("viewType","modal/simpleAddEntity");
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  model.addAttribute("modalHeaderType","addCollectionItem");
  model.addAttribute("collectionProperty",collectionProperty);
  setModelAttributes(model,SECTION_KEY);
  return "modules/modalContainer";
}

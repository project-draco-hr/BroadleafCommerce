{
  Offer promotion=itemOffer.getOffer();
  List<PromotableOrderItem> promotableItems=itemOffer.getCandidateTargets();
  List<PromotableOrderItemPriceDetail> priceDetails=buildPriceDetailListFromOrderItems(promotableItems);
  int receiveQtyNeeded=0;
  for (  OfferItemCriteria targetCriteria : itemOffer.getOffer().getTargetItemCriteria()) {
    receiveQtyNeeded+=targetCriteria.getQuantity();
  }
  OrderItem relatedQualifierRoot=null;
  if (relatedQualifier != null) {
    relatedQualifierRoot=relatedQualifier;
    while (relatedQualifierRoot.getParentOrderItem() != null) {
      relatedQualifierRoot=relatedQualifierRoot.getParentOrderItem();
    }
  }
  Collections.sort(priceDetails,getTargetItemComparator(promotion.getApplyDiscountToSalePrice()));
  for (  PromotableOrderItemPriceDetail priceDetail : priceDetails) {
    if (receiveQtyNeeded > 0) {
      if (relatedQualifier != null) {
        OrderItem thisItem=priceDetail.getPromotableOrderItem().getOrderItem();
        if (!relatedQualifierRoot.isAParentOf(thisItem) && !thisItem.isAParentOf(relatedQualifierRoot) && !thisItem.equals(relatedQualifierRoot)) {
          continue;
        }
      }
      int itemQtyAvailableToBeUsedAsTarget=priceDetail.getQuantityAvailableToBeUsedAsTarget(itemOffer);
      if (itemQtyAvailableToBeUsedAsTarget > 0) {
        if ((promotion.getMaxUses() == 0) || (itemOffer.getUses() < promotion.getMaxUses())) {
          int qtyToMarkAsTarget=Math.min(receiveQtyNeeded,itemQtyAvailableToBeUsedAsTarget);
          receiveQtyNeeded-=qtyToMarkAsTarget;
          if (!checkOnly) {
            priceDetail.addPromotionDiscount(itemOffer,itemOffer.getOffer().getTargetItemCriteria(),qtyToMarkAsTarget);
          }
        }
      }
    }
    if (receiveQtyNeeded == 0) {
      if (!checkOnly) {
        itemOffer.addUse();
      }
      break;
    }
  }
  return (receiveQtyNeeded == 0);
}

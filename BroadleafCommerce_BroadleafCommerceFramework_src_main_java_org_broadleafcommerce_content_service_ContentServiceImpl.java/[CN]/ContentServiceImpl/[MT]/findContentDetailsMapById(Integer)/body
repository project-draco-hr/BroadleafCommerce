{
  Map<String,Object> root=new HashMap<String,Object>();
  String xmlContent=findContentDetailsXmlById(id);
  StringReader reader=new StringReader(xmlContent);
  InputSource inputSource=new InputSource(reader);
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  Document doc=null;
  try {
    DocumentBuilder db=dbf.newDocumentBuilder();
    doc=db.parse(inputSource);
  }
 catch (  Exception e) {
    LOG.error("Parse exception. ",e);
    throw e;
  }
  Element rootElm=doc.getDocumentElement();
  NodeList nodeLst=rootElm.getChildNodes();
  for (int s=0; s < nodeLst.getLength(); s++) {
    Node fstNode=nodeLst.item(s);
    if (fstNode.getNodeType() == Node.ELEMENT_NODE) {
      Element fstElmnt=(Element)fstNode;
      String elName=fstNode.getNodeName();
      NodeList nl=fstElmnt.getChildNodes();
      Node dataNode=nl.item(0);
      String nodeData=dataNode.getNodeValue();
      if (elName.contains("64")) {
        try {
          root.put(elName,new String(Base64.decodeBase64(nodeData.getBytes()),"UTF-8"));
        }
 catch (        Exception e) {
          LOG.error("Error during decode. ",e);
          throw e;
        }
      }
 else       if (nodeData.contains("<![CDATA[")) {
        nodeData.replace("<![CDATA[","");
        nodeData.replace("]]>","");
        root.put(elName,nodeData);
      }
 else {
        root.put(elName,nodeData);
      }
    }
  }
  return root;
}

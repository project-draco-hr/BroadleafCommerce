{
  final Layout destination;
  if (metadata.getTargetElementId() != null && metadata.getTargetElementId().length() > 0) {
    destination=findMemberById((Layout)presenter.getDisplay(),metadata.getTargetElementId());
  }
 else {
    destination=(Layout)presenter.getDisplay().getDynamicFormDisplay().getFormOnlyDisplay();
  }
  final String viewTitle;
  if (metadata.getFriendlyName() == null || metadata.getFriendlyName().length() == 0) {
    viewTitle=propertyName;
  }
 else {
    String temp=BLCMain.getMessageManager().getString(metadata.getFriendlyName());
    if (temp == null) {
      temp=metadata.getFriendlyName();
    }
    viewTitle=temp;
  }
  if (metadata.getSecurityLevel() != null && !"".equals(metadata.getSecurityLevel())) {
    org.broadleafcommerce.openadmin.client.security.SecurityManager.getInstance().registerField(String.valueOf(metadata.hashCode()),metadata.getSecurityLevel());
    Boolean shouldLoad=org.broadleafcommerce.openadmin.client.security.SecurityManager.getInstance().isUserAuthorizedToEditField(String.valueOf(metadata.hashCode()));
    if (!shouldLoad) {
      metadata.setMutable(false);
    }
  }
  final String prefix;
  if (propertyName.contains(".")) {
    prefix=propertyName.substring(0,propertyName.lastIndexOf("."));
  }
 else {
    prefix="";
  }
  metadata.accept(new MetadataVisitorAdapter(){
    @Override public void visit(    BasicCollectionMetadata metadata){
      GridStructureView advancedCollectionView=new GridStructureView(viewTitle,false,true);
      destination.addMember(advancedCollectionView);
      SubPresentable subPresentable;
      if (metadata.getAddMethodType() == AddMethodType.PERSIST) {
        subPresentable=new CreateBasedListStructurePresenter(prefix,advancedCollectionView,metadata.getAvailableToTypes(),viewTitle,new HashMap<String,Object>());
      }
 else {
        subPresentable=new SimpleSearchListPresenter(prefix,advancedCollectionView,new EntitySearchDialog((ListGridDataSource)lookupDataSource,true),metadata.getAvailableToTypes(),viewTitle);
      }
      subPresentable.setDataSource((ListGridDataSource)dataSource,new String[]{},new Boolean[]{});
      subPresentable.setReadOnly(!metadata.isMutable());
      ((GridStructureView)subPresentable.getDisplay()).getToolBar().disable();
      presenter.setSubPresentable(dataSource.getDataURL(),subPresentable);
    }
    @Override public void visit(    AdornedTargetCollectionMetadata metadata){
      String sortField=((AdornedTargetList)((DynamicEntityDataSource)dataSource).getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getSortField();
      GridStructureView advancedCollectionView=new GridStructureView(viewTitle,sortField != null && sortField.length() > 0,true);
      destination.addMember(advancedCollectionView);
      List<String> prominentNames=new ArrayList<String>();
      for (      DataSourceField field : lookupDataSource.getFields()) {
        if (field.getAttributeAsBoolean("prominent") && !field.getAttributeAsBoolean("permanentlyHidden")) {
          prominentNames.add(field.getName());
        }
      }
      ((ListGridDataSource)lookupDataSource).resetPermanentFieldVisibility(prominentNames.toArray(new String[prominentNames.size()]));
      EntitySearchDialog searchView=new EntitySearchDialog((ListGridDataSource)lookupDataSource,true);
      SubPresentable subPresentable;
      if (metadata.isIgnoreAdornedProperties() || metadata.getMaintainedAdornedTargetFields().length == 0) {
        subPresentable=new SimpleSearchListPresenter(prefix,advancedCollectionView,searchView,metadata.getAvailableToTypes(),viewTitle);
      }
 else {
        subPresentable=new EditableAdornedTargetListPresenter(prefix,advancedCollectionView,searchView,metadata.getAvailableToTypes(),viewTitle,viewTitle,metadata.getMaintainedAdornedTargetFields());
      }
      Boolean[] edits=new Boolean[metadata.getGridVisibleFields().length];
      for (int j=0; j < edits.length; j++) {
        edits[j]=false;
      }
      subPresentable.setDataSource((ListGridDataSource)dataSource,metadata.getGridVisibleFields(),edits);
      subPresentable.setReadOnly(!metadata.isMutable());
      ((GridStructureView)subPresentable.getDisplay()).getToolBar().disable();
      presenter.setSubPresentable(dataSource.getDataURL(),subPresentable);
    }
    @Override public void visit(    MapMetadata metadata){
      GridStructureView advancedCollectionView=new GridStructureView(viewTitle,false,true);
      destination.addMember(advancedCollectionView);
      SubPresentable subPresentable;
      if (metadata.isSimpleValue()) {
        subPresentable=new SimpleMapStructurePresenter(prefix,advancedCollectionView,metadata.getAvailableToTypes(),null);
      }
 else {
        MapStructureEntityEditDialog mapEntityAdd;
        if (lookupDataSource != null) {
          mapEntityAdd=new MapStructureEntityEditDialog((MapStructure)metadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE),lookupDataSource,metadata.getMapKeyOptionEntityDisplayField(),metadata.getMapKeyOptionEntityValueField());
        }
 else {
          LinkedHashMap<String,String> keys=new LinkedHashMap<String,String>();
          for (          String[] key : metadata.getKeys()) {
            String temp=BLCMain.getMessageManager().getString(key[1]);
            if (temp == null) {
              temp=key[1];
            }
            keys.put(key[0],temp);
          }
          mapEntityAdd=new MapStructureEntityEditDialog((MapStructure)metadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE),keys);
        }
        if (metadata.getMediaField() != null && metadata.getMediaField().length() > 0) {
          mapEntityAdd.setShowMedia(true);
          mapEntityAdd.setMediaField(metadata.getMediaField());
        }
 else {
          mapEntityAdd.setShowMedia(false);
        }
        subPresentable=new MapStructurePresenter(prefix,advancedCollectionView,mapEntityAdd,viewTitle,null);
      }
      subPresentable.setDataSource((ListGridDataSource)dataSource,new String[]{},new Boolean[]{});
      subPresentable.setReadOnly(!metadata.isMutable());
      ((GridStructureView)subPresentable.getDisplay()).getToolBar().disable();
      presenter.setSubPresentable(dataSource.getDataURL(),subPresentable);
    }
  }
);
}

{
  final FormItem formItem;
switch (SupportedFieldType.valueOf(fieldType)) {
case BOOLEAN:
    formItem=new BooleanItem();
  formItem.setValueFormatter(new FormItemValueFormatter(){
    @Override public String formatValue(    Object value,    Record record,    DynamicForm form,    FormItem item){
      if (value == null) {
        item.setValue(false);
        return "false";
      }
      return String.valueOf(value);
    }
  }
);
break;
case DATE:
formItem=new DateTimeItem();
break;
case DECIMAL:
formItem=new FloatItem();
formItem.setAttribute("type","localDecimal");
break;
case EMAIL:
formItem=new TextItem();
formItem.setWidth(220);
((TextItem)formItem).setLength(field.getLength());
break;
case INTEGER:
formItem=new IntegerItem();
break;
case MONEY:
formItem=new FloatItem();
formItem.setAttribute("type","localMoneyDecimal");
break;
case FOREIGN_KEY:
formItem=new SearchFormItem();
formItem.setWidth(235);
formItem.setValueFormatter(new FormItemValueFormatter(){
@Override public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
String response;
if (value == null) {
response="";
}
 else {
response=(String)form.getField("__display_" + item.getName()).getValue();
}
return response;
}
}
);
break;
case ADDITIONAL_FOREIGN_KEY:
formItem=new SearchFormItem();
formItem.setWidth(235);
formItem.setValueFormatter(new FormItemValueFormatter(){
@Override public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
String response;
if (value == null) {
response="";
}
 else {
response=(String)form.getField("__display_" + item.getName()).getValue();
}
return response;
}
}
);
break;
case BROADLEAF_ENUMERATION:
case EXPLICIT_ENUMERATION:
case DATA_DRIVEN_ENUMERATION:
formItem=new ComboBoxItem();
ComboBoxItem comboBoxItem=(ComboBoxItem)formItem;
comboBoxItem.setAddUnknownValues(field.getAttributeAsBoolean("canEditEnumeration"));
comboBoxItem.setHeight(25);
comboBoxItem.setWidth(280);
comboBoxItem.setPickerIconHeight(26);
comboBoxItem.setPickerIconWidth(22);
LinkedHashMap<String,String> valueMap=new LinkedHashMap<String,String>();
String[][] enumerationValues=(String[][])field.getAttributeAsObject("enumerationValues");
for (String[] enumerationValue : enumerationValues) {
valueMap.put(enumerationValue[0],enumerationValue[1]);
}
formItem.setValueMap(valueMap);
ListGrid pickListProperties=new ListGrid();
pickListProperties.setCellFormatter(new CellFormatter(){
@Override public String format(Object value,ListGridRecord record,int rowNum,int colNum){
return "<div style='padding: 2px 4px; font-size: 11px;'>" + value + "</div>";
}
}
);
comboBoxItem.setPickListProperties(pickListProperties);
break;
case EMPTY_ENUMERATION:
formItem=new SelectItem();
break;
case ID:
formItem=new StaticTextItem();
((TextItem)formItem).setLength(field.getLength());
formItem.setValueFormatter(new FormItemValueFormatter(){
@Override public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
return value == null ? "" : ((DynamicEntityDataSource)dataSource).stripDuplicateAllowSpecialCharacters(String.valueOf(value));
}
}
);
break;
case PASSWORD:
formItem=new PasswordItem();
formItem.setWidth(220);
((PasswordItem)formItem).setLength(field.getLength());
break;
case HTML:
formItem=new BLCRichTextItem();
break;
case HTML_BASIC:
formItem=new BLCRichTextItem();
break;
case UPLOAD:
formItem=new UploadItem();
break;
case HIDDEN:
formItem=new HiddenItem();
break;
case ASSET:
formItem=new AssetItem();
break;
case ASSET_URL:
formItem=new EditableSearchFormItem();
break;
default :
if (!largeEntry) {
formItem=new TextItem();
formItem.setWidth(220);
((TextItem)formItem).setLength(field.getLength());
}
 else {
formItem=new TextAreaItem();
((TextAreaItem)formItem).setLength(field.getLength());
formItem.setHeight(70);
formItem.setWidth(440);
}
break;
}
return formItem;
}

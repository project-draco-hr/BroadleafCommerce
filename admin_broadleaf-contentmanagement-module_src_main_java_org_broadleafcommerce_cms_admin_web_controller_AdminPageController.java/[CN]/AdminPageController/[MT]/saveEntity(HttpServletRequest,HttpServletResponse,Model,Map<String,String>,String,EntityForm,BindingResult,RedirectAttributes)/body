{
  DynamicEntityFormInfo info=new DynamicEntityFormInfo().withCeilingClassName(PageTemplate.class.getName()).withSecurityCeilingClassName(Page.class.getName()).withCriteriaName("constructForm").withPropertyName("pageTemplate");
  entityForm.putDynamicFormInfo("pageTemplate",info);
  String returnPath=super.saveEntity(request,response,model,pathVars,id,entityForm,result,ra);
  if (result.hasErrors()) {
    info=entityForm.getDynamicFormInfo("pageTemplate");
    if (entityForm.getFields().containsKey("pageTemplate")) {
      info.setPropertyValue(entityForm.getFields().get("pageTemplate").getValue());
    }
    EntityForm inputDynamicForm=entityForm.getDynamicForm("pageTemplate");
    if (inputDynamicForm != null) {
      List<Field> fieldsToChange=new ArrayList<Field>();
      String prefix="pageTemplate" + DynamicEntityFormInfo.FIELD_SEPARATOR;
      for (      Entry<String,Field> entry : inputDynamicForm.getFields().entrySet()) {
        if (entry.getKey().startsWith(prefix)) {
          fieldsToChange.add(entry.getValue());
        }
      }
      for (      Field f : fieldsToChange) {
        inputDynamicForm.getFields().remove(f.getName());
        f.setName(f.getName().substring(prefix.length()));
        inputDynamicForm.getFields().put(f.getName(),f);
      }
    }
    EntityForm dynamicForm=getDynamicFieldTemplateForm(info,id,inputDynamicForm);
    entityForm.putDynamicForm("pageTemplate",dynamicForm);
    entityForm.removeListGrid("additionalAttributes");
  }
  return returnPath;
}

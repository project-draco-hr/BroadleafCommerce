{
  for (  Property property : metadata.getProperties()) {
    String mergedPropertyType=property.getMergedPropertyType();
    if (Arrays.binarySearch(includeTypes,MergedPropertyType.valueOf(mergedPropertyType)) >= 0) {
      String rawName=property.getName();
      String propertyName=rawName;
      String fieldType=property.getType();
      Long length=property.getLength();
      Boolean required=property.getRequired();
      if (required == null) {
        required=false;
      }
      Boolean mutable=property.getMutable();
      String inheritedFromType=property.getInheritedFromType();
      String availableToTypes=property.getAvailableToTypes();
      String foreignKeyClass=property.getForeignKeyClass();
      String foreignKeyProperty=property.getForeignKeyProperty();
      String friendlyName=property.getFriendlyName();
      if (friendlyName == null) {
        friendlyName=property.getName();
      }
      Boolean hidden=property.getHidden();
      String group=property.getGroup();
      Boolean largeEntry=property.getLargeEntry();
      Boolean prominent=property.getProminent();
      Integer order=property.getOrder();
      DataSourceField field;
switch (SupportedFieldType.valueOf(fieldType)) {
case ID:
        field=new DataSourceTextField("id");
      field.setCanEdit(false);
    field.setPrimaryKey(true);
  field.setHidden(true);
field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
case BOOLEAN:
field=new DataSourceBooleanField(propertyName,friendlyName);
field.setCanEdit(mutable);
break;
case DATE:
field=new DataSourceDateTimeField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case INTEGER:
field=new DataSourceIntegerField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case DECIMAL:
field=new DataSourceFloatField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case EMAIL:
field=new DataSourceTextField(propertyName,friendlyName);
field.setValidators(Validators.EMAIL);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case MONEY:
field=new DataSourceFloatField(propertyName,friendlyName);
field.setValidators(Validators.USCURRENCY);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case FOREIGN_KEY:
field=new DataSourceTextField(propertyName,friendlyName);
String dataSourceName=null;
ForeignKey foreignField=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
if (foreignField != null && foreignField.getForeignKeyClass().equals(foreignKeyClass)) {
dataSourceName=foreignField.getDataSourceName();
}
if (dataSourceName == null) {
field.setForeignKey(foreignKeyProperty);
}
 else {
field.setForeignKey(dataSourceName + "." + foreignKeyProperty);
}
field.setHidden(true);
field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
case ADDITIONAL_FOREIGN_KEY:
field=new DataSourceTextField(propertyName,friendlyName);
field.setHidden(true);
field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
default :
field=new DataSourceTextField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
}
if (hidden != null) {
field.setHidden(hidden);
field.setAttribute("permanentlyHidden",hidden);
}
if (group != null) {
field.setAttribute("formGroup",group);
}
if (largeEntry != null) {
field.setAttribute("largeEntry",largeEntry);
}
if (prominent != null) {
field.setAttribute("prominent",prominent);
}
if (order != null) {
field.setAttribute("presentationLayerOrder",order);
}
if (length != null) {
field.setLength(length.intValue());
}
field.setAttribute("inheritedFromType",inheritedFromType);
field.setAttribute("availableToTypes",availableToTypes);
field.setAttribute("fieldType",fieldType);
field.setAttribute("mergedPropertyType",mergedPropertyType);
field.setAttribute("rawName",rawName);
dataSource.addField(field);
}
}
}

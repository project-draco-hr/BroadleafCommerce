{
  Order order=cartService.createNewCartForCustomer(createCustomer());
  customerService.saveCustomer(order.getCustomer());
  FulfillmentGroup group1=new FulfillmentGroupImpl();
  FulfillmentGroup group2=new FulfillmentGroupImpl();
  group1.setMethod("standard");
  group1.setService(ShippingServiceType.BANDED_SHIPPING.getType());
  Address address=new AddressImpl();
  address.setAddressLine1("123 Test Rd");
  address.setCity("Dallas");
  address.setFirstName("Jeff");
  address.setLastName("Fischer");
  address.setPostalCode("75240");
  address.setPrimaryPhone("972-978-9067");
  Country country=new CountryImpl();
  country.setAbbreviation("US");
  country.setName("United States");
  countryService.save(country);
  State state=new StateImpl();
  state.setAbbreviation("TX");
  state.setName("Texas");
  state.setCountry(country);
  stateService.save(state);
  address.setState(state);
  address.setCountry(country);
  group1.setAddress(address);
  group1.setOrder(order);
  group1.setIsShippingPriceTaxable(true);
  group2.setMethod("truck");
  group2.setService(ShippingServiceType.BANDED_SHIPPING.getType());
  group2.setOrder(order);
  List<FulfillmentGroup> groups=new ArrayList<FulfillmentGroup>();
  groups.add(group1);
  order.setFulfillmentGroups(groups);
  Money total=new Money(8.5D);
  group1.setShippingPrice(total);
  group2.setShippingPrice(total);
  order.setSubTotal(total);
  order.setTotal(total);
  DiscreteOrderItem item=new DiscreteOrderItemImpl();
  item.setPrice(new Money(10D));
  item.setRetailPrice(new Money(15D));
  Sku sku=new SkuImpl();
  sku.setRetailPrice(new Money(15D));
  sku.setDiscountable(true);
  sku.setName("Test Sku");
  sku=catalogService.saveSku(sku);
  item.setSku(sku);
  item.setQuantity(1);
  item.setOrder(order);
  item=(DiscreteOrderItem)orderItemService.saveOrderItem(item);
  List<OrderItem> items=new ArrayList<OrderItem>();
  items.add(item);
  order.setOrderItems(items);
  for (  OrderItem orderItem : items) {
    FulfillmentGroupItem fgi=new FulfillmentGroupItemImpl();
    fgi.setOrderItem(orderItem);
    fgi.setFulfillmentGroup(group1);
    group1.addFulfillmentGroupItem(fgi);
  }
  order.setTotalShipping(new Money(0D));
  cartService.save(order,true);
  assert(order.getTotal().greaterThan(order.getSubTotal()));
  assert(order.getTotalTax().equals(order.getSubTotal().multiply(0.05D).add(group1.getShippingPrice().multiply(0.05D))));
  assert(order.getTotal().equals(order.getSubTotal().add(order.getTotalTax().add(order.getTotalShipping()))));
}

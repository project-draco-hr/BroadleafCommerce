{
  final FormItem formItem;
switch (SupportedFieldType.valueOf(fieldType)) {
case BOOLEAN:
    formItem=new BooleanItem();
  formItem.setColSpan(2);
formItem.setValueFormatter(new FormItemValueFormatter(){
  public String formatValue(  Object value,  Record record,  DynamicForm form,  FormItem item){
    if (value == null) {
      item.setValue(false);
      return "false";
    }
    return String.valueOf(value);
  }
}
);
break;
case DATE:
formItem=new DateTimeItem();
formItem.setColSpan(2);
break;
case DECIMAL:
formItem=new FloatItem();
formItem.setColSpan(2);
break;
case EMAIL:
formItem=new TextItem();
formItem.setColSpan(2);
((TextItem)formItem).setLength(field.getLength());
break;
case INTEGER:
formItem=new IntegerItem();
formItem.setColSpan(2);
break;
case MONEY:
formItem=new FloatItem();
formItem.setColSpan(2);
formItem.setEditorValueFormatter(new FormItemValueFormatter(){
public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
return value == null ? "" : NumberFormat.getFormat("0.00").format(NumberFormat.getFormat("0.00").parse(String.valueOf(value)));
}
}
);
break;
case FOREIGN_KEY:
formItem=new SearchFormItem();
formItem.setColSpan(2);
formItem.setValueFormatter(new FormItemValueFormatter(){
public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
String response;
if (value == null) {
response="";
}
 else {
response=(String)form.getField("__display_" + item.getName()).getValue();
}
return response;
}
}
);
break;
case ADDITIONAL_FOREIGN_KEY:
formItem=new SearchFormItem();
formItem.setColSpan(2);
formItem.setValueFormatter(new FormItemValueFormatter(){
public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
String response;
if (value == null) {
response="";
}
 else {
response=(String)form.getField("__display_" + item.getName()).getValue();
}
return response;
}
}
);
break;
case BROADLEAF_ENUMERATION:
formItem=new SelectItem();
formItem.setColSpan(2);
LinkedHashMap<String,String> valueMap=new LinkedHashMap<String,String>();
String[][] enumerationValues=(String[][])field.getAttributeAsObject("enumerationValues");
for (int j=0; j < enumerationValues.length; j++) {
valueMap.put(enumerationValues[j][0],enumerationValues[j][1]);
}
formItem.setValueMap(valueMap);
break;
case EXPLICIT_ENUMERATION:
formItem=new SelectItem();
formItem.setColSpan(2);
LinkedHashMap<String,String> valueMap2=new LinkedHashMap<String,String>();
String[][] enumerationValues2=(String[][])field.getAttributeAsObject("enumerationValues");
for (int j=0; j < enumerationValues2.length; j++) {
valueMap2.put(enumerationValues2[j][0],enumerationValues2[j][1]);
}
formItem.setValueMap(valueMap2);
break;
case EMPTY_ENUMERATION:
formItem=new SelectItem();
formItem.setColSpan(2);
break;
case ID:
formItem=new TextItem();
formItem.setColSpan(2);
((TextItem)formItem).setLength(field.getLength());
formItem.setValueFormatter(new FormItemValueFormatter(){
public String formatValue(Object value,Record record,DynamicForm form,FormItem item){
return value == null ? "" : ((DynamicEntityDataSource)dataSource).stripDuplicateAllowSpecialCharacters(String.valueOf(value));
}
}
);
break;
case PASSWORD:
formItem=new PasswordItem();
formItem.setColSpan(2);
((PasswordItem)formItem).setLength(field.getLength());
break;
case HTML:
RichTextCanvasItem richTextCanvasItem=new RichTextCanvasItem();
RichTextHTMLPane richTextHTMLPane=new RichTextHTMLPane(((HtmlEditingModule)BLCMain.getModule(BLCMain.currentModuleKey)).getHtmlEditorIFramePath(),form);
if (!(BLCMain.getModule(BLCMain.currentModuleKey) instanceof HtmlEditingModule)) {
throw new RuntimeException("An Html editing item was found in the form, but the current module is not of the type org.broadleafcommerce.openadmin.client.HtmlEditingModule");
}
richTextHTMLPane.setWidth(700);
richTextHTMLPane.setHeight(450);
richTextHTMLPane.setContentsType(ContentsType.PAGE);
richTextCanvasItem.setCanvas(richTextHTMLPane);
richTextCanvasItem.setShowTitle(true);
richTextCanvasItem.setColSpan(2);
formItem=richTextCanvasItem;
break;
case HTML_BASIC:
RichTextCanvasItem basicRichTextCanvasItem=new RichTextCanvasItem();
RichTextHTMLPane basicRichTextHTMLPane=new RichTextHTMLPane(((HtmlEditingModule)BLCMain.getModule(BLCMain.currentModuleKey)).getBasicHtmlEditorIFramePath(),form);
if (!(BLCMain.getModule(BLCMain.currentModuleKey) instanceof HtmlEditingModule)) {
throw new RuntimeException("An Html editing item was found in the form, but the current module is not of the type org.broadleafcommerce.openadmin.client.HtmlEditingModule");
}
basicRichTextHTMLPane.setWidth(300);
basicRichTextHTMLPane.setHeight(175);
basicRichTextHTMLPane.setContentsType(ContentsType.PAGE);
basicRichTextCanvasItem.setCanvas(basicRichTextHTMLPane);
basicRichTextCanvasItem.setShowTitle(true);
basicRichTextCanvasItem.setColSpan(2);
formItem=basicRichTextCanvasItem;
break;
case UPLOAD:
formItem=new UploadItem();
formItem.setColSpan(1);
break;
case HIDDEN:
formItem=new HiddenItem();
formItem.setColSpan(2);
break;
case ASSET:
formItem=new AssetItem();
formItem.setColSpan(2);
break;
case ASSET_URL:
formItem=new EditableSearchFormItem();
formItem.setColSpan(2);
break;
default :
if (!largeEntry) {
formItem=new TextItem();
formItem.setColSpan(2);
((TextItem)formItem).setLength(field.getLength());
}
 else {
formItem=new TextAreaItem();
formItem.setColSpan(2);
((TextAreaItem)formItem).setLength(field.getLength());
formItem.setHeight(70);
formItem.setWidth("400");
}
break;
}
return formItem;
}

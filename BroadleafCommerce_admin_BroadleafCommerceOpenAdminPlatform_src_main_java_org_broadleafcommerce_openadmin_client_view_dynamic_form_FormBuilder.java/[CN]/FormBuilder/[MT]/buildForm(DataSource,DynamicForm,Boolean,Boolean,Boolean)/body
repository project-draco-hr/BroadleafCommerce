{
  form.setDataSource(dataSource);
  Map<String,List<FormItem>> sections=new HashMap<String,List<FormItem>>();
  Map<String,Integer> sectionNames=new HashMap<String,Integer>();
  DataSourceField[] fields=dataSource.getFields();
  Boolean originalEdit=canEdit;
  for (  DataSourceField field : fields) {
    if (field.getAttribute("securityLevel") != null && field.getAttribute("uniqueID") != null && !SecurityManager.getInstance().isUserAuthorizedToEditField(field.getAttribute("uniqueID"))) {
      canEdit=false;
    }
    String fieldType=field.getAttribute("fieldType");
    if (fieldType != null && !field.getHidden()) {
      String group=field.getAttribute("formGroup");
      String temp=field.getAttribute("formGroupOrder");
      Integer groupOrder=null;
      if (temp != null) {
        groupOrder=Integer.valueOf(temp);
      }
      if (group == null) {
        if (fieldType.equals(SupportedFieldType.ID.toString())) {
          group="Primary Key";
        }
 else {
          group="General";
        }
      }
      if (!fieldType.equals(SupportedFieldType.ID.toString()) || (fieldType.equals(SupportedFieldType.ID.toString()) && showId)) {
        Boolean largeEntry=field.getAttributeAsBoolean("largeEntry");
        if (largeEntry == null) {
          largeEntry=false;
        }
        final FormItem formItem=buildField(dataSource,field,fieldType,largeEntry);
        final FormItem displayFormItem=buildDisplayField(field,fieldType);
        if (fieldType.equals(SupportedFieldType.ID.toString())) {
          canEdit=false;
          showDisabledState=false;
        }
        setupField(showDisabledState,canEdit,sections,sectionNames,field,group,groupOrder,formItem,displayFormItem);
        checkForPasswordField(showDisabledState,canEdit,sections,sectionNames,field,group,groupOrder,formItem,displayFormItem,form);
      }
    }
    canEdit=originalEdit;
  }
  groupFields(form,sections,sectionNames);
}

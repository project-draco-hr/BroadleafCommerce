{
  super.bind();
  formPresenter.getSaveButtonHandlerRegistration().removeHandler();
  formPresenter.getRefreshButtonHandlerRegistration().removeHandler();
  refreshButtonHandlerRegistration=getDisplay().getDynamicFormDisplay().getRefreshButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().reset();
        FormOnlyView legacyForm=(FormOnlyView)((FormOnlyView)((DynamicFormView)getDisplay().getDynamicFormDisplay()).getFormOnlyDisplay()).getMember("contentTypeForm");
        if (legacyForm != null) {
          legacyForm.getForm().reset();
        }
        getDisplay().getDynamicFormDisplay().getSaveButton().disable();
      }
    }
  }
);
  saveButtonHandlerRegistration=getDisplay().getDynamicFormDisplay().getSaveButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        DSRequest requestProperties=new DSRequest();
        requestProperties.setAttribute("dirtyValues",getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().getChangedValues());
        getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().saveData(new DSCallback(){
          @Override public void execute(          DSResponse response,          Object rawData,          DSRequest request){
            if (response.getStatus() != RPCResponse.STATUS_FAILURE) {
              final Record newRecord=response.getData()[0];
              final String newId=getPresenterSequenceSetupManager().getDataSource("structuredContentDS").getPrimaryKeyValue(newRecord);
              FormOnlyView legacyForm=(FormOnlyView)((FormOnlyView)getDisplay().getDynamicFormDisplay().getFormOnlyDisplay()).getMember("contentTypeForm");
              final DynamicForm form=legacyForm.getForm();
              for (              FormItem formItem : form.getFields()) {
                if (formItem instanceof RichTextCanvasItem) {
                  form.setValue(formItem.getFieldName(),((RichTextHTMLPane)((RichTextCanvasItem)formItem).getCanvas()).getValue());
                }
              }
              StructuredContentTypeFormListDataSource dataSource=(StructuredContentTypeFormListDataSource)form.getDataSource();
              dataSource.setCustomCriteria(new String[]{"constructForm",newId});
              form.saveData(new DSCallback(){
                @Override public void execute(                DSResponse response,                Object rawData,                DSRequest request){
                  if (response.getStatus() != RPCResponse.STATUS_FAILURE) {
                    getDisplay().getDynamicFormDisplay().getSaveButton().disable();
                  }
                }
              }
);
              if (!getPresenterSequenceSetupManager().getDataSource("structuredContentDS").getPrimaryKeyValue(currentStructuredContentRecord).equals(newId)) {
                display.getListDisplay().getGrid().getRecordList().remove(currentStructuredContentRecord);
                currentStructuredContentRecord=newRecord;
              }
            }
          }
        }
,requestProperties);
      }
    }
  }
);
  getDisplay().getListDisplay().getGrid().addFetchDataHandler(new FetchDataHandler(){
    @Override public void onFilterData(    FetchDataEvent event){
      isFetched=true;
    }
  }
);
  getDisplay().getAddItemButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        final ItemBuilderDisplay display=getDisplay().addItemBuilder(getPresenterSequenceSetupManager().getDataSource("scOrderItemDS"));
        bindItemBuilderEvents(display);
        display.setDirty(true);
        getDisplay().getDynamicFormDisplay().getSaveButton().enable();
      }
    }
  }
);
}

{
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(collectionProperty.getMetadata(),sectionCrumbs);
  FieldMetadata md=collectionProperty.getMetadata();
  String containingEntityId=getContextSpecificRelationshipId(containingClassMetadata,containingEntity,collectionProperty.getName());
  ppr.setSectionEntityField(collectionProperty.getName());
  PersistenceResponse response;
  if (md instanceof AdornedTargetCollectionMetadata) {
    FilterAndSortCriteria fasc=new FilterAndSortCriteria(ppr.getAdornedList().getCollectionFieldName());
    fasc.setFilterValue(containingEntityId);
    ppr.addFilterAndSortCriteria(fasc);
    fasc=new FilterAndSortCriteria(ppr.getAdornedList().getCollectionFieldName() + "Target");
    fasc.setFilterValue(collectionItemId);
    ppr.addFilterAndSortCriteria(fasc);
    if (!StringUtils.isEmpty(alternateId)) {
      fasc=new FilterAndSortCriteria(ppr.getAdornedList().getIdProperty());
      fasc.setFilterValue(alternateId);
      ppr.addFilterAndSortCriteria(fasc);
    }
    response=fetch(ppr);
    Entity[] entities=response.getDynamicResultSet().getRecords();
    if (entities == null || entities.length != 1)     throw new EntityNotFoundException();
  }
 else   if (md instanceof MapMetadata) {
    MapMetadata mmd=(MapMetadata)md;
    FilterAndSortCriteria fasc=new FilterAndSortCriteria(ppr.getForeignKey().getManyToField());
    fasc.setFilterValue(containingEntityId);
    ppr.addFilterAndSortCriteria(fasc);
    response=fetch(ppr);
    Entity[] entities=response.getDynamicResultSet().getRecords();
    for (    Entity e : entities) {
      String idProperty=getIdProperty(containingClassMetadata);
      if (mmd.isSimpleValue()) {
        idProperty="key";
      }
      Property p=e.getPMap().get(idProperty);
      if (p.getValue().equals(collectionItemId)) {
        response.setEntity(e);
        break;
      }
    }
  }
 else {
    throw new IllegalArgumentException(String.format("The specified field [%s] for class [%s] was not an " + "advanced collection field.",collectionProperty.getName(),containingClassMetadata.getCeilingType()));
  }
  if (response == null) {
    throw new NoResultException(String.format("Could not find record for class [%s], field [%s], main entity id " + "[%s], collection entity id [%s]",containingClassMetadata.getCeilingType(),collectionProperty.getName(),containingEntityId,collectionItemId));
  }
  return response;
}

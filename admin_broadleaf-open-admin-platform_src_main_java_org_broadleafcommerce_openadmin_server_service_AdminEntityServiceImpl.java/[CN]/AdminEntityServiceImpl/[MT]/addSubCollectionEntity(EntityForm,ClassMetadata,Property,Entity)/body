{
  List<Property> properties=new ArrayList<Property>();
  for (  Entry<String,Field> entry : entityForm.getFields().entrySet()) {
    Property p=new Property();
    p.setName(entry.getKey());
    p.setValue(entry.getValue().getValue());
    properties.add(p);
  }
  FieldMetadata md=field.getMetadata();
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(md).withEntity(new Entity());
  if (md instanceof BasicCollectionMetadata) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    Class<?> listClass=Class.forName(fmd.getCollectionCeilingEntity());
    List<Class<?>> testClasses=new ArrayList<Class<?>>();
    testClasses.add(listClass);
    if (!listClass.isInterface()) {
      testClasses.addAll(Arrays.asList(listClass.getInterfaces()));
    }
    String overrideClass=listClass.getName();
    for (    Class<?> clazz : testClasses) {
      try {
        overrideClass=entityConfiguration.lookupEntityClass(clazz.getName()).getName();
        break;
      }
 catch (      NoSuchBeanDefinitionException e) {
      }
    }
    ppr.getEntity().setType(new String[]{overrideClass});
    if (fmd.getAddMethodType().equals(AddMethodType.LOOKUP)) {
      List<String> fieldsToRemove=new ArrayList<String>();
      String idProp=getIdProperty(mainMetadata);
      for (      String key : entityForm.getFields().keySet()) {
        if (!idProp.equals(key)) {
          fieldsToRemove.add(key);
        }
      }
      for (      String key : fieldsToRemove) {
        ListIterator<Property> li=properties.listIterator();
        while (li.hasNext()) {
          if (li.next().getName().equals(key)) {
            li.remove();
          }
        }
      }
      ppr.setValidateUnsubmittedProperties(false);
    }
    Property fp=new Property();
    fp.setName(ppr.getForeignKey().getManyToField());
    fp.setValue(getContextSpecificRelationshipId(mainMetadata,parentEntity,field.getName()));
    properties.add(fp);
  }
 else   if (md instanceof AdornedTargetCollectionMetadata) {
    ppr.getEntity().setType(new String[]{ppr.getAdornedList().getAdornedTargetEntityClassname()});
  }
 else   if (md instanceof MapMetadata) {
    ppr.getEntity().setType(new String[]{entityForm.getEntityType()});
    Property p=new Property();
    p.setName("symbolicId");
    p.setValue(getContextSpecificRelationshipId(mainMetadata,parentEntity,field.getName()));
    properties.add(p);
  }
 else {
    throw new IllegalArgumentException(String.format("The specified field [%s] for class [%s] was" + " not a collection field.",field.getName(),mainMetadata.getCeilingType()));
  }
  ppr.setCeilingEntityClassname(ppr.getEntity().getType()[0]);
  Property[] propArr=new Property[properties.size()];
  properties.toArray(propArr);
  ppr.getEntity().setProperties(propArr);
  return add(ppr);
}

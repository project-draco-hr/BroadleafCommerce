{
  final ClassMetadata cmd=getClassMetadata(className);
  final List<Property> properties=new ArrayList<Property>();
  for (  Entry<String,Field> entry : entityForm.getFields().entrySet()) {
    Property p=new Property();
    p.setName(entry.getKey());
    p.setValue(entry.getValue().getValue());
    properties.add(p);
  }
  final PersistencePackageRequest request=new PersistencePackageRequest().withEntity(new Entity());
  cmd.getPMap().get(fieldName).getMetadata().accept(new MetadataVisitor(){
    @Override public void visit(    MapMetadata fmd){
      ForeignKey foreignField=(ForeignKey)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
      MapStructure map=(MapStructure)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
      request.setType(PersistencePackageRequest.Type.MAP);
      request.getEntity().setType(new String[]{entityForm.getEntityType()});
      request.setMapStructure(map);
      request.addForeignKey(foreignField);
    }
    @Override public void visit(    AdornedTargetCollectionMetadata fmd){
      AdornedTargetList adornedList=(AdornedTargetList)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
      request.setType(PersistencePackageRequest.Type.ADORNED);
      request.getEntity().setType(new String[]{adornedList.getAdornedTargetEntityClassname()});
      request.setAdornedList(adornedList);
    }
    @Override public void visit(    BasicCollectionMetadata fmd){
      ForeignKey foreignField=null;
      if (fmd != null) {
        foreignField=(ForeignKey)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
        Property fp=new Property();
        fp.setName(foreignField.getManyToField());
        fp.setValue(parentId);
        properties.add(fp);
      }
      request.setType(PersistencePackageRequest.Type.STANDARD);
      request.getEntity().setType(new String[]{fmd.getCollectionCeilingEntity()});
      request.addForeignKey(foreignField);
    }
    @Override public void visit(    BasicFieldMetadata fmd){
      throw new IllegalArgumentException(String.format("The specified field [%s] for class [%s] was" + " not a collection field.",fieldName,cmd.getCeilingType()));
    }
  }
);
  Property[] propArr=new Property[properties.size()];
  properties.toArray(propArr);
  request.getEntity().setProperties(propArr);
  request.withClassName(request.getEntity().getType()[0]);
  return add(request);
}

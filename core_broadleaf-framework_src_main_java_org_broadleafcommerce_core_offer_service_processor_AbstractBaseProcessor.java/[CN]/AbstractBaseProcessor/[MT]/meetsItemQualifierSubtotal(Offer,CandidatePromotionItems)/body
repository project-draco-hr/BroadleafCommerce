{
  Money qualifyingSubtotal=offer.getQualifyingItemSubTotal();
  if (!hasPositiveValue(qualifyingSubtotal)) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Offer " + offer.getName() + " does not have an item subtotal requirement.");
    }
    return true;
  }
  if (isEmpty(offer.getQualifyingItemCriteria())) {
    if (OfferType.ORDER_ITEM.equals(offer.getType())) {
      if (LOG.isWarnEnabled()) {
        LOG.warn("Offer " + offer.getName() + " has a subtotal item requirement but no item qualification criteria.");
      }
      return false;
    }
 else {
      Money accumulatedTotal=null;
      for (      PromotableOrderItem orderItem : candidateItem.getCandidateTargets()) {
        Money itemPrice=orderItem.getCurrentBasePrice().multiply(orderItem.getQuantity());
        accumulatedTotal=accumulatedTotal == null ? itemPrice : accumulatedTotal.add(itemPrice);
        if (accumulatedTotal.greaterThan(qualifyingSubtotal)) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Offer " + offer.getName() + " meets qualifying item subtotal.");
          }
          return true;
        }
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Offer " + offer.getName() + " does not meet qualifying item subtotal.");
    }
  }
 else {
    if (candidateItem.getCandidateQualifiersMap() != null) {
      Money accumulatedTotal=null;
      Set<PromotableOrderItem> usedItems=new HashSet<PromotableOrderItem>();
      for (      OfferItemCriteria criteria : candidateItem.getCandidateQualifiersMap().keySet()) {
        List<PromotableOrderItem> promotableItems=candidateItem.getCandidateQualifiersMap().get(criteria);
        if (promotableItems != null) {
          for (          PromotableOrderItem item : promotableItems) {
            if (!usedItems.contains(item)) {
              usedItems.add(item);
              Money itemPrice=item.getCurrentBasePrice().multiply(item.getQuantity());
              accumulatedTotal=accumulatedTotal == null ? itemPrice : accumulatedTotal.add(itemPrice);
              if (accumulatedTotal.greaterThan(qualifyingSubtotal)) {
                if (LOG.isTraceEnabled()) {
                  LOG.trace("Offer " + offer.getName() + " meets the item subtotal requirement.");
                }
                return true;
              }
            }
          }
        }
      }
    }
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Offer " + offer.getName() + " does not meet the item subtotal qualifications.");
  }
  return false;
}

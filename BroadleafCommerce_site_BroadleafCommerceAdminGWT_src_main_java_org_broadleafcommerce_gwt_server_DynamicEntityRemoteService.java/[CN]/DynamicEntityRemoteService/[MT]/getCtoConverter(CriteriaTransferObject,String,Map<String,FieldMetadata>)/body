{
  BaseCtoConverter ctoConverter=new BaseCtoConverter();
  for (  String propertyName : mergedProperties.keySet()) {
switch (mergedProperties.get(propertyName).getFieldType()) {
case BOOLEAN:
      ctoConverter.addBooleanMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
    break;
case DATE:
  ctoConverter.addDateMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case DECIMAL:
ctoConverter.addDecimalMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case MONEY:
ctoConverter.addDecimalMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case INTEGER:
ctoConverter.addLongMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case STRING:
ctoConverter.addStringLikeMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case EMAIL:
ctoConverter.addStringLikeMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
case FOREIGN_KEY:
if (cto.get(propertyName).getFilterValues().length > 0) {
if (cto.get(propertyName).getFilterValues()[0] == null) {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addNullMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getComplexIdProperty());
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addLongEQMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getComplexIdProperty());
}
}
break;
case ID:
ctoConverter.addLongEQMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
break;
}
}
return ctoConverter;
}

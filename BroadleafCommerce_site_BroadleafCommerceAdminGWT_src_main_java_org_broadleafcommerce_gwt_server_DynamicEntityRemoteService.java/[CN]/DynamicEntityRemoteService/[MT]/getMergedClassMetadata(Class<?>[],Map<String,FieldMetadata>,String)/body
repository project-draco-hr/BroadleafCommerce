{
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  DOMImplementation impl=builder.getDOMImplementation();
  Document doc=impl.createDocument(null,null,null);
  Element root=doc.createElement("inspection");
  doc.appendChild(root);
  Element e1=doc.createElement("entity");
  e1.setAttribute("type",ceilingEntityFullyQualifiedClassname);
  root.appendChild(e1);
  ClassMetadata classMetadata=new ClassMetadata();
  PolymorphicEntity[] polyEntities=new PolymorphicEntity[entities.length];
  int j=0;
  for (  Class<?> type : entities) {
    polyEntities[j]=new PolymorphicEntity();
    polyEntities[j].setType(type.getName());
    polyEntities[j].setName(type.getSimpleName());
    j++;
  }
  classMetadata.setPolymorphicEntities(polyEntities);
  Property[] properties=new Property[mergedProperties.size()];
  j=0;
  for (  String property : mergedProperties.keySet()) {
    properties[j]=new Property();
    properties[j].setName(property);
    FieldMetadata metadata=mergedProperties.get(property);
    properties[j].setType(metadata.getFieldType().toString());
    if (metadata.getLength() != null) {
      properties[j].setLength(Long.valueOf(metadata.getLength().toString()));
      properties[j].setRequired(Boolean.valueOf(metadata.getRequired().toString()));
      properties[j].setUnique(Boolean.valueOf(metadata.getUnique().toString()));
      properties[j].setScale(Integer.valueOf(metadata.getScale().toString()));
      properties[j].setPrecision(Integer.valueOf(metadata.getPrecision().toString()));
    }
    properties[j].setMutable(Boolean.valueOf(metadata.getMutable().toString()));
    properties[j].setInheritedFromType(metadata.getInheritedFromType().toString());
    properties[j].setAvailableToTypes(metadata.getAvailableToTypes().toString());
    properties[j].setForeignKeyClass(metadata.getProvidedForeignKeyClass());
    properties[j].setForeignKeyProperty(metadata.getComplexIdProperty());
    properties[j].setIsCollection(metadata.getCollection());
    if (metadata.getPresentationAttributes() != null) {
      properties[j].setFriendlyName(metadata.getPresentationAttributes().getFriendlyName());
      properties[j].setOrder(metadata.getPresentationAttributes().getOrder());
      properties[j].setHidden(metadata.getPresentationAttributes().isHidden());
      properties[j].setGroup(metadata.getPresentationAttributes().getGroup());
      properties[j].setLargeEntry(metadata.getPresentationAttributes().isLargeEntry());
      properties[j].setProminent(metadata.getPresentationAttributes().isProminent());
    }
    j++;
  }
  Arrays.sort(properties,new Comparator<Property>(){
    public int compare(    Property o1,    Property o2){
      if (o1.getOrder() != null && o2.getOrder() != null) {
        if (o1.getOrder() == o2.getOrder()) {
          Integer pos1;
          Integer pos2;
          try {
            pos1=Arrays.binarySearch(entities,Class.forName(o1.getInheritedFromType()));
            pos2=Arrays.binarySearch(entities,Class.forName(o2.getInheritedFromType()));
          }
 catch (          ClassNotFoundException e) {
            throw new RuntimeException("Unable to sort properties",e);
          }
          return pos1.compareTo(pos2);
        }
 else         if (o1.getOrder() < 0) {
          return 1;
        }
 else         if (o2.getOrder() < 0) {
          return -1;
        }
 else {
          return o1.getOrder().compareTo(o2.getOrder());
        }
      }
 else       if (o1.getOrder() != null && o2.getOrder() == null) {
        return -1;
      }
 else       if (o1.getOrder() == null && o2.getOrder() != null) {
        return 1;
      }
 else       if (o1.getFriendlyName() != null && o2.getFriendlyName() != null) {
        return o1.getFriendlyName().compareTo(o2.getFriendlyName());
      }
 else {
        return o1.getName().compareTo(o2.getName());
      }
    }
  }
);
  classMetadata.setProperties(properties);
  return classMetadata;
}

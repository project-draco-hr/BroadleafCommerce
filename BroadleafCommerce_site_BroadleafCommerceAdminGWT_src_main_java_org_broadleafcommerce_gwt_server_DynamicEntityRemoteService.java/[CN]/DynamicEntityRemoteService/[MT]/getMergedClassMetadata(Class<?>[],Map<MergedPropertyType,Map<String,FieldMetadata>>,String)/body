{
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  DOMImplementation impl=builder.getDOMImplementation();
  Document doc=impl.createDocument(null,null,null);
  Element root=doc.createElement("inspection");
  doc.appendChild(root);
  Element e1=doc.createElement("entity");
  e1.setAttribute("type",ceilingEntityFullyQualifiedClassname);
  root.appendChild(e1);
  ClassMetadata classMetadata=new ClassMetadata();
  PolymorphicEntity[] polyEntities=new PolymorphicEntity[entities.length];
  int j=0;
  for (  Class<?> type : entities) {
    polyEntities[j]=new PolymorphicEntity();
    polyEntities[j].setType(type.getName());
    polyEntities[j].setName(type.getSimpleName());
    j++;
  }
  classMetadata.setPolymorphicEntities(polyEntities);
  List<Property> propertiesList=new ArrayList<Property>();
  for (  RemoteServiceModule module : modules) {
    module.extractProperties(mergedProperties,propertiesList);
  }
  Property[] properties=new Property[propertiesList.size()];
  properties=propertiesList.toArray(properties);
  Arrays.sort(properties,new Comparator<Property>(){
    public int compare(    Property o1,    Property o2){
      if (o1.getOrder() != null && o2.getOrder() != null) {
        if (o1.getOrder() == o2.getOrder()) {
          Integer pos1;
          Integer pos2;
          try {
            pos1=Arrays.binarySearch(entities,Class.forName(o1.getInheritedFromType()),new Comparator<Class<?>>(){
              public int compare(              Class<?> o1,              Class<?> o2){
                return o1.getName().compareTo(o2.getName());
              }
            }
);
            pos2=Arrays.binarySearch(entities,Class.forName(o2.getInheritedFromType()),new Comparator<Class<?>>(){
              public int compare(              Class<?> o1,              Class<?> o2){
                return o1.getName().compareTo(o2.getName());
              }
            }
);
          }
 catch (          ClassNotFoundException e) {
            throw new RuntimeException("Unable to sort properties",e);
          }
          return pos1.compareTo(pos2);
        }
 else         if (o1.getOrder() < 0) {
          return 1;
        }
 else         if (o2.getOrder() < 0) {
          return -1;
        }
 else {
          return o1.getOrder().compareTo(o2.getOrder());
        }
      }
 else       if (o1.getOrder() != null && o2.getOrder() == null) {
        return -1;
      }
 else       if (o1.getOrder() == null && o2.getOrder() != null) {
        return 1;
      }
 else       if (o1.getFriendlyName() != null && o2.getFriendlyName() != null) {
        return o1.getFriendlyName().compareTo(o2.getFriendlyName());
      }
 else {
        return o1.getName().compareTo(o2.getName());
      }
    }
  }
);
  classMetadata.setProperties(properties);
  return classMetadata;
}

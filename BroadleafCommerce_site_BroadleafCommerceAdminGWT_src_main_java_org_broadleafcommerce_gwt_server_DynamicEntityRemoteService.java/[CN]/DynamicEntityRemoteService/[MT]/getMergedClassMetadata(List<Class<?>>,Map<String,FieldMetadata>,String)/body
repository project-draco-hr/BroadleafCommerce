{
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  DOMImplementation impl=builder.getDOMImplementation();
  Document doc=impl.createDocument(null,null,null);
  Element root=doc.createElement("inspection");
  doc.appendChild(root);
  Element e1=doc.createElement("entity");
  e1.setAttribute("type",ceilingEntityFullyQualifiedClassname);
  root.appendChild(e1);
  ClassMetadata classMetadata=new ClassMetadata();
  PolymorphicEntity[] polyEntities=new PolymorphicEntity[entities.size()];
  int j=0;
  for (  Class<?> type : entities) {
    polyEntities[j]=new PolymorphicEntity();
    polyEntities[j].setType(type.getName());
    polyEntities[j].setName(type.getSimpleName());
    j++;
  }
  classMetadata.setPolymorphicEntities(polyEntities);
  Property[] properties=new Property[mergedProperties.size()];
  j=0;
  for (  String property : mergedProperties.keySet()) {
    properties[j]=new Property();
    properties[j].setName(property);
    FieldMetadata metadata=mergedProperties.get(property);
    properties[j].setType(metadata.getFieldType().toString());
    properties[j].setLength(Long.valueOf(metadata.getLength().toString()));
    properties[j].setRequired(Boolean.valueOf(metadata.getRequired().toString()));
    properties[j].setUnique(Boolean.valueOf(metadata.getUnique().toString()));
    properties[j].setScale(Integer.valueOf(metadata.getScale().toString()));
    properties[j].setPrecision(Integer.valueOf(metadata.getPrecision().toString()));
    properties[j].setMutable(Boolean.valueOf(metadata.getMutable().toString()));
    properties[j].setInheritedFromType(metadata.getInheritedFromType().toString());
    properties[j].setAvailableToTypes(metadata.getAvailableToTypes().toString());
    j++;
  }
  classMetadata.setProperties(properties);
  return classMetadata;
}

{
  String idProperty=null;
  for (  String property : mergedProperties.keySet()) {
    if (mergedProperties.get(property).getFieldType().equals(SupportedFieldType.ID)) {
      idProperty=property;
      break;
    }
  }
  Entity[] entities=new Entity[records.size()];
  int j=0;
  for (  Serializable recordEntity : records) {
    Serializable entity;
    if (pathToTargetObject != null) {
      entity=(Serializable)PropertyUtils.getProperty(recordEntity,pathToTargetObject);
    }
 else {
      entity=recordEntity;
    }
    Entity entityItem=new Entity();
    entityItem.setType(entity.getClass().getName());
    entities[j]=entityItem;
    List<Property> props=new ArrayList<Property>();
    int x=0;
    for (    String property : mergedProperties.keySet()) {
      String originalProperty=new String(property);
      if (PropertyUtils.getPropertyDescriptor(entity,property) == null) {
        if (property.startsWith("is")) {
          property=property.substring(2,3).toLowerCase() + property.substring(3,property.length());
        }
      }
      if (PropertyUtils.getPropertyDescriptor(entity,property) != null) {
        Property propertyItem=new Property();
        props.add(propertyItem);
        Object value=PropertyUtils.getProperty(entity,property);
        String strVal;
        if (value == null) {
          strVal=null;
        }
 else {
          if (mergedProperties.get(property).getCollection()) {
            propertyItem.setType(mergedProperties.get(property).getFieldType().toString());
            strVal=null;
          }
 else           if (Date.class.isAssignableFrom(value.getClass())) {
            strVal=dateFormat.format((Date)value);
          }
 else           if (Timestamp.class.isAssignableFrom(value.getClass())) {
            strVal=dateFormat.format(new Date(((Timestamp)value).getTime()));
          }
 else           if (Calendar.class.isAssignableFrom(value.getClass())) {
            strVal=dateFormat.format(((Calendar)value).getTime());
          }
 else           if (Double.class.isAssignableFrom(value.getClass())) {
            strVal=decimalFormat.format((Double)value);
          }
 else           if (BigDecimal.class.isAssignableFrom(value.getClass())) {
            strVal=decimalFormat.format(((BigDecimal)value).doubleValue());
          }
 else           if (entity.getClass().equals(value.getClass()) && idProperty != null) {
            strVal=PropertyUtils.getProperty(value,idProperty).toString();
          }
 else           if (mergedProperties.get(originalProperty).getProvidedForeignKeyClass() != null) {
            strVal=PropertyUtils.getProperty(value,mergedProperties.get(property).getComplexIdProperty()).toString();
          }
 else {
            strVal=value.toString();
          }
        }
        propertyItem.setName(originalProperty);
        propertyItem.setValue(strVal);
      }
 else {
        try {
          Method method=entity.getClass().getMethod(originalProperty,new Class[]{});
          Object value=method.invoke(entity,new Object[]{});
          Property propertyItem=new Property();
          props.add(propertyItem);
          String strVal;
          if (value == null) {
            strVal=null;
          }
 else {
            if (Date.class.isAssignableFrom(value.getClass())) {
              strVal=dateFormat.format((Date)value);
            }
 else             if (Timestamp.class.isAssignableFrom(value.getClass())) {
              strVal=dateFormat.format(new Date(((Timestamp)value).getTime()));
            }
 else             if (Calendar.class.isAssignableFrom(value.getClass())) {
              strVal=dateFormat.format(((Calendar)value).getTime());
            }
 else             if (Double.class.isAssignableFrom(value.getClass())) {
              strVal=decimalFormat.format((Double)value);
            }
 else             if (BigDecimal.class.isAssignableFrom(value.getClass())) {
              strVal=decimalFormat.format(((BigDecimal)value).doubleValue());
            }
 else {
              strVal=value.toString();
            }
          }
          propertyItem.setName(originalProperty);
          propertyItem.setValue(strVal);
        }
 catch (        NoSuchMethodException e) {
          LOG.warn("Unable to find a specified property in the entity: " + originalProperty + "()");
        }
      }
      x++;
    }
    Property[] properties=new Property[props.size()];
    properties=props.toArray(properties);
    entityItem.setProperties(properties);
    j++;
  }
  return entities;
}

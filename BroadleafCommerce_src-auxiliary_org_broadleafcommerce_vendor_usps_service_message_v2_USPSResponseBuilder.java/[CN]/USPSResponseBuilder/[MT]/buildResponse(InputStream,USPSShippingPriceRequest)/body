{
  USPSShippingPriceResponse shippingPriceResponse;
  try {
    SimpleDateFormat dateFormat=new SimpleDateFormat("dd-MMM-yyyy");
    SimpleDateFormat dateAndTimeFormat=new SimpleDateFormat("dd-MMM-yyyy h:mm a");
    shippingPriceResponse=new USPSShippingPriceResponse();
    RateV3ResponseDocument doc=RateV3ResponseDocument.Factory.parse(input);
    RateV3ResponseType responseType=doc.getRateV3Response();
    ErrorV3Type[] mainErrors=responseType.getErrorArray();
    if (mainErrors != null && mainErrors.length > 0) {
      shippingPriceResponse.setErrorDetected(true);
      shippingPriceResponse.setErrorCode(mainErrors[0].getSource());
      shippingPriceResponse.setErrorText(mainErrors[0].getDescription());
      return shippingPriceResponse;
    }
    ResponsePackageV3Type[] packages=responseType.getPackageArray();
    for (    ResponsePackageV3Type packageItem : packages) {
      String id=packageItem.getID();
      USPSContainerItem key=new USPSContainerItem();
      key.setPackageId(id);
      USPSContainerItem originalItem=(USPSContainerItem)request.getContainerItems().get(request.getContainerItems().indexOf(key));
      shippingPriceResponse.getResponses().push(originalItem);
      if (packageItem.getError() != null) {
        shippingPriceResponse.setErrorDetected(true);
        originalItem.setErrorDetected(true);
        originalItem.setErrorCode(packageItem.getError().getSource());
        originalItem.setErrorText(packageItem.getError().getDescription());
      }
      PostageV3Type[] postages=packageItem.getPostageArray();
      for (      PostageV3Type postage : postages) {
        int classId=postage.getCLASSID();
        USPSShippingMethodType shippingMethod=USPSShippingMethodType.getInstance(String.valueOf(classId));
        USPSPostage uspsPostage=new USPSPostage();
        if (!postage.xgetCommercialRate().isNil()) {
          uspsPostage.setCommercialRate(new Money(postage.getCommercialRate()));
        }
        uspsPostage.setRate(new Money(postage.getRate()));
        if (!postage.xgetCommitmentDate().isNil()) {
          uspsPostage.setCommitmentDate(dateFormat.parse(postage.getCommitmentDate()));
        }
        buildLocations(uspsPostage.getLocations(),postage.getLocationArray());
        for (        CommitmentV3Type commitment : postage.getCommitmentArray()) {
          USPSCommitment uspsCommitment=new USPSCommitment();
          uspsCommitment.setCommitmentDateAndTime(dateAndTimeFormat.parse(commitment.getCommitmentDate() + " " + commitment.getCommitmentTime()));
          buildLocations(uspsCommitment.getLocations(),commitment.getLocationArray());
        }
        originalItem.getPostage().put(shippingMethod,uspsPostage);
      }
    }
  }
 catch (  XmlException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return shippingPriceResponse;
}

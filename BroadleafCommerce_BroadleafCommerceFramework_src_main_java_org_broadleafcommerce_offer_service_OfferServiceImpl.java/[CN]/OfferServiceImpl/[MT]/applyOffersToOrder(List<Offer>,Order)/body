{
  clearOffersandAdjustments(order);
  List<Offer> filteredOffers=filterOffers(offers,order.getCustomer());
  if ((filteredOffers == null) || (filteredOffers.isEmpty())) {
    order.assignOrderItemsFinalPrice();
    order.setSubTotal(order.calculateOrderItemsFinalPrice());
  }
 else {
    List<CandidateOrderOffer> qualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
    List<OrderItemOffer> orderItemOffers=new ArrayList<OrderItemOffer>();
    order.setSubTotal(order.calculateOrderItemsCurrentPrice());
    List<DiscreteOrderItem> discreteOrderItems=order.getDiscountableDiscreteOrderItems();
    for (    Offer offer : filteredOffers) {
      if (offer.getType().equals(OfferType.ORDER)) {
        if (couldOfferApplyToOrder(offer,order)) {
          CandidateOrderOffer candidateOffer=offerDao.createCandidateOrderOffer();
          candidateOffer.setOrder(order);
          candidateOffer.setOffer(offer);
          order.addCandidateOrderOffer(candidateOffer);
          qualifiedOrderOffers.add(candidateOffer);
        }
      }
 else       if (offer.getType().equals(OfferType.ORDER_ITEM)) {
        OrderItemOffer orderItemOffer=new OrderItemOfferImpl();
        orderItemOffer.setOffer(offer);
        for (        DiscreteOrderItem discreteOrderItem : discreteOrderItems) {
          if (couldOfferApplyToOrder(offer,order,discreteOrderItem)) {
            CandidateItemOffer candidateOffer=offerDao.createCandidateItemOffer();
            candidateOffer.setOrderItem(discreteOrderItem);
            candidateOffer.setOffer(offer);
            discreteOrderItem.addCandidateItemOffer(candidateOffer);
            orderItemOffer.addCandidateItemOffer(candidateOffer);
          }
        }
        if (orderItemOffer.getCandidateItemOffers().size() > 0) {
          orderItemOffers.add(orderItemOffer);
        }
      }
 else       if (offer.getType().equals(OfferType.FULFILLMENT_GROUP)) {
        for (        FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
          if (couldOfferApplyToOrder(offer,order,fulfillmentGroup)) {
            CandidateFulfillmentGroupOffer candidateOffer=offerDao.createCandidateFulfillmentGroupOffer();
            candidateOffer.setFulfillmentGroup(fulfillmentGroup);
            candidateOffer.setOffer(offer);
            fulfillmentGroup.addCandidateFulfillmentGroupOffer(candidateOffer);
          }
        }
      }
    }
    if ((orderItemOffers.isEmpty()) && (qualifiedOrderOffers.isEmpty())) {
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
    }
 else {
      boolean notCombinableItemOfferApplied=false;
      List<CandidateItemOffer> qualifiedItemOffers=new ArrayList<CandidateItemOffer>();
      if (!orderItemOffers.isEmpty()) {
        Collections.sort(orderItemOffers,new BeanComparator("totalDiscount",Collections.reverseOrder()));
        Collections.sort(orderItemOffers,new BeanComparator("priority"));
        for (        OrderItemOffer orderItemOffer : orderItemOffers) {
          qualifiedItemOffers.addAll(orderItemOffer.getCandidateItemOffers());
        }
        notCombinableItemOfferApplied=applyAllItemOffers(qualifiedItemOffers,discreteOrderItems);
      }
      boolean notCombinableOrderOfferApplied=false;
      if (!qualifiedOrderOffers.isEmpty()) {
        Collections.sort(qualifiedOrderOffers,new BeanComparator("discountAmount",Collections.reverseOrder()));
        Collections.sort(qualifiedOrderOffers,new BeanComparator("priority"));
        qualifiedOrderOffers=removeTrailingNotCombinableOrderOffers(qualifiedOrderOffers);
        notCombinableOrderOfferApplied=applyAllOrderOffers(qualifiedOrderOffers,order);
      }
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
      if ((!qualifiedOrderOffers.isEmpty()) && (!qualifiedItemOffers.isEmpty())) {
        List<CandidateOrderOffer> finalQualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
        order.removeAllOrderAdjustments();
        for (        CandidateOrderOffer condidateOrderOffer : qualifiedOrderOffers) {
          if (couldOfferApplyToOrder(condidateOrderOffer.getOffer(),order)) {
            finalQualifiedOrderOffers.add(condidateOrderOffer);
          }
        }
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("discountedPrice"));
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("priority"));
        if (!finalQualifiedOrderOffers.isEmpty()) {
          applyAllOrderOffers(finalQualifiedOrderOffers,order);
        }
      }
    }
  }
}

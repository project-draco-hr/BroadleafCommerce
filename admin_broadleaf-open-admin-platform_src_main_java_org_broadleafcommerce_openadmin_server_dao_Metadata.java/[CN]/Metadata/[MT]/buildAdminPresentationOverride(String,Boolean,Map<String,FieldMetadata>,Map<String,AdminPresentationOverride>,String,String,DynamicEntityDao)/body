{
  AdminPresentationOverride override=presentationOverrides.get(propertyName);
  if (override != null) {
    AdminPresentation annot=override.value();
    if (annot != null) {
      String testKey=prefix + key;
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && annot.excluded()) {
        FieldMetadata metadata=mergedProperties.get(key);
        if (LOG.isDebugEnabled()) {
          LOG.debug("buildAdminPresentationOverride:Excluding " + key + "because an override annotation declared "+ testKey+ " to be excluded");
        }
        metadata.setExcluded(true);
        return;
      }
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !annot.excluded()) {
        FieldMetadata metadata=mergedProperties.get(key);
        if (!isParentExcluded) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("buildAdminPresentationOverride:Showing " + key + "because an override annotation declared "+ testKey+ " to not be excluded");
          }
          metadata.setExcluded(false);
        }
      }
      if (!(mergedProperties.get(key) instanceof BasicFieldMetadata)) {
        return;
      }
      BasicFieldMetadata serverMetadata=(BasicFieldMetadata)mergedProperties.get(key);
      if (serverMetadata.getTargetClass() != null) {
        try {
          Class<?> targetClass=Class.forName(serverMetadata.getTargetClass());
          String fieldName=serverMetadata.getFieldName();
          Field field=dynamicEntityDao.getFieldManager().getField(targetClass,fieldName);
          FieldMetadataOverride localMetadata=constructBasicMetadataOverride(annot,null,null);
          Map<String,FieldMetadata> temp=new HashMap<String,FieldMetadata>(1);
          buildBasicMetadata(targetClass,temp,field,localMetadata,dynamicEntityDao);
          BasicFieldMetadata result=(BasicFieldMetadata)temp.get(field.getName());
          result.setInheritedFromType(serverMetadata.getInheritedFromType());
          result.setAvailableToTypes(serverMetadata.getAvailableToTypes());
          result.setFieldType(serverMetadata.getFieldType());
          result.setSecondaryType(serverMetadata.getSecondaryType());
          result.setLength(serverMetadata.getLength());
          result.setScale(serverMetadata.getScale());
          result.setPrecision(serverMetadata.getPrecision());
          result.setRequired(serverMetadata.getRequired());
          result.setUnique(serverMetadata.getUnique());
          result.setForeignKeyCollection(serverMetadata.getForeignKeyCollection());
          result.setMutable(serverMetadata.getMutable());
          result.setMergedPropertyType(serverMetadata.getMergedPropertyType());
          mergedProperties.put(key,result);
          if (isParentExcluded) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("buildAdminPresentationOverride:Excluding " + key + "because the parent was excluded");
            }
            serverMetadata.setExcluded(true);
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
}

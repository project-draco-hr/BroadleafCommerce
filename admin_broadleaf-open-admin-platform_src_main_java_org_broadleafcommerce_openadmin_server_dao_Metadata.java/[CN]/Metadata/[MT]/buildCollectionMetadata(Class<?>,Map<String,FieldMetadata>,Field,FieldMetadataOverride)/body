{
  BasicCollectionMetadata serverMetadata=(BasicCollectionMetadata)attributes.get(field.getName());
  BasicCollectionMetadata metadata=new BasicCollectionMetadata();
  metadata.setCollectionFieldName(field.getName());
  if (serverMetadata != null && collectionMetadata.isMutable() == null) {
    metadata.setMutable(serverMetadata.isMutable());
  }
 else {
    metadata.setMutable(collectionMetadata.isMutable());
  }
  if (serverMetadata != null && collectionMetadata.getAddMethodType() == null) {
    metadata.setAddMethodType(serverMetadata.getAddMethodType());
  }
 else {
    metadata.setAddMethodType(collectionMetadata.getAddMethodType());
  }
  org.broadleafcommerce.openadmin.client.dto.OperationTypes dtoOperationTypes=new org.broadleafcommerce.openadmin.client.dto.OperationTypes();
  if (serverMetadata != null && collectionMetadata.getAddType() == null) {
    dtoOperationTypes.setAddType(serverMetadata.getPersistencePerspective().getOperationTypes().getAddType());
  }
 else {
    dtoOperationTypes.setAddType(collectionMetadata.getAddType());
  }
  if (serverMetadata != null && collectionMetadata.getRemoveType() == null) {
    dtoOperationTypes.setRemoveType(serverMetadata.getPersistencePerspective().getOperationTypes().getRemoveType());
  }
 else {
    dtoOperationTypes.setRemoveType(collectionMetadata.getRemoveType());
  }
  if (serverMetadata != null && collectionMetadata.getFetchType() == null) {
    dtoOperationTypes.setFetchType(serverMetadata.getPersistencePerspective().getOperationTypes().getFetchType());
  }
 else {
    dtoOperationTypes.setFetchType(collectionMetadata.getFetchType());
  }
  if (serverMetadata != null && collectionMetadata.getInspectType() == null) {
    dtoOperationTypes.setInspectType(serverMetadata.getPersistencePerspective().getOperationTypes().getInspectType());
  }
 else {
    dtoOperationTypes.setInspectType(collectionMetadata.getInspectType());
  }
  if (serverMetadata != null && collectionMetadata.getUpdateType() == null) {
    dtoOperationTypes.setUpdateType(serverMetadata.getPersistencePerspective().getOperationTypes().getUpdateType());
  }
 else {
    dtoOperationTypes.setInspectType(collectionMetadata.getUpdateType());
  }
  if (collectionMetadata.getAddMethodType() == AddMethodType.LOOKUP) {
    dtoOperationTypes.setRemoveType(OperationType.NONDESTRUCTIVEREMOVE);
  }
  PersistencePerspective persistencePerspective=new PersistencePerspective(dtoOperationTypes,new String[]{},new ForeignKey[]{});
  if (serverMetadata != null && collectionMetadata.getConfigurationKey() == null) {
    serverMetadata.getPersistencePerspective().setConfigurationKey(serverMetadata.getPersistencePerspective().getConfigurationKey());
  }
 else {
    if (!StringUtils.isEmpty(collectionMetadata.getConfigurationKey())) {
      persistencePerspective.setConfigurationKey(collectionMetadata.getConfigurationKey());
    }
  }
  metadata.setPersistencePerspective(persistencePerspective);
  String foreignKeyName=null;
  OneToMany oneToMany=field.getAnnotation(OneToMany.class);
  ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
  if (serverMetadata != null && collectionMetadata.getManyToField() == null) {
    foreignKeyName=((ForeignKey)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY)).getManyToField();
  }
 else {
    checkForeignKeyName: {
      if (!StringUtils.isEmpty(collectionMetadata.getManyToField())) {
        foreignKeyName=collectionMetadata.getManyToField();
        break checkForeignKeyName;
      }
      if (oneToMany != null && !StringUtils.isEmpty(oneToMany.mappedBy())) {
        foreignKeyName=oneToMany.mappedBy();
        break checkForeignKeyName;
      }
      if (manyToMany != null && !StringUtils.isEmpty(manyToMany.mappedBy())) {
        foreignKeyName=manyToMany.mappedBy();
        break checkForeignKeyName;
      }
      if (StringUtils.isEmpty(foreignKeyName)) {
        throw new IllegalArgumentException("Unable to infer a ManyToOne field name for the @AdminPresentationCollection annotated field(" + field.getName() + "). If not using the mappedBy property of @OneToMany or @ManyToMany, please make sure to explicitly define the manyToField property");
      }
    }
  }
  ForeignKey foreignKey=new ForeignKey(foreignKeyName,targetClass.getName(),null,ForeignKeyRestrictionType.ID_EQ);
  persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.FOREIGNKEY,foreignKey);
  String ceiling=null;
  checkCeiling: {
    if (oneToMany != null && oneToMany.targetEntity() != void.class) {
      ceiling=oneToMany.targetEntity().getName();
      break checkCeiling;
    }
    if (manyToMany != null && manyToMany.targetEntity() != void.class) {
      ceiling=manyToMany.targetEntity().getName();
      break checkCeiling;
    }
  }
  if (!StringUtils.isEmpty(ceiling)) {
    metadata.setCollectionCeilingEntity(ceiling);
  }
  if (serverMetadata != null && collectionMetadata.getExcluded() == null) {
    metadata.setExcluded(serverMetadata.getExcluded());
  }
 else {
    metadata.setExcluded(collectionMetadata.getExcluded());
  }
  if (serverMetadata != null && collectionMetadata.getFriendlyName() == null) {
    metadata.setFriendlyName(serverMetadata.getFriendlyName());
  }
 else {
    metadata.setFriendlyName(collectionMetadata.getFriendlyName());
  }
  if (serverMetadata != null && collectionMetadata.getSecurityLevel() == null) {
    metadata.setSecurityLevel(serverMetadata.getSecurityLevel());
  }
 else {
    metadata.setSecurityLevel(collectionMetadata.getSecurityLevel());
  }
  if (serverMetadata != null && collectionMetadata.getOrder() == null) {
    metadata.setOrder(serverMetadata.getOrder());
  }
 else {
    metadata.setOrder(collectionMetadata.getOrder());
  }
  if (serverMetadata != null && collectionMetadata.getTargetElementId() == null) {
    metadata.setTargetElementId(serverMetadata.getTargetElementId());
  }
 else {
    if (!StringUtils.isEmpty(collectionMetadata.getTargetElementId())) {
      metadata.setTargetElementId(collectionMetadata.getTargetElementId());
    }
  }
  if (serverMetadata != null && collectionMetadata.getDataSourceName() == null) {
    metadata.setDataSourceName(serverMetadata.getDataSourceName());
  }
 else {
    if (!StringUtils.isEmpty(collectionMetadata.getDataSourceName())) {
      metadata.setDataSourceName(collectionMetadata.getDataSourceName());
    }
  }
  if (serverMetadata != null && collectionMetadata.getCustomCriteria() == null) {
    metadata.setCustomCriteria(serverMetadata.getCustomCriteria());
  }
 else {
    metadata.setCustomCriteria(collectionMetadata.getCustomCriteria());
  }
  attributes.put(field.getName(),metadata);
}

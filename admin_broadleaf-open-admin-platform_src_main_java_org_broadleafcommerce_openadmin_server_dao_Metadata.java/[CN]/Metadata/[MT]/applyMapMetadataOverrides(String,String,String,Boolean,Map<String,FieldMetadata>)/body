{
  Map<String,FieldMetadataOverride> overrides=getTargetedOverride(configurationKey,ceilingEntityFullyQualifiedClassname,OverrideType.MAP);
  if (overrides != null) {
    for (    String propertyName : overrides.keySet()) {
      final FieldMetadataOverride localMetadata=overrides.get(propertyName);
      Boolean excluded=localMetadata.getExcluded();
      if (excluded == null) {
        excluded=false;
      }
      for (      String key : mergedProperties.keySet()) {
        String testKey=prefix + key;
        if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && excluded) {
          FieldMetadata metadata=mergedProperties.get(key);
          metadata.setExcluded(true);
          continue;
        }
        if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !excluded) {
          FieldMetadata metadata=mergedProperties.get(key);
          if (!isParentExcluded) {
            metadata.setExcluded(false);
          }
        }
        if (key.equals(propertyName)) {
          try {
            MapMetadata serverMetadata=null;
            if (mergedProperties.containsKey(key) && mergedProperties.get(key) instanceof MapMetadata) {
              serverMetadata=(MapMetadata)mergedProperties.get(key);
            }
            Class<?> targetClass=Class.forName(((ForeignKey)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY)).getForeignKeyClass());
            String fieldName=((MapStructure)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE)).getMapProperty();
            Field field=targetClass.getField(fieldName);
            Map<String,FieldMetadata> temp=new HashMap<String,FieldMetadata>(1);
            temp.put(field.getName(),serverMetadata);
            buildMapMetadata(targetClass,temp,field,localMetadata,null);
            serverMetadata=(MapMetadata)temp.get(field.getName());
            mergedProperties.put(key,serverMetadata);
            if (isParentExcluded) {
              serverMetadata.setExcluded(true);
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
}

{
  AdornedTargetCollectionMetadata serverMetadata=(AdornedTargetCollectionMetadata)attributes.get(field.getName());
  AdornedTargetCollectionMetadata metadata;
  if (serverMetadata != null) {
    metadata=serverMetadata;
  }
 else {
    metadata=new AdornedTargetCollectionMetadata();
  }
  metadata.setTargetClass(targetClass.getName());
  if (adornedTargetCollectionMetadata.isMutable() != null) {
    metadata.setMutable(adornedTargetCollectionMetadata.isMutable());
  }
  org.broadleafcommerce.openadmin.client.dto.OperationTypes dtoOperationTypes=new org.broadleafcommerce.openadmin.client.dto.OperationTypes();
  if (adornedTargetCollectionMetadata.getAddType() != null) {
    dtoOperationTypes.setAddType(adornedTargetCollectionMetadata.getAddType());
  }
  if (adornedTargetCollectionMetadata.getRemoveType() != null) {
    dtoOperationTypes.setRemoveType(adornedTargetCollectionMetadata.getRemoveType());
  }
  if (adornedTargetCollectionMetadata.getFetchType() != null) {
    dtoOperationTypes.setFetchType(adornedTargetCollectionMetadata.getFetchType());
  }
  if (adornedTargetCollectionMetadata.getInspectType() != null) {
    dtoOperationTypes.setInspectType(adornedTargetCollectionMetadata.getInspectType());
  }
  if (adornedTargetCollectionMetadata.getUpdateType() != null) {
    dtoOperationTypes.setUpdateType(adornedTargetCollectionMetadata.getUpdateType());
  }
  PersistencePerspective persistencePerspective;
  if (serverMetadata != null) {
    persistencePerspective=metadata.getPersistencePerspective();
    persistencePerspective.setOperationTypes(dtoOperationTypes);
  }
 else {
    persistencePerspective=new PersistencePerspective(dtoOperationTypes,new String[]{},new ForeignKey[]{});
    metadata.setPersistencePerspective(persistencePerspective);
  }
  if (adornedTargetCollectionMetadata.getConfigurationKey() != null) {
    persistencePerspective.setConfigurationKey(adornedTargetCollectionMetadata.getConfigurationKey());
  }
  OneToMany oneToMany=field.getAnnotation(OneToMany.class);
  ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
  String parentObjectProperty=null;
  if (serverMetadata != null) {
    parentObjectProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getLinkedObjectPath();
  }
  if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getParentObjectProperty())) {
    parentObjectProperty=adornedTargetCollectionMetadata.getParentObjectProperty();
  }
  if (parentObjectProperty == null && oneToMany != null && !StringUtils.isEmpty(oneToMany.mappedBy())) {
    parentObjectProperty=oneToMany.mappedBy();
  }
  if (parentObjectProperty == null && manyToMany != null && !StringUtils.isEmpty(manyToMany.mappedBy())) {
    parentObjectProperty=manyToMany.mappedBy();
  }
  if (StringUtils.isEmpty(parentObjectProperty)) {
    throw new IllegalArgumentException("Unable to infer a parentObjectProperty for the @AdminPresentationAdornedTargetCollection annotated field(" + field.getName() + "). If not using the mappedBy property of @OneToMany or @ManyToMany, please make sure to explicitly define the parentObjectProperty property");
  }
  String sortProperty=null;
  if (serverMetadata != null) {
    sortProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getSortField();
  }
  if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getSortProperty())) {
    sortProperty=adornedTargetCollectionMetadata.getSortProperty();
  }
  String ceiling=null;
  checkCeiling: {
    if (oneToMany != null && oneToMany.targetEntity() != void.class) {
      ceiling=oneToMany.targetEntity().getName();
      break checkCeiling;
    }
    if (manyToMany != null && manyToMany.targetEntity() != void.class) {
      ceiling=manyToMany.targetEntity().getName();
      break checkCeiling;
    }
  }
  if (!StringUtils.isEmpty(ceiling)) {
    metadata.setCollectionCeilingEntity(ceiling);
  }
  metadata.setParentObjectClass(targetClass.getName());
  if (adornedTargetCollectionMetadata.getMaintainedAdornedTargetFields() != null) {
    metadata.setMaintainedAdornedTargetFields(adornedTargetCollectionMetadata.getMaintainedAdornedTargetFields());
  }
  if (adornedTargetCollectionMetadata.getGridVisibleFields() != null) {
    metadata.setGridVisibleFields(adornedTargetCollectionMetadata.getGridVisibleFields());
  }
  String parentObjectIdProperty=null;
  if (serverMetadata != null) {
    parentObjectIdProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getLinkedIdProperty();
  }
  if (adornedTargetCollectionMetadata.getParentObjectIdProperty() != null) {
    parentObjectIdProperty=adornedTargetCollectionMetadata.getParentObjectIdProperty();
  }
  String targetObjectProperty=null;
  if (serverMetadata != null) {
    targetObjectProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getTargetObjectPath();
  }
  if (adornedTargetCollectionMetadata.getTargetObjectProperty() != null) {
    targetObjectProperty=adornedTargetCollectionMetadata.getTargetObjectProperty();
  }
  String targetObjectIdProperty=null;
  if (serverMetadata != null) {
    targetObjectIdProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getTargetIdProperty();
  }
  if (adornedTargetCollectionMetadata.getTargetObjectIdProperty() != null) {
    targetObjectIdProperty=adornedTargetCollectionMetadata.getTargetObjectIdProperty();
  }
  Boolean isAscending=true;
  if (serverMetadata != null) {
    isAscending=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getSortAscending();
  }
  if (adornedTargetCollectionMetadata.isSortAscending() != null) {
    isAscending=adornedTargetCollectionMetadata.isSortAscending();
  }
  if (serverMetadata != null) {
    AdornedTargetList adornedTargetList=(AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
    adornedTargetList.setCollectionFieldName(field.getName());
    adornedTargetList.setLinkedObjectPath(parentObjectProperty);
    adornedTargetList.setLinkedIdProperty(parentObjectIdProperty);
    adornedTargetList.setTargetObjectPath(targetObjectProperty);
    adornedTargetList.setTargetIdProperty(targetObjectIdProperty);
    adornedTargetList.setAdornedTargetEntityClassname(ceiling);
    adornedTargetList.setSortField(sortProperty);
    adornedTargetList.setSortAscending(isAscending);
  }
 else {
    AdornedTargetList adornedTargetList=new AdornedTargetList(field.getName(),parentObjectProperty,parentObjectIdProperty,targetObjectProperty,targetObjectIdProperty,ceiling,sortProperty,isAscending);
    persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.ADORNEDTARGETLIST,adornedTargetList);
  }
  if (adornedTargetCollectionMetadata.getExcluded() != null) {
    metadata.setExcluded(adornedTargetCollectionMetadata.getExcluded());
  }
  if (adornedTargetCollectionMetadata.getFriendlyName() != null) {
    metadata.setFriendlyName(adornedTargetCollectionMetadata.getFriendlyName());
  }
  if (adornedTargetCollectionMetadata.getSecurityLevel() != null) {
    metadata.setSecurityLevel(adornedTargetCollectionMetadata.getSecurityLevel());
  }
  if (adornedTargetCollectionMetadata.getOrder() != null) {
    metadata.setOrder(adornedTargetCollectionMetadata.getOrder());
  }
  if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getTargetElementId())) {
    metadata.setTargetElementId(adornedTargetCollectionMetadata.getTargetElementId());
  }
  if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getDataSourceName())) {
    metadata.setDataSourceName(adornedTargetCollectionMetadata.getDataSourceName());
  }
  if (adornedTargetCollectionMetadata.getCustomCriteria() != null) {
    metadata.setCustomCriteria(adornedTargetCollectionMetadata.getCustomCriteria());
  }
  if (adornedTargetCollectionMetadata.isIgnoreAdornedProperties() != null) {
    metadata.setIgnoreAdornedProperties(adornedTargetCollectionMetadata.isIgnoreAdornedProperties());
  }
  attributes.put(field.getName(),metadata);
}

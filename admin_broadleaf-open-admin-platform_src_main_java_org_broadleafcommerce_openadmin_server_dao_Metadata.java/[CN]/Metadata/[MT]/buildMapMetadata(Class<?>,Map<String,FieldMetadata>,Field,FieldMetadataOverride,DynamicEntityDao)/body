{
  MapMetadata serverMetadata=(MapMetadata)attributes.get(field.getName());
  MapMetadata metadata=new MapMetadata();
  if (serverMetadata != null && map.isMutable() == null) {
    metadata.setMutable(serverMetadata.isMutable());
  }
 else {
    metadata.setMutable(map.isMutable());
  }
  org.broadleafcommerce.openadmin.client.dto.OperationTypes dtoOperationTypes=new org.broadleafcommerce.openadmin.client.dto.OperationTypes();
  if (serverMetadata != null && map.getAddType() == null) {
    dtoOperationTypes.setAddType(serverMetadata.getPersistencePerspective().getOperationTypes().getAddType());
  }
 else {
    dtoOperationTypes.setAddType(map.getAddType());
  }
  if (serverMetadata != null && map.getRemoveType() == null) {
    dtoOperationTypes.setRemoveType(serverMetadata.getPersistencePerspective().getOperationTypes().getRemoveType());
  }
 else {
    dtoOperationTypes.setRemoveType(map.getRemoveType());
  }
  if (serverMetadata != null && map.getFetchType() == null) {
    dtoOperationTypes.setFetchType(serverMetadata.getPersistencePerspective().getOperationTypes().getFetchType());
  }
 else {
    dtoOperationTypes.setFetchType(map.getFetchType());
  }
  if (serverMetadata != null && map.getInspectType() == null) {
    dtoOperationTypes.setInspectType(serverMetadata.getPersistencePerspective().getOperationTypes().getInspectType());
  }
 else {
    dtoOperationTypes.setInspectType(map.getInspectType());
  }
  if (serverMetadata != null && map.getUpdateType() == null) {
    dtoOperationTypes.setUpdateType(serverMetadata.getPersistencePerspective().getOperationTypes().getUpdateType());
  }
 else {
    dtoOperationTypes.setInspectType(map.getUpdateType());
  }
  PersistencePerspective persistencePerspective=new PersistencePerspective(dtoOperationTypes,new String[]{},new ForeignKey[]{});
  if (serverMetadata != null && map.getConfigurationKey() == null) {
    serverMetadata.getPersistencePerspective().setConfigurationKey(serverMetadata.getPersistencePerspective().getConfigurationKey());
  }
 else {
    if (!StringUtils.isEmpty(map.getConfigurationKey())) {
      persistencePerspective.setConfigurationKey(map.getConfigurationKey());
    }
  }
  metadata.setPersistencePerspective(persistencePerspective);
  String parentObjectClass=targetClass.getName();
  Map idMetadata=dynamicEntityDao.getIdMetadata(targetClass);
  String parentObjectIdField=(String)idMetadata.get("name");
  String keyClassName;
  if (serverMetadata != null && map.getKeyClass() == null) {
    keyClassName=((MapStructure)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE)).getKeyClassName();
  }
 else {
    checkProperty: {
      if (!void.class.getName().equals(map.getKeyClass())) {
        keyClassName=map.getKeyClass();
        break checkProperty;
      }
      java.lang.reflect.Type type=field.getGenericType();
      if (type instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)type;
        Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[0];
        if (!ArrayUtils.isEmpty(dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(clazz))) {
          throw new IllegalArgumentException("Key class for AdminPresentationMap was determined to be a JPA managed type. Only primitive types for the key type are currently supported.");
        }
        keyClassName=clazz.getName();
        break checkProperty;
      }
      keyClassName=String.class.getName();
    }
  }
  String keyPropertyName="key";
  String keyPropertyFriendlyName;
  if (serverMetadata != null && map.getKeyPropertyFriendlyName() == null) {
    keyPropertyFriendlyName=((MapStructure)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE)).getKeyPropertyFriendlyName();
  }
 else {
    keyPropertyFriendlyName=map.getKeyPropertyFriendlyName();
  }
  boolean deleteEntityUponRemove;
  if (serverMetadata != null && map.isDeleteEntityUponRemove() == null) {
    deleteEntityUponRemove=((MapStructure)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE)).getDeleteValueEntity();
  }
 else {
    deleteEntityUponRemove=map.isDeleteEntityUponRemove();
  }
  String valuePropertyName="value";
  String valuePropertyFriendlyName;
  if (serverMetadata != null && map.getValuePropertyFriendlyName() == null) {
    MapStructure structure=(MapStructure)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
    if (structure instanceof SimpleValueMapStructure) {
      valuePropertyFriendlyName=((SimpleValueMapStructure)structure).getValuePropertyFriendlyName();
    }
 else {
      valuePropertyFriendlyName="";
    }
  }
 else {
    valuePropertyFriendlyName=map.getValuePropertyFriendlyName();
  }
  if (serverMetadata != null && map.getMediaField() == null) {
    metadata.setMediaField(serverMetadata.getMediaField());
  }
 else {
    metadata.setMediaField(map.getMediaField());
  }
  if (serverMetadata != null && map.getValueClass() == null) {
    metadata.setValueClassName(serverMetadata.getValueClassName());
  }
 else {
    checkProperty: {
      if (!void.class.getName().equals(map.getValueClass())) {
        metadata.setValueClassName(map.getValueClass());
        break checkProperty;
      }
      java.lang.reflect.Type type=field.getGenericType();
      if (type instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)type;
        Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[1];
        Class<?>[] entities=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(clazz);
        if (!ArrayUtils.isEmpty(entities)) {
          metadata.setValueClassName(entities[entities.length - 1].getName());
          break checkProperty;
        }
      }
      ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
      if (manyToMany != null && !StringUtils.isEmpty(manyToMany.targetEntity().getName())) {
        metadata.setValueClassName(manyToMany.mappedBy());
        break checkProperty;
      }
      metadata.setValueClassName(String.class.getName());
    }
  }
  if (serverMetadata != null && map.getSimpleValue() == null) {
    metadata.setSimpleValue(serverMetadata.isSimpleValue());
  }
 else {
    checkProperty: {
      java.lang.reflect.Type type=field.getGenericType();
      if (type instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)type;
        Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[1];
        Class<?>[] entities=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(clazz);
        if (!ArrayUtils.isEmpty(entities)) {
          metadata.setSimpleValue(false);
          break checkProperty;
        }
      }
      ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
      if (manyToMany != null && !StringUtils.isEmpty(manyToMany.targetEntity().getName())) {
        metadata.setSimpleValue(false);
        break checkProperty;
      }
      if (map.getSimpleValue() == UnspecifiedBooleanType.UNSPECIFIED) {
        throw new IllegalArgumentException("Unable to infer if the value for the map is of a complex or simple type based on any parameterized type or ManyToMany annotation. Please explicitly set the isSimpleValue property.");
      }
      metadata.setSimpleValue(map.getSimpleValue() == UnspecifiedBooleanType.TRUE);
    }
  }
  if (serverMetadata != null && map.getKeys() == null) {
    metadata.setKeys(serverMetadata.getKeys());
  }
 else {
    if (!ArrayUtils.isEmpty(map.getKeys())) {
      metadata.setKeys(map.getKeys());
    }
  }
  if (serverMetadata != null && map.getMapKeyOptionEntityClass() == null) {
    metadata.setMapKeyOptionEntityClass(serverMetadata.getMapKeyOptionEntityClass());
  }
 else {
    if (!void.class.getName().equals(map.getMapKeyOptionEntityClass())) {
      metadata.setMapKeyOptionEntityClass(map.getMapKeyOptionEntityClass());
    }
 else {
      metadata.setMapKeyOptionEntityClass("");
    }
  }
  if (serverMetadata != null && map.getMapKeyOptionEntityDisplayField() == null) {
    metadata.setMapKeyOptionEntityDisplayField(serverMetadata.getMapKeyOptionEntityDisplayField());
  }
 else {
    metadata.setMapKeyOptionEntityDisplayField(map.getMapKeyOptionEntityDisplayField());
  }
  if (serverMetadata != null && map.getMapKeyOptionEntityValueField() == null) {
    metadata.setMapKeyOptionEntityValueField(serverMetadata.getMapKeyOptionEntityValueField());
  }
 else {
    metadata.setMapKeyOptionEntityValueField(map.getMapKeyOptionEntityValueField());
  }
  if (ArrayUtils.isEmpty(metadata.getKeys()) && (StringUtils.isEmpty(metadata.getMapKeyOptionEntityClass()) || StringUtils.isEmpty(metadata.getMapKeyOptionEntityValueField()) || StringUtils.isEmpty(metadata.getMapKeyOptionEntityDisplayField()))) {
    throw new IllegalArgumentException("Could not ascertain method for generating key options for the annotated map (" + field.getName() + "). Must specify either an array of AdminPresentationMapKey values for the keys property, or utilize the mapOptionKeyClass, mapOptionKeyDisplayField and mapOptionKeyValueField properties");
  }
  ForeignKey foreignKey=new ForeignKey(parentObjectIdField,parentObjectClass);
  MapStructure mapStructure;
  persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.FOREIGNKEY,foreignKey);
  if (metadata.isSimpleValue()) {
    mapStructure=new SimpleValueMapStructure(keyClassName,keyPropertyName,keyPropertyFriendlyName,metadata.getValueClassName(),valuePropertyName,valuePropertyFriendlyName,field.getName());
  }
 else {
    mapStructure=new MapStructure(keyClassName,keyPropertyName,keyPropertyFriendlyName,metadata.getValueClassName(),field.getName(),deleteEntityUponRemove);
  }
  persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.MAPSTRUCTURE,mapStructure);
  if (serverMetadata != null && map.getExcluded() == null) {
    metadata.setExcluded(serverMetadata.getExcluded());
  }
 else {
    metadata.setExcluded(map.getExcluded());
  }
  if (serverMetadata != null && map.getFriendlyName() == null) {
    metadata.setFriendlyName(serverMetadata.getFriendlyName());
  }
 else {
    metadata.setFriendlyName(map.getFriendlyName());
  }
  if (serverMetadata != null && map.getSecurityLevel() == null) {
    metadata.setSecurityLevel(serverMetadata.getSecurityLevel());
  }
 else {
    metadata.setSecurityLevel(map.getSecurityLevel());
  }
  if (serverMetadata != null && map.getOrder() == null) {
    metadata.setOrder(serverMetadata.getOrder());
  }
 else {
    metadata.setOrder(map.getOrder());
  }
  if (serverMetadata != null && map.getTargetElementId() == null) {
    metadata.setTargetElementId(serverMetadata.getTargetElementId());
  }
 else {
    if (!StringUtils.isEmpty(map.getTargetElementId())) {
      metadata.setTargetElementId(map.getTargetElementId());
    }
  }
  if (serverMetadata != null && map.getDataSourceName() == null) {
    metadata.setDataSourceName(serverMetadata.getDataSourceName());
  }
 else {
    if (!StringUtils.isEmpty(map.getDataSourceName())) {
      metadata.setDataSourceName(map.getDataSourceName());
    }
  }
  if (serverMetadata != null && map.getCustomCriteria() == null) {
    metadata.setCustomCriteria(serverMetadata.getCustomCriteria());
  }
 else {
    metadata.setCustomCriteria(map.getCustomCriteria());
  }
  attributes.put(field.getName(),metadata);
}

{
  AdminPresentationDataDrivenEnumerationOverride override=presentationOverrides.get(propertyName);
  if (override != null) {
    AdminPresentationDataDrivenEnumeration annot=override.value();
    if (annot != null) {
      if (!(mergedProperties.get(key) instanceof BasicFieldMetadata)) {
        return;
      }
      BasicFieldMetadata metadata=(BasicFieldMetadata)mergedProperties.get(key);
      metadata.setFieldType(SupportedFieldType.DATA_DRIVEN_ENUMERATION);
      metadata.setExplicitFieldType(SupportedFieldType.DATA_DRIVEN_ENUMERATION);
      metadata.setOptionListEntity(annot.optionListEntity().getName());
      if (metadata.getOptionListEntity().equals(DataDrivenEnumerationValueImpl.class.getName())) {
        metadata.setOptionValueFieldName("key");
        metadata.setOptionDisplayFieldName("display");
      }
 else       if (metadata.getOptionListEntity() == null && (StringUtils.isEmpty(metadata.getOptionValueFieldName()) || StringUtils.isEmpty(metadata.getOptionDisplayFieldName()))) {
        throw new IllegalArgumentException("Problem setting up data driven enumeration for (" + propertyName + "). The optionListEntity, optionValueFieldName and optionDisplayFieldName properties must all be included if not using DataDrivenEnumerationValueImpl as the optionListEntity.");
      }
 else {
        metadata.setOptionValueFieldName(annot.optionValueFieldName());
        metadata.setOptionDisplayFieldName(annot.optionDisplayFieldName());
      }
      if (!ArrayUtils.isEmpty(annot.optionFilterParams())) {
        String[][] params=new String[annot.optionFilterParams().length][3];
        for (int j=0; j < params.length; j++) {
          params[j][0]=annot.optionFilterParams()[j].param();
          params[j][1]=annot.optionFilterParams()[j].value();
          params[j][2]=String.valueOf(annot.optionFilterParams()[j].paramType());
        }
        metadata.setOptionFilterParams(params);
      }
      if (!StringUtils.isEmpty(metadata.getOptionListEntity())) {
        buildDataDrivenList(metadata,dynamicEntityDao);
      }
    }
  }
}

{
  List<DiscreteOrderItem> itemsToRemove=new ArrayList<DiscreteOrderItem>();
  Map<Long,Map<String,Object[]>> gatherMap=new HashMap<Long,Map<String,Object[]>>();
  for (  FulfillmentGroup group : order.getFulfillmentGroups()) {
    Map<String,Object[]> gatheredItem=gatherMap.get(group.getId());
    if (gatheredItem == null) {
      gatheredItem=new HashMap<String,Object[]>();
      gatherMap.put(group.getId(),gatheredItem);
    }
    for (    FulfillmentGroupItem fgItem : group.getFulfillmentGroupItems()) {
      OrderItem orderItem=fgItem.getOrderItem();
      if (orderItem instanceof BundleOrderItem) {
        for (        DiscreteOrderItem discreteOrderItem : ((BundleOrderItem)orderItem).getDiscreteOrderItems()) {
          gatherFulfillmentGroupLinkedDiscreteOrderItem(itemsToRemove,gatheredItem,fgItem,discreteOrderItem,String.valueOf(orderItem.getId()));
        }
      }
 else {
        gatherFulfillmentGroupLinkedDiscreteOrderItem(itemsToRemove,gatheredItem,fgItem,(DiscreteOrderItem)orderItem,null);
      }
    }
  }
  for (  Map<String,Object[]> values : gatherMap.values()) {
    for (    Object[] item : values.values()) {
      orderItemService.saveOrderItem((OrderItem)item[0]);
      fulfillmentGroupItemDao.save((FulfillmentGroupItem)item[1]);
    }
  }
  for (  DiscreteOrderItem orderItem : itemsToRemove) {
    if (orderItem.getBundleOrderItem() == null) {
      OrderItemRequest orderItemRequest=new OrderItemRequest();
      orderItemRequest.setOrderItemId(orderItem.getId());
      try {
        orderService.removeItem(order,orderItemRequest,false);
      }
 catch (      ItemNotFoundException e) {
        throw new PricingException("Could not remove item",e);
      }
    }
 else {
      orderService.removeItemFromBundle(order,orderItem.getBundleOrderItem(),orderItem,false);
    }
  }
}

{
  List<BundleOrderItemSplitContainer> bundleContainers=order.getBundleSplitItems();
  for (  BundleOrderItemSplitContainer bundleContainer : bundleContainers) {
    for (    BundleOrderItemSplitContainer bundleOrderItemSplitContainer : bundleContainers) {
      BundleOrderItem val=bundleOrderItemSplitContainer.getSplitItems().get(0);
      val.setId(null);
      List<DiscreteOrderItem> itemsToAdd=new ArrayList<DiscreteOrderItem>();
      for (      DiscreteOrderItem discreteOrderItem : bundleOrderItemSplitContainer.getKey().getDiscreteOrderItems()) {
        PromotableOrderItem poi=new PromotableOrderItemImpl(discreteOrderItem,null,null);
        List<PromotableOrderItem> items=order.searchSplitItems(poi);
        for (        PromotableOrderItem temp : items) {
          DiscreteOrderItem delegate=temp.getDelegate();
          delegate.setId(null);
          delegate.setBundleOrderItem(val);
          itemsToAdd.add(delegate);
        }
      }
      val.getDiscreteOrderItems().clear();
      val.getDiscreteOrderItems().addAll(itemsToAdd);
      try {
        orderService.removeItem(order.getDelegate().getId(),bundleContainer.getKey().getId(),false);
      }
 catch (      RemoveFromCartException e) {
        throw new PricingException("Could not remove item",e);
      }
      if (CollectionUtils.isEmpty(order.getDelegate().getFulfillmentGroups())) {
        FulfillmentGroup fg=fulfillmentGroupService.createEmptyFulfillmentGroup();
        fg.setOrder(order.getDelegate());
        order.getDelegate().getFulfillmentGroups().add(fg);
      }
      val=(BundleOrderItem)addOrderItemToOrder(order.getDelegate(),val,false);
      for (      DiscreteOrderItem discreteOrderItem : val.getDiscreteOrderItems()) {
        for (int j=0; j < discreteOrderItem.getQuantity(); j++) {
          Iterator<OrderMultishipOption> itr=order.getMultiShipOptions().iterator();
          while (itr.hasNext()) {
            OrderMultishipOption option=itr.next();
            if ((option.getOrderItem() instanceof DiscreteOrderItem) && ((DiscreteOrderItem)option.getOrderItem()).getSku().equals(discreteOrderItem.getSku())) {
              option.setOrderItem(discreteOrderItem);
              orderMultishipOptionService.save(option);
              itr.remove();
              break;
            }
          }
        }
        FulfillmentGroupItem fgItem=fulfillmentGroupItemDao.create();
        fgItem.setQuantity(discreteOrderItem.getQuantity());
        fgItem.setOrderItem(discreteOrderItem);
        fgItem.setFulfillmentGroup(order.getDelegate().getFulfillmentGroups().get(0));
        order.getDelegate().getFulfillmentGroups().get(0).getFulfillmentGroupItems().add(fgItem);
      }
      for (int j=0; j < val.getQuantity(); j++) {
        Iterator<OrderMultishipOption> itr=order.getMultiShipOptions().iterator();
        while (itr.hasNext()) {
          OrderMultishipOption option=itr.next();
          if (buildIdentifier(option.getOrderItem(),null).equals(buildIdentifier(val,null))) {
            option.setOrderItem(val);
            orderMultishipOptionService.save(option);
            itr.remove();
            break;
          }
        }
      }
    }
  }
  orderService.save(order.getDelegate(),false);
}

{
  List<BundleOrderItemSplitContainer> bundleContainers=order.getBundleSplitItems();
  for (  BundleOrderItemSplitContainer bundleContainer : bundleContainers) {
    PromotableFulfillmentGroup targetGroup=getTargetFulfillmentGroup(order,bundleContainer.getKey());
    List<BundleOrderItem> bundleOrderItems=bundleContainer.getSplitItems();
    Map<String,BundleOrderItem> gatheredBundleItems=new HashMap<String,BundleOrderItem>();
    for (    BundleOrderItem bundleOrderItem : bundleOrderItems) {
      bundleOrderItem.assignFinalPrice();
      String hash=bundleOrderItem.getPrice().stringValue();
      if (!gatheredBundleItems.containsKey(hash)) {
        gatheredBundleItems.put(hash,bundleOrderItem);
      }
 else {
        BundleOrderItem temp=gatheredBundleItems.get(hash);
        temp.setQuantity(temp.getQuantity() + 1);
      }
    }
    OrderItemRequest orderItemRequest=new OrderItemRequest();
    orderItemRequest.setOrderItemId(bundleContainer.getKey().getId());
    try {
      orderService.removeItem(order.getDelegate(),orderItemRequest,false);
    }
 catch (    ItemNotFoundException e) {
      throw new PricingException("Could not remove item",e);
    }
    for (    BundleOrderItem vals : gatheredBundleItems.values()) {
      vals.setId(null);
      DirectOrderItemRequest directOrderItemRequest=new DirectOrderItemRequest();
      directOrderItemRequest.setOrderItem(vals);
      BundleOrderItem temp=(BundleOrderItem)orderService.addItem(order.getDelegate(),directOrderItemRequest,false);
      if (targetGroup != null) {
        FulfillmentGroupItemRequest fgItemRequest=new FulfillmentGroupItemRequest();
        fgItemRequest.setFulfillmentGroup(targetGroup.getDelegate());
        fgItemRequest.setOrderItem(temp);
        fulfillmentGroupService.addItemToFulfillmentGroup(fgItemRequest,false);
      }
    }
  }
}

{
  List<BundleOrderItemSplitContainer> bundleContainers=order.getBundleSplitItems();
  for (  BundleOrderItemSplitContainer bundleContainer : bundleContainers) {
    List<BundleOrderItem> bundleOrderItems=bundleContainer.getSplitItems();
    Map<String,BundleOrderItem> gatheredBundleItems=new HashMap<String,BundleOrderItem>();
    for (    BundleOrderItem bundleOrderItem : bundleOrderItems) {
      bundleOrderItem.assignFinalPrice();
      String hash=bundleOrderItem.getPrice().stringValue();
      if (!gatheredBundleItems.containsKey(hash)) {
        gatheredBundleItems.put(hash,bundleOrderItem);
      }
 else {
        BundleOrderItem temp=gatheredBundleItems.get(hash);
        temp.setQuantity(temp.getQuantity() + 1);
      }
    }
    List<FulfillmentGroupItemRequest> bundleFGItemRequests=new ArrayList<FulfillmentGroupItemRequest>();
    for (    BundleOrderItem val : gatheredBundleItems.values()) {
      val.setId(null);
      Map<Long,Map<PromotableFulfillmentGroup,Integer>> targetGroups=new HashMap<Long,Map<PromotableFulfillmentGroup,Integer>>();
      Long index=0L;
      for (      DiscreteOrderItem discreteOrderItem : val.getDiscreteOrderItems()) {
        OrderItem key=order.searchSplitItemsForKey(discreteOrderItem);
        Map<PromotableFulfillmentGroup,Integer> groups=getTargetFulfillmentGroups(order,key);
        discreteOrderItem.setId(null);
        discreteOrderItem.setBundleOrderItem(val);
        if (!groups.isEmpty()) {
          targetGroups.put(index,groups);
        }
        index++;
      }
      val=(BundleOrderItem)addOrderItemToOrder(order.getDelegate(),val,false);
      index=0L;
      List<FulfillmentGroupItemRequest> orderItemFGRequests=new ArrayList<FulfillmentGroupItemRequest>();
      for (      DiscreteOrderItem discreteOrderItem : val.getDiscreteOrderItems()) {
        if (targetGroups.containsKey(index)) {
          buildFullfillmentGroupItemRequestForItem(order,targetGroups.get(index),orderItemFGRequests,discreteOrderItem);
        }
        index++;
      }
      for (      FulfillmentGroupItemRequest request : orderItemFGRequests) {
        fulfillmentGroupService.addItemToFulfillmentGroup(request,false);
      }
      Map<PromotableFulfillmentGroup,Integer> groups=getTargetFulfillmentGroups(order,bundleContainer.getKey());
      if (!groups.isEmpty()) {
        buildFullfillmentGroupItemRequestForItem(order,groups,bundleFGItemRequests,val);
      }
    }
    for (    FulfillmentGroupItemRequest request : bundleFGItemRequests) {
      fulfillmentGroupService.addItemToFulfillmentGroup(request,false);
    }
    try {
      orderService.removeItem(order.getDelegate().getId(),bundleContainer.getKey().getId(),false);
    }
 catch (    RemoveFromCartException e) {
      throw new PricingException("Could not remove item",e);
    }
  }
}

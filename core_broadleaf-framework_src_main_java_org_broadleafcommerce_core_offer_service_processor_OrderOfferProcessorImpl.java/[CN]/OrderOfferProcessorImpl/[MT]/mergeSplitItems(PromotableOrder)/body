{
  try {
    mergeSplitDiscreteOrderItems(order);
    mergeSplitBundleOrderItems(order);
    if (order.isHasMultiShipOptions()) {
      List<OrderMultishipOption> multishipOptions=orderMultishipOptionService.findOrderMultishipOptions(order.getDelegate().getId());
      List<FulfillmentGroupItem> itemsToRemove=new ArrayList<FulfillmentGroupItem>();
      for (      OrderMultishipOption option : multishipOptions) {
        for (        FulfillmentGroupItem item : order.getDelegate().getFulfillmentGroups().get(0).getFulfillmentGroupItems()) {
          if (option.getOrderItem().getId().equals(item.getOrderItem().getId())) {
            FulfillmentGroupRequest fgr=new FulfillmentGroupRequest();
            fgr.setOrder(order.getDelegate());
            if (option.getAddress() != null) {
              fgr.setAddress(option.getAddress());
            }
            if (option.getFulfillmentOption() != null) {
              fgr.setOption(option.getFulfillmentOption());
            }
            FulfillmentGroup fg=fulfillmentGroupService.addFulfillmentGroupToOrder(fgr,false);
            fg=fulfillmentGroupService.save(fg);
            order.getDelegate().getFulfillmentGroups().add(fg);
            FulfillmentGroupItem fulfillmentGroupItem=fulfillmentGroupItemDao.create();
            fulfillmentGroupItem.setFulfillmentGroup(fg);
            fulfillmentGroupItem.setOrderItem(option.getOrderItem());
            fulfillmentGroupItem.setQuantity(1);
            fulfillmentGroupItem=fulfillmentGroupItemDao.save(fulfillmentGroupItem);
            fg.getFulfillmentGroupItems().add(fulfillmentGroupItem);
            if (item.getQuantity() - 1 <= 0) {
              itemsToRemove.add(item);
            }
 else {
              item.setQuantity(item.getQuantity() - 1);
            }
          }
        }
      }
      for (      FulfillmentGroupItem item : itemsToRemove) {
        FulfillmentGroup fg=item.getFulfillmentGroup();
        fg.getFulfillmentGroupItems().remove(item);
        item.setFulfillmentGroup(null);
        if (fg.getFulfillmentGroupItems().size() == 0) {
          order.getDelegate().getFulfillmentGroups().remove(fg);
          fg.setOrder(null);
          fulfillmentGroupService.delete(fg);
          orderService.save(order.getDelegate(),false);
        }
      }
    }
    order.resetDiscreteOrderItems();
    for (    PromotableOrderItem myItem : order.getDiscountableDiscreteOrderItems()) {
      if (myItem.isHasOrderItemAdjustments()) {
        for (        OrderItemAdjustment adjustment : myItem.getDelegate().getOrderItemAdjustments()) {
          PromotableOrderItemAdjustment promotableOrderItemAdjustment=promotableItemFactory.createPromotableOrderItemAdjustment(adjustment,myItem);
          myItem.resetAdjustmentPrice();
          promotableOrderItemAdjustment.computeAdjustmentValues();
          myItem.computeAdjustmentPrice();
        }
      }
    }
  }
 catch (  PricingException e) {
    throw new RuntimeException("Could not propagate the items split by the promotion engine into the order",e);
  }
}

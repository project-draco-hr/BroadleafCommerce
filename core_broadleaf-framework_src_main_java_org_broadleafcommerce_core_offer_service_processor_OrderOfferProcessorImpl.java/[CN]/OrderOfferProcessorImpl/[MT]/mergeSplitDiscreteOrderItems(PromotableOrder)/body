{
  List<PromotableOrderItem> itemsToRemove=new ArrayList<PromotableOrderItem>();
  Iterator<PromotableOrderItem> finalItems=order.getDiscountableDiscreteOrderItems().iterator();
  Map<String,PromotableOrderItem> allItems=new HashMap<String,PromotableOrderItem>();
  while (finalItems.hasNext()) {
    PromotableOrderItem nextItem=finalItems.next();
    List<PromotableOrderItem> mySplits=order.searchSplitItems(nextItem);
    if (!CollectionUtils.isEmpty(mySplits)) {
      PromotableOrderItem cloneItem=nextItem.clone();
      cloneItem.clearAllDiscount();
      cloneItem.clearAllQualifiers();
      cloneItem.removeAllAdjustments();
      cloneItem.setQuantity(0);
      Iterator<PromotableOrderItem> splitItemIterator=mySplits.iterator();
      while (splitItemIterator.hasNext()) {
        PromotableOrderItem splitItem=splitItemIterator.next();
        if (!splitItem.isHasOrderItemAdjustments()) {
          cloneItem.setQuantity(cloneItem.getQuantity() + splitItem.getQuantity());
          splitItemIterator.remove();
        }
      }
      if (cloneItem.getQuantity() > 0) {
        String identifier=String.valueOf(cloneItem.getSku().getId());
        Long bundleItemId=getBundleId(cloneItem.getDelegate());
        if (bundleItemId != null) {
          identifier+=bundleItemId;
        }
        if (allItems.containsKey(identifier)) {
          PromotableOrderItem savedItem=allItems.get(identifier);
          savedItem.setQuantity(savedItem.getQuantity() + cloneItem.getQuantity());
        }
 else {
          allItems.put(identifier,cloneItem);
          mySplits.add(cloneItem);
        }
      }
      Long nextItemBundleItemId=getBundleId(nextItem.getDelegate());
      if (nextItemBundleItemId != null) {
        if (mySplits.contains(nextItem)) {
          mySplits.remove(nextItem);
        }
 else {
          itemsToRemove.add(nextItem);
        }
      }
 else {
        itemsToRemove.add(nextItem);
      }
    }
  }
  for (  OrderItemSplitContainer key : order.getSplitItems()) {
    List<PromotableOrderItem> mySplits=key.getSplitItems();
    if (!CollectionUtils.isEmpty(mySplits)) {
      PromotableFulfillmentGroup targetGroup=getTargetFulfillmentGroup(order,key.getKey());
      for (      PromotableOrderItem myItem : mySplits) {
        myItem.assignFinalPrice();
        OrderItem delegateItem=myItem.getDelegate();
        Long delegateItemBundleItemId=getBundleId(delegateItem);
        if (delegateItemBundleItemId == null) {
          delegateItem=(DiscreteOrderItem)cartService.addOrderItemToOrder(order.getDelegate(),delegateItem,false);
          if (targetGroup != null) {
            cartService.addItemToFulfillmentGroup(delegateItem,targetGroup.getDelegate(),false);
          }
        }
 else {
          ((DiscreteOrderItem)delegateItem).getBundleOrderItem().getDiscreteOrderItems().add((DiscreteOrderItem)delegateItem);
        }
      }
    }
  }
  for (  PromotableOrderItem orderItem : itemsToRemove) {
    OrderItem delegateItem=orderItem.getDelegate();
    Long delegateItemBundleItemId=getBundleId(delegateItem);
    if (delegateItemBundleItemId == null) {
      cartService.removeItemFromOrder(order.getDelegate(),orderItem.getDelegate(),false);
    }
 else {
      ((DiscreteOrderItem)delegateItem).getBundleOrderItem().getDiscreteOrderItems().remove(orderItem.getDelegate());
    }
  }
}

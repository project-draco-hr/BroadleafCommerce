{
  Map<Long,OrderItemPriceDetailAdjustment> itemAdjustmentMap=buildItemDetailAdjustmentMap(itemDetail);
  if (itemDetail.getQuantity() != promotableDetail.getQuantity()) {
    itemDetail.setQuantity(promotableDetail.getQuantity());
  }
  if (itemDetail.getUseSalePrice() != promotableDetail.useSaleAdjustments()) {
    itemDetail.setUseSalePrice(promotableDetail.useSaleAdjustments());
  }
  for (  PromotableOrderItemPriceDetailAdjustment adjustment : promotableDetail.getCandidateItemAdjustments()) {
    OrderItemPriceDetailAdjustment itemAdjustment=itemAdjustmentMap.remove(adjustment.getOfferId());
    if (itemAdjustment != null) {
      if (!itemAdjustment.getValue().equals(adjustment.getAdjustmentValue())) {
        updateItemAdjustment(itemAdjustment,adjustment);
      }
    }
 else {
      OrderItemPriceDetailAdjustment newItemAdjustment=offerDao.createOrderItemPriceDetailAdjustment();
      newItemAdjustment.init(itemDetail,adjustment.getOffer(),null);
      updateItemAdjustment(newItemAdjustment,adjustment);
      itemDetail.getOrderItemPriceDetailAdjustments().add(newItemAdjustment);
    }
  }
  if (itemAdjustmentMap.size() > 0) {
    List<Long> adjustmentIdsToRemove=new ArrayList<Long>();
    for (    OrderItemPriceDetailAdjustment adjustmentToRemove : itemAdjustmentMap.values()) {
      adjustmentIdsToRemove.add(adjustmentToRemove.getOffer().getId());
    }
    Iterator<OrderItemPriceDetailAdjustment> iterator=itemDetail.getOrderItemPriceDetailAdjustments().iterator();
    while (iterator.hasNext()) {
      OrderItemPriceDetailAdjustment adj=iterator.next();
      if (adjustmentIdsToRemove.contains(adj.getOffer().getId())) {
        iterator.remove();
      }
    }
  }
}

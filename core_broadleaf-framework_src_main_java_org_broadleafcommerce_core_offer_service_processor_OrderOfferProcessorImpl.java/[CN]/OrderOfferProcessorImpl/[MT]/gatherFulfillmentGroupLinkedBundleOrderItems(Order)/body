{
  List<BundleOrderItem> bundlesToRemove=new ArrayList<BundleOrderItem>();
  Map<Long,Map<String,Object[]>> gatherBundle=new HashMap<Long,Map<String,Object[]>>();
  for (  FulfillmentGroup group : order.getFulfillmentGroups()) {
    Map<String,Object[]> gatheredItem=gatherBundle.get(group.getId());
    if (gatheredItem == null) {
      gatheredItem=new HashMap<String,Object[]>();
      gatherBundle.put(group.getId(),gatheredItem);
    }
    for (    FulfillmentGroupItem fgItem : group.getFulfillmentGroupItems()) {
      OrderItem orderItem=fgItem.getOrderItem();
      if (orderItem instanceof BundleOrderItem) {
        String identifier=buildIdentifier(orderItem,null);
        Object[] gatheredOrderItem=gatheredItem.get(identifier);
        if (gatheredOrderItem == null) {
          gatheredItem.put(identifier,new Object[]{orderItem,fgItem});
          continue;
        }
        ((OrderItem)gatheredOrderItem[0]).setQuantity(((OrderItem)gatheredOrderItem[0]).getQuantity() + orderItem.getQuantity());
        ((FulfillmentGroupItem)gatheredOrderItem[1]).setQuantity(((FulfillmentGroupItem)gatheredOrderItem[1]).getQuantity() + fgItem.getQuantity());
        bundlesToRemove.add((BundleOrderItem)orderItem);
      }
    }
  }
  for (  Map<String,Object[]> values : gatherBundle.values()) {
    for (    Object[] item : values.values()) {
      orderItemService.saveOrderItem((OrderItem)item[0]);
      fulfillmentGroupItemDao.save((FulfillmentGroupItem)item[1]);
    }
  }
  for (  BundleOrderItem orderItem : bundlesToRemove) {
    OrderItemRequest orderItemRequest=new OrderItemRequest();
    orderItemRequest.setOrderItemId(orderItem.getId());
    try {
      orderService.removeItem(order,orderItemRequest,false);
    }
 catch (    ItemNotFoundException e) {
      throw new PricingException("Item could not be removed",e);
    }
  }
}

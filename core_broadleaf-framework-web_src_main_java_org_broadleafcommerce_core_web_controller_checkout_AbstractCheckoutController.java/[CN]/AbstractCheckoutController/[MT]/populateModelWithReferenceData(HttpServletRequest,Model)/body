{
  String editOrderInfo=request.getParameter("edit-order-info");
  boolean hasValidOrderInfo;
  if (BooleanUtils.toBoolean(editOrderInfo)) {
    hasValidOrderInfo=false;
  }
 else {
    hasValidOrderInfo=hasValidOrderInfo(CartState.getCart());
  }
  model.addAttribute("validOrderInfo",hasValidOrderInfo);
  boolean hasValidShipping=false;
  String editShipping=request.getParameter("edit-shipping");
  if (BooleanUtils.toBoolean(editShipping)) {
    hasValidShipping=false;
  }
 else {
    hasValidShipping=hasValidShippingAddresses(CartState.getCart());
  }
  int numShippableFulfillmentGroups=0;
  List<FulfillmentGroup> fulfillmentGroups=CartState.getCart().getFulfillmentGroups();
  if (fulfillmentGroups != null) {
    for (    FulfillmentGroup fulfillmentGroup : fulfillmentGroups) {
      if (fulfillmentGroupService.isShippable(fulfillmentGroup.getType())) {
        numShippableFulfillmentGroups++;
      }
    }
  }
  if (numShippableFulfillmentGroups == 0) {
    hasValidShipping=true;
  }
  model.addAttribute("numShippableFulfillmentGroups",numShippableFulfillmentGroups);
  model.addAttribute("validShipping",hasValidShipping);
  putFulfillmentOptionsAndEstimationOnModel(model);
  model.addAttribute("states",stateService.findStates());
  model.addAttribute("countries",countryService.findCountries());
  model.addAttribute("expirationMonths",populateExpirationMonths());
  model.addAttribute("expirationYears",populateExpirationYears());
  checkoutControllerExtensionManager.getProxy().addAdditionalModelVariables(model);
}

{
  if (library.contains(System.identityHashCode(copy))) {
    return;
  }
  library.add(System.identityHashCode(copy));
  List<Object[]> collections=new ArrayList<Object[]>();
  Field[] allFields=context.getAllFields(copy.getClass());
  for (  Field field : allFields) {
    if (field.getName().equals("embeddableSiteDiscriminator")) {
      continue;
    }
    if (!Modifier.isStatic(field.getModifiers())) {
      field.setAccessible(true);
      Object newTarget;
      try {
        newTarget=field.get(copy);
      }
 catch (      IllegalAccessException e) {
        throw ExceptionHelper.refineException(e);
      }
      if (newTarget != null) {
        if (field.getAnnotation(ManyToOne.class) != null || field.getAnnotation(OneToOne.class) != null) {
          if (library.contains(System.identityHashCode(newTarget))) {
            persistPart(newTarget,context);
            continue;
          }
          persistCopyObjectTree(newTarget,library,context);
        }
 else         if (field.getAnnotation(ManyToMany.class) != null || field.getAnnotation(OneToMany.class) != null) {
          collections.add(new Object[]{field,newTarget});
        }
 else         if (field.getType().getAnnotation(Embeddable.class) != null && MultiTenantCloneable.class.isAssignableFrom(field.getType())) {
          persistCopyObjectTree(newTarget,library,context);
        }
      }
    }
  }
  if (copy.getClass().getAnnotation(Embeddable.class) == null) {
    persistPart(copy,context);
  }
  for (  Object[] collectionItem : collections) {
    if (collectionItem[1] instanceof Collection) {
      Collection newCollection=(Collection)collectionItem[1];
      for (      Object member : newCollection) {
        persistCopyObjectTree(member,library,context);
      }
    }
 else     if (collectionItem[1] instanceof Map) {
      Map newMap=(Map)collectionItem[1];
      for (      Object key : newMap.keySet()) {
        persistCopyObjectTree(newMap.get(key),library,context);
      }
    }
 else {
      throw new IllegalArgumentException(String.format("During copy object persistence, " + "an unrecognized type was detected for a OneToMany or ManyToMany field. The system currently only " + "recognizes Collection and Map. (%s.%s)",copy.getClass().getName(),((Field)collectionItem[0]).getName()));
    }
  }
}

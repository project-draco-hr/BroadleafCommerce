{
  genericEntityService.flush();
  genericEntityService.clear();
  transUtil.runStreamingTransactionalOperation(new StreamCapableTransactionalOperationAdapter(){
    @Override public Object[] retrievePage(    int startPos,    int pageSize){
      try {
        Object[] temp=new Object[1];
        List<T> results=readAll(clazz,pageSize,startPos,fromSite,fromCatalog);
        temp[0]=results;
        return temp;
      }
 catch (      ServiceException e) {
        throw ExceptionHelper.refineException(e);
      }
    }
    @Override public void pagedExecute(    Object[] param) throws Throwable {
      try {
        List<T> results=(List<T>)param[0];
        for (        T result : results) {
          persistCopyObjectTree(new CopyOperation<T,CloneNotSupportedException>(){
            @Override public T execute(            T original) throws CloneNotSupportedException {
              return (T)original.createOrRetrieveCopyInstance(context).getClone();
            }
          }
,clazz,result,context);
          genericEntityService.flush();
        }
      }
  finally {
        genericEntityService.clear();
      }
    }
    @Override public Long retrieveTotalCount(){
      try {
        return readCount(clazz,fromSite,fromCatalog);
      }
 catch (      ServiceException e) {
        throw ExceptionHelper.refineException(e);
      }
    }
    @Override public boolean shouldRetryOnTransactionLockAcquisitionFailure(){
      return true;
    }
  }
,RuntimeException.class);
}

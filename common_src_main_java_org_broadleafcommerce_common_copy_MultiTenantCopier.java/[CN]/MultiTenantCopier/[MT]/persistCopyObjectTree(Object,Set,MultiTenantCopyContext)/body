{
  if (library.contains(copy)) {
    return;
  }
  library.add(copy);
  Field[] allFields=getAllFields(copy.getClass());
  for (  Field field : allFields) {
    if (!Modifier.isStatic(field.getModifiers())) {
      field.setAccessible(true);
      Object newTarget;
      try {
        newTarget=field.get(copy);
      }
 catch (      IllegalAccessException e) {
        throw ExceptionHelper.refineException(e);
      }
      if (newTarget != null) {
        if (field.getAnnotation(ManyToOne.class) != null || field.getAnnotation(OneToOne.class) != null) {
          persistCopyObjectTree(newTarget,library,context);
        }
 else         if (field.getAnnotation(ManyToMany.class) != null || field.getAnnotation(OneToMany.class) != null) {
          if (newTarget instanceof Collection) {
            Collection newCollection=(Collection)newTarget;
            for (            Object member : newCollection) {
              persistCopyObjectTree(member,library,context);
            }
          }
 else           if (newTarget instanceof Map) {
            Map newMap=(Map)newTarget;
            for (            Object key : newMap.keySet()) {
              persistCopyObjectTree(newMap.get(key),library,context);
            }
          }
 else {
            throw new IllegalArgumentException(String.format("During copy object persistence, " + "an unrecognized type was detected for a OneToMany or ManyToMany field. The system currently only " + "recognizes Collection and Map. (%s.%s)",copy.getClass().getName(),field.getName()));
          }
        }
      }
    }
  }
  if (!genericEntityService.sessionContains(copy)) {
    Object original=genericEntityService.readGenericEntity(copy.getClass().getName(),context.removeOriginalIdentifier(copy));
    extensionManager.getProxy().transformCopy(context,original,copy);
    extensionManager.getProxy().prepareForSave(context,original,copy);
    genericEntityService.persist(copy);
    context.storeEquivalentMapping(original.getClass().getName(),context.getIdentifier(original),context.getIdentifier(copy));
  }
  context.checkLevel1Cache();
}

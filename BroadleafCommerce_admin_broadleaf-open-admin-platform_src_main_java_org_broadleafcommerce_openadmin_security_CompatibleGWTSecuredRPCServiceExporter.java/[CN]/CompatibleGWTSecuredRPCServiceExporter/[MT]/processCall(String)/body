{
  String response=null;
  final RPCRequest rpcRequest=RPC.decodeRequest(payload,null,this);
  try {
    response=super.processCall(payload);
  }
 catch (  final Throwable e) {
    LOGGER.error("Problem processing call",e);
    final Throwable cause1=e.getCause();
    if (cause1 != null && cause1 instanceof UnexpectedException) {
      final Throwable preciousException=cause1.getCause();
      if (preciousException != null && (preciousException instanceof AccessDeniedException || preciousException instanceof AuthenticationException)) {
        return processException(preciousException,rpcRequest);
      }
 else       if (preciousException != null && (preciousException instanceof TransactionSystemException)) {
        return processException(((TransactionSystemException)preciousException).getApplicationException(),rpcRequest);
      }
    }
    return processException(e,rpcRequest);
  }
  return response;
}

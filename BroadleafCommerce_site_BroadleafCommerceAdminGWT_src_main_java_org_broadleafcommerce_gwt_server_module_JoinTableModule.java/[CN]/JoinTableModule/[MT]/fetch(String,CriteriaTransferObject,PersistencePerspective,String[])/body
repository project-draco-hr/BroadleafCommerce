{
  JoinTable joinTable=(JoinTable)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINTABLE);
  Entity[] payload;
  int totalRecords;
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalNonPersistentForeignKeys(),MergedPropertyType.PRIMARY);
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(joinTable.getJoinTableEntityClassname(),new Class[]{Class.forName(joinTable.getJoinTableEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINTABLE);
    BaseCtoConverter ctoConverter=getJoinTableCtoConverter(cto,mergedProperties,joinTable);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,joinTable.getJoinTableEntityClassname());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(joinTable.getJoinTableEntityClassname()));
    payload=getRecords(mergedPropertiesTarget,records,mergedProperties,joinTable.getTargetObjectPath());
    totalRecords=getTotalRecords(joinTable.getJoinTableEntityClassname(),cto,ctoConverter);
  }
 catch (  Exception e) {
    LOG.error("Problem fetching results for " + joinTable.getJoinTableEntityClassname(),e);
    throw new ServiceException("Unable to fetch results for " + joinTable.getJoinTableEntityClassname(),e);
  }
  DynamicResultSet results=new DynamicResultSet(null,payload,totalRecords);
  return results;
}

{
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for add types other than ENTITY");
  }
  JoinTable joinTable=(JoinTable)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINTABLE);
  Entity payload;
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalNonPersistentForeignKeys(),MergedPropertyType.PRIMARY);
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(joinTable.getJoinTableEntityClassname(),new Class[]{Class.forName(joinTable.getJoinTableEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINTABLE);
    CriteriaTransferObject ctoInserted=new CriteriaTransferObject();
    FilterAndSortCriteria filterCriteriaInsertedLinked=ctoInserted.get(joinTable.getManyToField());
    filterCriteriaInsertedLinked.setFilterValue(entity.findProperty(joinTable.getLinkedObjectPath() + "." + joinTable.getLinkedIdProperty()).getValue());
    FilterAndSortCriteria filterCriteriaInsertedTarget=ctoInserted.get(joinTable.getManyToField() + "Target");
    filterCriteriaInsertedTarget.setFilterValue(entity.findProperty(joinTable.getTargetObjectPath() + "." + joinTable.getTargetIdProperty()).getValue());
    BaseCtoConverter ctoConverterInserted=getJoinTableCtoConverter(ctoInserted,mergedProperties,joinTable);
    PersistentEntityCriteria queryCriteriaInserted=ctoConverterInserted.convert(ctoInserted,joinTable.getJoinTableEntityClassname());
    List<Serializable> recordsInserted=dynamicEntityDao.query(queryCriteriaInserted,Class.forName(joinTable.getJoinTableEntityClassname()));
    if (recordsInserted.size() > 0) {
      payload=getRecords(mergedPropertiesTarget,recordsInserted,mergedProperties,joinTable.getTargetObjectPath())[0];
    }
 else {
      Serializable instance=createPopulatedJoinTableInstance(joinTable,entity);
      instance=createPopulatedInstance(instance,entity,mergedProperties,false);
      instance=createPopulatedInstance(instance,entity,mergedPropertiesTarget,false);
      if (PropertyUtils.getPropertyDescriptor(instance,"id") != null) {
        PropertyUtils.setProperty(instance,"id",null);
      }
      CriteriaTransferObject cto=new CriteriaTransferObject();
      FilterAndSortCriteria filterCriteria=cto.get(joinTable.getManyToField());
      filterCriteria.setFilterValue(entity.findProperty(joinTable.getLinkedObjectPath() + "." + joinTable.getLinkedIdProperty()).getValue());
      FilterAndSortCriteria sortCriteria=cto.get(joinTable.getSortField());
      sortCriteria.setSortAscending(joinTable.getSortAscending());
      BaseCtoConverter ctoConverter=getJoinTableCtoConverter(cto,mergedProperties,joinTable);
      int totalRecords=getTotalRecords(joinTable.getJoinTableEntityClassname(),cto,ctoConverter);
      PropertyUtils.setProperty(instance,joinTable.getSortField(),Long.valueOf(totalRecords + 1));
      instance=dynamicEntityDao.merge(instance);
      dynamicEntityDao.flush();
      dynamicEntityDao.clear();
      List<Serializable> recordsInserted2=dynamicEntityDao.query(queryCriteriaInserted,Class.forName(joinTable.getJoinTableEntityClassname()));
      payload=getRecords(mergedPropertiesTarget,recordsInserted2,mergedProperties,joinTable.getTargetObjectPath())[0];
    }
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem adding new entity : " + e.getMessage(),e);
  }
  return payload;
}

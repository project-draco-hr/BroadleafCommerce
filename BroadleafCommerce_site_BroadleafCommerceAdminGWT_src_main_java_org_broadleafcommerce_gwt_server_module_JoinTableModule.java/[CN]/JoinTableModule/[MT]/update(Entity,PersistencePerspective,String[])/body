{
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for update types other than ENTITY");
  }
  JoinTable joinTable=(JoinTable)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINTABLE);
  try {
    CriteriaTransferObject cto=new CriteriaTransferObject();
    FilterAndSortCriteria filterCriteria=cto.get(joinTable.getManyToField());
    filterCriteria.setFilterValue(entity.findProperty(joinTable.getLinkedObjectPath() + "." + joinTable.getLinkedIdProperty()).getValue());
    if (joinTable.getSortField() != null) {
      FilterAndSortCriteria sortCriteria=cto.get(joinTable.getSortField());
      sortCriteria.setSortAscending(joinTable.getSortAscending());
    }
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(joinTable.getJoinTableEntityClassname(),new Class[]{Class.forName(joinTable.getJoinTableEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINTABLE);
    BaseCtoConverter ctoConverter=getJoinTableCtoConverter(cto,mergedProperties,joinTable);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,joinTable.getJoinTableEntityClassname());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(joinTable.getJoinTableEntityClassname()));
    int index=0;
    Long myEntityId=Long.valueOf(entity.findProperty(joinTable.getTargetObjectPath() + "." + joinTable.getTargetIdProperty()).getValue());
    for (    Serializable record : records) {
      Long targetId=(Long)PropertyUtils.getProperty(record,joinTable.getTargetObjectPath() + "." + joinTable.getTargetIdProperty());
      if (myEntityId.equals(targetId)) {
        break;
      }
      index++;
    }
    if (joinTable.getSortField() != null && entity.findProperty(joinTable.getSortField()).getValue() != null) {
      Serializable myRecord=records.remove(index);
      myRecord=createPopulatedInstance(myRecord,entity,mergedProperties,false);
      Integer newPos=Integer.valueOf(entity.findProperty(joinTable.getSortField()).getValue());
      records.add(newPos,myRecord);
      index=1;
      for (      Serializable record : records) {
        PropertyUtils.setProperty(record,joinTable.getSortField(),Long.valueOf(index));
        index++;
      }
    }
 else {
      Serializable myRecord=records.get(index);
      myRecord=createPopulatedInstance(myRecord,entity,mergedProperties,false);
      dynamicEntityDao.merge(myRecord);
    }
    return entity;
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

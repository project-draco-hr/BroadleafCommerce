{
  if (fieldNames.length > 0) {
    resetPermanentFieldVisibility(fieldNames);
  }
  DataSourceField[] fields=getFields();
  ListGridField[] gridFields=new ListGridField[fields.length];
  int j=0;
  List<DataSourceField> prominentFields=new ArrayList<DataSourceField>();
  for (  DataSourceField field : fields) {
    if (field.getAttributeAsBoolean("prominent")) {
      prominentFields.add(field);
    }
  }
  int availableSlots=4;
  for (  DataSourceField field : prominentFields) {
    gridFields[j]=new ListGridField(field.getName(),field.getTitle(),j == 0 ? 200 : 150);
    if (MergedPropertyType.MAPSTRUCTUREKEY.toString().equals(field.getAttribute("mergedPropertyType"))) {
      ComboBoxItem selectItem=new ComboBoxItem();
      if (keyMap == null && optionDataSource == null) {
        throw new RuntimeException("Must supply either a key map or option data source to support the key values for this map structure.");
      }
      if (keyMap != null) {
        selectItem.setValueMap(keyMap);
      }
 else {
        selectItem.setOptionDataSource(optionDataSource);
        selectItem.setDisplayField(displayField);
        selectItem.setValueField(valueField);
      }
      selectItem.setDefaultToFirstOption(true);
      selectItem.setAutoFetchData(false);
      gridFields[j].setEditorType(selectItem);
    }
    if (j == 0) {
      if (fieldNames == null || fieldNames.length == 0) {
        gridFields[j].setFrozen(true);
      }
    }
    gridFields[j].setHidden(false);
    gridFields[j].setWidth("*");
    int pos=Arrays.binarySearch(fieldNames,field.getName());
    if (pos >= 0) {
      gridFields[j].setCanEdit(canEdit[pos]);
    }
    j++;
    availableSlots--;
  }
  for (  DataSourceField field : fields) {
    if (!prominentFields.contains(field)) {
      gridFields[j]=new ListGridField(field.getName(),field.getTitle(),j == 0 ? 200 : 150);
      if (MergedPropertyType.MAPSTRUCTUREKEY.toString().equals(field.getAttribute("mergedPropertyType"))) {
        SelectItem selectItem=new SelectItem();
        selectItem.setMultiple(false);
        selectItem.setValueMap(keyMap);
        selectItem.setDefaultToFirstOption(true);
        selectItem.setAutoFetchData(false);
        gridFields[j].setEditorType(selectItem);
      }
      if (field.getAttributeAsBoolean("permanentlyHidden")) {
        gridFields[j].setHidden(true);
        gridFields[j].setCanHide(false);
      }
 else       if (field.getAttributeAsBoolean("hidden")) {
        gridFields[j].setHidden(true);
      }
 else       if (availableSlots <= 0) {
        gridFields[j].setHidden(true);
      }
 else {
        if (j == 0) {
          if (fieldNames == null || fieldNames.length == 0) {
            gridFields[j].setFrozen(true);
          }
        }
        gridFields[j].setWidth("*");
        int pos=Arrays.binarySearch(fieldNames,field.getName());
        if (pos >= 0) {
          gridFields[j].setCanEdit(canEdit[pos]);
        }
        availableSlots--;
      }
      j++;
    }
  }
  ((ListGrid)getAssociatedGrid()).setFields(gridFields);
  if (fieldNames != null && fieldNames.length > 0) {
    int pos=0;
    for (    String fieldName : fieldNames) {
      int originalPos=((ListGrid)getAssociatedGrid()).getFieldNum(fieldName);
      ((ListGrid)getAssociatedGrid()).reorderField(originalPos,pos);
      pos++;
    }
  }
  getAssociatedGrid().setHilites(hilites);
}

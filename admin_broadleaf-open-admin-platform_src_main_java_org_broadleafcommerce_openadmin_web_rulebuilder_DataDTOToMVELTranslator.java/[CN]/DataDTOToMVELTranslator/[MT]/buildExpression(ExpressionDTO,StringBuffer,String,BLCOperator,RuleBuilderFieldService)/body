{
  String field=expressionDTO.getName();
  SupportedFieldType type=fieldService.getSupportedFieldType(field);
  SupportedFieldType secondaryType=fieldService.getSecondaryFieldType(field);
  Object[] value;
  if (type == null) {
    throw new MVELTranslationException("The DataDTO is not compatible with the RuleBuilderFieldService " + "associated with the current rules builder. Unable to find the field " + "specified: (" + field + ")");
  }
  if (SupportedFieldType.DATE.toString().equals(type.toString()) && !BLCOperator.CONTAINS_FIELD.equals(operator) && !BLCOperator.ENDS_WITH_FIELD.equals(operator)&& !BLCOperator.EQUALS_FIELD.equals(operator)&& !BLCOperator.GREATER_OR_EQUAL_FIELD.equals(operator)&& !BLCOperator.GREATER_THAN_FIELD.equals(operator)&& !BLCOperator.LESS_OR_EQUAL_FIELD.equals(operator)&& !BLCOperator.LESS_THAN_FIELD.equals(operator)&& !BLCOperator.NOT_EQUAL_FIELD.equals(operator)&& !BLCOperator.STARTS_WITH_FIELD.equals(operator)&& !BLCOperator.BETWEEN.equals(operator)&& !BLCOperator.BETWEEN_INCLUSIVE.equals(operator)) {
    value=extractDate(expressionDTO,operator,"value");
  }
 else {
    value=extractBasicValues(expressionDTO.getValue());
  }
switch (operator) {
case CONTAINS:
{
      buildExpression(sb,entityKey,field,value,type,secondaryType,".contains",true,false,false,false,false);
      break;
    }
case CONTAINS_FIELD:
{
    buildExpression(sb,entityKey,field,value,type,secondaryType,".contains",true,true,false,false,false);
    break;
  }
case ENDS_WITH:
{
  buildExpression(sb,entityKey,field,value,type,secondaryType,".endsWith",true,false,false,false,false);
  break;
}
case ENDS_WITH_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".endsWith",true,true,false,false,false);
break;
}
case EQUALS:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"==",false,false,false,false,false);
break;
}
case EQUALS_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"==",false,true,false,false,false);
break;
}
case GREATER_OR_EQUAL:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,">=",false,false,false,false,false);
break;
}
case GREATER_OR_EQUAL_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,">=",false,true,false,false,false);
break;
}
case GREATER_THAN:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,">",false,false,false,false,false);
break;
}
case GREATER_THAN_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,">",false,true,false,false,false);
break;
}
case ICONTAINS:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".contains",true,false,true,false,false);
break;
}
case IENDS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".endsWith",true,false,true,false,false);
break;
}
case IEQUALS:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"==",false,false,true,false,false);
break;
}
case INOT_CONTAINS:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".contains",true,false,true,true,false);
break;
}
case INOT_ENDS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".endsWith",true,false,true,true,false);
break;
}
case INOT_EQUAL:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"!=",false,false,true,false,false);
break;
}
case INOT_STARTS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".startsWith",true,false,true,true,false);
break;
}
case IS_NULL:
{
buildExpression(sb,entityKey,field,new Object[]{"null"},type,secondaryType,"==",false,false,false,false,true);
break;
}
case ISTARTS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".startsWith",true,false,true,false,false);
break;
}
case LESS_OR_EQUAL:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"<=",false,false,false,false,false);
break;
}
case LESS_OR_EQUAL_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"<=",false,true,false,false,false);
break;
}
case LESS_THAN:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"<",false,false,false,false,false);
break;
}
case LESS_THAN_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"<",false,true,false,false,false);
break;
}
case NOT_CONTAINS:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".contains",true,false,false,true,false);
break;
}
case NOT_ENDS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".endsWith",true,false,false,true,false);
break;
}
case NOT_EQUAL:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"!=",false,false,false,false,false);
break;
}
case NOT_EQUAL_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,"!=",false,true,false,false,false);
break;
}
case NOT_NULL:
{
buildExpression(sb,entityKey,field,new Object[]{"null"},type,secondaryType,"!=",false,false,false,false,true);
break;
}
case NOT_STARTS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".startsWith",true,false,false,true,false);
break;
}
case STARTS_WITH:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".startsWith",true,false,false,false,false);
break;
}
case STARTS_WITH_FIELD:
{
buildExpression(sb,entityKey,field,value,type,secondaryType,".startsWith",true,true,false,false,false);
break;
}
case BETWEEN:
{
if (SupportedFieldType.DATE.toString().equals(type.toString())) {
sb.append("(");
buildExpression(sb,entityKey,field,extractDate(expressionDTO,BLCOperator.GREATER_THAN,"start"),type,secondaryType,">",false,false,false,false,false);
sb.append("&&");
buildExpression(sb,entityKey,field,extractDate(expressionDTO,BLCOperator.LESS_THAN,"end"),type,secondaryType,"<",false,false,false,false,false);
sb.append(")");
}
 else {
sb.append("(");
buildExpression(sb,entityKey,field,new Object[]{expressionDTO.getStart()},type,secondaryType,">",false,false,false,false,false);
sb.append("&&");
buildExpression(sb,entityKey,field,new Object[]{expressionDTO.getEnd()},type,secondaryType,"<",false,false,false,false,false);
sb.append(")");
}
break;
}
case BETWEEN_INCLUSIVE:
{
if (SupportedFieldType.DATE.toString().equals(type.toString())) {
sb.append("(");
buildExpression(sb,entityKey,field,extractDate(expressionDTO,BLCOperator.GREATER_OR_EQUAL,"start"),type,secondaryType,">=",false,false,false,false,false);
sb.append("&&");
buildExpression(sb,entityKey,field,extractDate(expressionDTO,BLCOperator.LESS_OR_EQUAL,"end"),type,secondaryType,"<=",false,false,false,false,false);
sb.append(")");
}
 else {
sb.append("(");
buildExpression(sb,entityKey,field,new Object[]{expressionDTO.getStart()},type,secondaryType,">=",false,false,false,false,false);
sb.append("&&");
buildExpression(sb,entityKey,field,new Object[]{expressionDTO.getEnd()},type,secondaryType,"<=",false,false,false,false,false);
sb.append(")");
}
break;
}
}
}

{
  List<Product> products=productDao.readAllActiveProducts(SystemTime.asDate());
  List<Field> fields=fieldDao.readAllProductFields();
  propertySearchFieldTypeMap.clear();
  propertyFacetFieldTypeMap.clear();
  Collection<SolrInputDocument> documents=new ArrayList<SolrInputDocument>();
  for (  Product product : products) {
    SolrInputDocument document=new SolrInputDocument();
    document.addField("id",product.getId());
    for (    Category category : product.getAllParentCategories()) {
      document.addField("category",category.getId());
    }
    List<String> addedProperties=new ArrayList<String>();
    List<String> copyFieldValue=new ArrayList<String>();
    for (    Field field : fields) {
      try {
        String propertyName=field.getPropertyName();
        if (propertyName.contains("productAttributes.")) {
          propertyName=convertToMappedProperty(propertyName,"productAttributes","mappedProductAttributes");
        }
        Object propertyValue=PropertyUtils.getProperty(product,propertyName);
        String[] searchableFieldTypes=getSearchableFieldTypes(field);
        if (searchableFieldTypes == null || searchableFieldTypes.length == 0) {
          addSearchFieldTypeMapping(product,field);
          searchableFieldTypes=getSearchableFieldTypes(field);
        }
        for (        String searchableFieldType : searchableFieldTypes) {
          String solrPropertyName=field.getPropertyName() + "_" + searchableFieldType;
          document.addField(solrPropertyName,propertyValue);
          addedProperties.add(solrPropertyName);
          copyFieldValue.add(propertyValue.toString());
        }
        String facetFieldType=getFacetFieldType(field);
        if (facetFieldType == null) {
          addFacetFieldTypeMapping(product,field);
          facetFieldType=getFacetFieldType(field);
        }
        if (facetFieldType != null) {
          String solrFacetPropertyName=field.getPropertyName() + "_" + getFacetFieldType(field);
          if (!addedProperties.contains(solrFacetPropertyName)) {
            document.addField(solrFacetPropertyName,propertyValue);
          }
        }
      }
 catch (      Exception e) {
        LOG.warn("Could not get value for property[" + field.getQualifiedFieldName() + "] for product id["+ product.getId()+ "]");
      }
    }
    document.addField("searchable",StringUtils.join(copyFieldValue," "));
    documents.add(document);
  }
  try {
    server.deleteByQuery("*:*");
    server.commit();
    server.add(documents);
    server.commit();
  }
 catch (  SolrServerException e) {
    throw new ServiceException("Could not rebuild index",e);
  }
}

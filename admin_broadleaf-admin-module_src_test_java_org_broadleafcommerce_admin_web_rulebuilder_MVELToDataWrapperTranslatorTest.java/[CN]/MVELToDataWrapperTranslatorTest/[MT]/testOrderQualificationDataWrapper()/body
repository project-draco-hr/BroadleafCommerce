{
  MVELToDataWrapperTranslator translator=new MVELToDataWrapperTranslator();
  Property[] properties=new Property[1];
  Property mvelProperty=new Property();
  mvelProperty.setName("matchRule");
  mvelProperty.setValue("order.subTotal.getAmount()>=100&&(order.currency.defaultFlag==true||order.locale.localeCode==\"my\")");
  properties[0]=mvelProperty;
  Entity[] entities=new Entity[1];
  Entity entity=new Entity();
  entity.setProperties(properties);
  entities[0]=entity;
  DataWrapper dataWrapper=translator.createRuleData(entities,"matchRule",null,orderFieldService);
  assert(dataWrapper.getData().size() == 1);
  assert(dataWrapper.getData().get(0).getQuantity() == null);
  assert(dataWrapper.getData().get(0).getGroupOperator().equals(BLCOperator.AND.name()));
  assert(dataWrapper.getData().get(0).getGroups().size() == 2);
  assert(dataWrapper.getData().get(0).getGroups().get(0) instanceof ExpressionDTO);
  ExpressionDTO e1=(ExpressionDTO)dataWrapper.getData().get(0).getGroups().get(0);
  assert(e1.getName().equals("subTotal"));
  assert(e1.getOperator().equals(BLCOperator.GREATER_OR_EQUAL.name()));
  assert(e1.getValue().equals("100"));
  assert(dataWrapper.getData().get(0).getGroups().get(1) != null);
  DataDTO d1=dataWrapper.getData().get(0).getGroups().get(1);
  assert(d1.getGroupOperator().equals(BLCOperator.OR.name()));
  assert(d1.getGroups().get(0) instanceof ExpressionDTO);
  ExpressionDTO d1e1=(ExpressionDTO)d1.getGroups().get(0);
  assert(d1e1.getName().equals("currency.defaultFlag"));
  assert(d1e1.getOperator().equals(BLCOperator.EQUALS.name()));
  assert(d1e1.getValue().equals("true"));
  assert(d1.getGroups().get(1) instanceof ExpressionDTO);
  ExpressionDTO d1e2=(ExpressionDTO)d1.getGroups().get(1);
  assert(d1e2.getName().equals("locale.localeCode"));
  assert(d1e2.getOperator().equals(BLCOperator.EQUALS.name()));
  assert(d1e2.getValue().equals("my"));
}

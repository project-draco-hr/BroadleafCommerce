{
  if (className == null) {
    return null;
  }
  String convertedClassName=className.replace('/','.');
  if (xformTemplates.containsKey(convertedClassName)) {
    String xformKey=convertedClassName;
    String[] xformVals=xformTemplates.get(xformKey).split(",");
    logger.lifecycle(LifeCycleEvent.START,String.format("Transform - Copying annotations into [%s] from [%s]",xformKey,StringUtils.join(xformVals,",")));
    CtClass clazz=null;
    try {
      ClassPool classPool=ClassPool.getDefault();
      clazz=classPool.makeClass(new ByteArrayInputStream(classfileBuffer),false);
      clazz.defrost();
      for (      String xformVal : xformVals) {
        String trimmed=xformVal.trim();
        classPool.appendClassPath(new LoaderClassPath(Class.forName(trimmed).getClassLoader()));
        CtClass template=classPool.get(trimmed);
        CtField[] fieldsToCopy=template.getDeclaredFields();
        for (        CtField field : fieldsToCopy) {
          if (field.hasAnnotation(NonCopied.class)) {
            logger.debug(String.format("Not copying annotation from field [%s]",field.getName()));
          }
 else {
            logger.debug(String.format("Copying annotation from field [%s]",field.getName()));
            ConstPool constPool=clazz.getClassFile().getConstPool();
            CtField fieldFromMainClass=clazz.getField(field.getName());
            for (            Object o : field.getFieldInfo().getAttributes()) {
              if (o instanceof AnnotationsAttribute) {
                AnnotationsAttribute templateAnnotations=(AnnotationsAttribute)o;
                AnnotationsAttribute copied=(AnnotationsAttribute)templateAnnotations.copy(constPool,null);
                for (                Object attribute : fieldFromMainClass.getFieldInfo().getAttributes()) {
                  if (attribute instanceof AnnotationsAttribute) {
                    for (                    Annotation annotation : copied.getAnnotations()) {
                      ((AnnotationsAttribute)attribute).addAnnotation(annotation);
                    }
                  }
                }
              }
            }
          }
        }
      }
      logger.lifecycle(LifeCycleEvent.END,String.format("Transform - Copying annotations into [%s] from [%s]",xformKey,StringUtils.join(xformVals,",")));
      return clazz.toBytecode();
    }
 catch (    Exception e) {
      throw new RuntimeException("Unable to transform class",e);
    }
 finally {
      if (clazz != null) {
        clazz.detach();
      }
    }
  }
  return null;
}

{
  if (BLCMain.isLogDebugEnabled("classmetadata")) {
    Map<String,List<String>> props=new HashMap<String,List<String>>();
    for (    Property property : metadata.getProperties()) {
      String type=property.getMetadata().getInheritedFromType();
      List<String> myProps=props.get(type);
      if (myProps == null) {
        props.put(type,new ArrayList<String>());
        myProps=props.get(type);
      }
      myProps.add(property.getName());
    }
    for (    String key : props.keySet()) {
      List<String> myProps=props.get(key);
      for (      String prop : myProps) {
        BLCMain.logDebug(key + " : " + prop,"classmetadata");
      }
    }
  }
  Property[] properties=metadata.getProperties();
  if (overrideFieldSort) {
    Arrays.sort(properties,new Comparator<Property>(){
      public int compare(      Property o1,      Property o2){
        if (o1.getMetadata().getPresentationAttributes().getFriendlyName() == null && o2.getMetadata().getPresentationAttributes().getFriendlyName() == null) {
          return 0;
        }
 else         if (o1.getMetadata().getPresentationAttributes().getFriendlyName() == null) {
          return -1;
        }
 else         if (o2.getMetadata().getPresentationAttributes().getFriendlyName() == null) {
          return 1;
        }
 else {
          return o1.getMetadata().getPresentationAttributes().getFriendlyName().compareTo(o2.getMetadata().getPresentationAttributes().getFriendlyName());
        }
      }
    }
);
  }
  for (  Property property : metadata.getProperties()) {
    String mergedPropertyType=property.getMetadata().getMergedPropertyType().toString();
    if (Arrays.binarySearch(includeTypes,MergedPropertyType.valueOf(mergedPropertyType)) >= 0) {
      Boolean isDirty=property.getIsDirty();
      String rawName=property.getName();
      String propertyName=rawName;
      String fieldType=property.getMetadata().getFieldType() == null ? null : property.getMetadata().getFieldType().toString();
      String secondaryFieldType=property.getMetadata().getSecondaryType() == null ? null : property.getMetadata().getSecondaryType().toString();
      Long length=property.getMetadata().getLength() == null ? null : property.getMetadata().getLength().longValue();
      Boolean required;
      if (property.getMetadata().getPresentationAttributes().getRequiredOverride() != null) {
        required=property.getMetadata().getPresentationAttributes().getRequiredOverride();
      }
 else {
        required=property.getMetadata().getRequired();
        if (required == null) {
          required=false;
        }
      }
      Boolean mutable=property.getMetadata().getMutable();
      String inheritedFromType=property.getMetadata().getInheritedFromType();
      String[] availableToTypes=property.getMetadata().getAvailableToTypes();
      String foreignKeyClass=property.getMetadata().getForeignKeyClass();
      String foreignKeyProperty=property.getMetadata().getForeignKeyProperty();
      String friendlyName=property.getMetadata().getPresentationAttributes().getFriendlyName();
      if (friendlyName == null || friendlyName.equals("")) {
        friendlyName=property.getName();
      }
 else {
        friendlyName=getLocalizedString(friendlyName);
      }
      String securityLevel=property.getMetadata().getPresentationAttributes().getSecurityLevel();
      VisibilityEnum visibility=property.getMetadata().getPresentationAttributes().getVisibility();
      if (visibility == null) {
        visibility=VisibilityEnum.HIDDEN_ALL;
      }
      Boolean hidden=visibility == VisibilityEnum.HIDDEN_ALL || visibility == VisibilityEnum.GRID_HIDDEN;
      FormHiddenEnum formHidden;
switch (visibility) {
case FORM_HIDDEN:
        formHidden=FormHiddenEnum.HIDDEN;
      break;
default :
    formHidden=FormHiddenEnum.NOT_SPECIFIED;
  break;
case GRID_HIDDEN:
formHidden=FormHiddenEnum.VISIBLE;
break;
}
String group=property.getMetadata().getPresentationAttributes().getGroup();
if (group != null && !group.equals("")) {
group=getLocalizedString(group);
}
Integer groupOrder=property.getMetadata().getPresentationAttributes().getGroupOrder();
Boolean groupCollapsed=property.getMetadata().getPresentationAttributes().getGroupCollapsed();
String tooltip=property.getMetadata().getPresentationAttributes().getTooltip();
if (tooltip != null && !tooltip.equals("")) {
tooltip=getLocalizedString(tooltip);
}
String helpText=property.getMetadata().getPresentationAttributes().getHelpText();
if (helpText != null && !helpText.equals("")) {
helpText=getLocalizedString(helpText);
}
String hint=property.getMetadata().getPresentationAttributes().getHint();
if (hint != null && !hint.equals("")) {
hint=getLocalizedString(hint);
}
Boolean largeEntry=property.getMetadata().getPresentationAttributes().isLargeEntry();
Boolean prominent=property.getMetadata().getPresentationAttributes().isProminent();
Integer order=property.getMetadata().getPresentationAttributes().getOrder();
String columnWidth=property.getMetadata().getPresentationAttributes().getColumnWidth();
String[][] enumerationValues=property.getMetadata().getEnumerationValues();
String enumerationClass=property.getMetadata().getEnumerationClass();
if (mutable) {
Boolean isReadOnly=property.getMetadata().getPresentationAttributes().getReadOnly();
if (isReadOnly != null) {
mutable=!isReadOnly;
}
}
DataSourceField field;
switch (SupportedFieldType.valueOf(fieldType)) {
case ID:
field=new DataSourceTextField(propertyName,friendlyName);
if (propertyName.indexOf(".") < 0) {
field.setPrimaryKey(true);
}
field.setCanEdit(false);
field.setRequired(required);
break;
case BOOLEAN:
field=new DataSourceBooleanField(propertyName,friendlyName);
field.setCanEdit(mutable);
break;
case DATE:
field=new DataSourceDateTimeField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case INTEGER:
field=new DataSourceIntegerField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case DECIMAL:
field=new DataSourceFloatField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case EMAIL:
field=new DataSourceTextField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case MONEY:
field=new DataSourceFloatField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case FOREIGN_KEY:
{
field=new DataSourceTextField(propertyName,friendlyName);
field.setCanEdit(mutable);
String dataSourceName=null;
ForeignKey foreignField=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
if (foreignField != null && foreignField.getForeignKeyClass().equals(foreignKeyClass)) {
dataSourceName=foreignField.getDataSourceName();
}
if (dataSourceName == null) {
field.setForeignKey(foreignKeyProperty);
}
 else {
field.setForeignKey(dataSourceName + "." + foreignKeyProperty);
}
if (hidden == null) {
hidden=true;
}
field.setRequired(required);
break;
}
case ADDITIONAL_FOREIGN_KEY:
{
field=new DataSourceTextField(propertyName,friendlyName);
field.setCanEdit(mutable);
if (hidden == null) {
hidden=true;
}
field.setRequired(required);
break;
}
case BROADLEAF_ENUMERATION:
field=new DataSourceEnumField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
LinkedHashMap<String,String> valueMap=new LinkedHashMap<String,String>();
for (int j=0; j < enumerationValues.length; j++) {
valueMap.put(enumerationValues[j][0],enumerationValues[j][1]);
}
field.setValueMap(valueMap);
break;
case EXPLICIT_ENUMERATION:
field=new DataSourceEnumField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
LinkedHashMap<String,String> valueMap2=new LinkedHashMap<String,String>();
for (int j=0; j < enumerationValues.length; j++) {
valueMap2.put(enumerationValues[j][0],enumerationValues[j][1]);
}
field.setValueMap(valueMap2);
break;
case PASSWORD:
field=new DataSourcePasswordField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case ASSET:
field=new DataSourceImageField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
default :
field=new DataSourceTextField(propertyName,friendlyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
}
field.setAttribute("friendlyName",friendlyName);
if (property.getMetadata().getPresentationAttributes().getValidationConfigurations().size() > 0) {
field.setValidators(ValidationFactoryManager.getInstance().createValidators(property.getMetadata().getPresentationAttributes().getValidationConfigurations(),propertyName));
}
if (fieldType.equals(SupportedFieldType.ID.toString())) {
field.setHidden(hidden);
field.setAttribute("permanentlyHidden",hidden);
formHidden=FormHiddenEnum.VISIBLE;
}
 else if (hidden != null) {
field.setHidden(hidden);
field.setAttribute("permanentlyHidden",hidden);
}
 else if (field.getAttribute("permanentlyHidden") == null) {
field.setHidden(false);
field.setAttribute("permanentlyHidden",false);
}
if (securityLevel != null && !"".equals(securityLevel)) {
String uniqueID=ceilingEntityFullyQualifiedClassname + field.getName();
SecurityManager.getInstance().registerField(uniqueID,securityLevel);
field.setAttribute("uniqueID",uniqueID);
field.setAttribute("securityLevel",securityLevel);
}
field.setAttribute("formHidden",formHidden);
if (group != null) {
field.setAttribute("formGroup",group);
}
if (groupOrder != null) {
field.setAttribute("formGroupOrder",groupOrder);
}
if (groupCollapsed != null) {
field.setAttribute("formGroupCollapsed",groupCollapsed);
}
if (tooltip != null) {
field.setPrompt(tooltip);
}
if (helpText != null) {
field.setAttribute("helpText",helpText);
}
if (hint != null) {
field.setAttribute("hint",hint);
}
if (largeEntry != null) {
field.setAttribute("largeEntry",largeEntry);
}
if (prominent != null) {
field.setAttribute("prominent",prominent);
}
if (order != null) {
field.setAttribute("presentationLayerOrder",order);
}
if (length != null) {
field.setLength(length.intValue());
}
if (columnWidth != null) {
field.setAttribute("columnWidth",columnWidth);
}
if (enumerationValues != null) {
field.setAttribute("enumerationValues",enumerationValues);
}
if (enumerationValues != null) {
field.setAttribute("enumerationValues",enumerationValues);
}
if (enumerationClass != null) {
field.setAttribute("enumerationClass",enumerationClass);
}
if (isDirty != null) {
field.setAttribute("isEdited",isDirty);
}
 else {
field.setAttribute("isEdited",false);
}
field.setAttribute("inheritedFromType",inheritedFromType);
field.setAttribute("availableToTypes",availableToTypes);
field.setAttribute("fieldType",fieldType);
field.setAttribute("secondaryFieldType",secondaryFieldType);
field.setAttribute("mergedPropertyType",mergedPropertyType);
field.setAttribute("rawName",rawName);
dataSource.addField(field);
}
}
dataSource.setAttribute("blcCurrencyCode",metadata.getCurrencyCode(),true);
}

{
  int k=0;
  Entity[] targetItemCriterias=new Entity[quantityBasedRules.size()];
  for (  QuantityBasedRule quantityBasedRule : quantityBasedRules) {
    Property[] properties=new Property[3];
    Property mvelProperty=new Property();
    mvelProperty.setName("matchRule");
    mvelProperty.setValue(quantityBasedRule.getMatchRule());
    Property quantityProperty=new Property();
    quantityProperty.setName("quantity");
    quantityProperty.setValue(quantityBasedRule.getQuantity().toString());
    Property idProperty=new Property();
    idProperty.setName("id");
    Long id=quantityBasedRule.getId();
    if (extensionManager != null) {
      ExtensionResultHolder<Long> resultHolder=new ExtensionResultHolder<Long>();
      ExtensionResultStatusType result=extensionManager.getProxy().transformId(quantityBasedRule,resultHolder);
      if (ExtensionResultStatusType.NOT_HANDLED != result && resultHolder.getResult() != null) {
        id=resultHolder.getResult();
      }
    }
    idProperty.setValue(String.valueOf(id));
    properties[0]=mvelProperty;
    properties[1]=quantityProperty;
    properties[2]=idProperty;
    Entity criteria=new Entity();
    criteria.setProperties(properties);
    targetItemCriterias[k]=criteria;
    k++;
  }
  String json;
  try {
    DataWrapper oiWrapper=translator.createRuleData(targetItemCriterias,"matchRule","quantity","id",ruleBuilderFieldServiceFactory.createInstance(fieldService));
    json=mapper.writeValueAsString(oiWrapper);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  Property p=new Property();
  p.setName(jsonProp);
  p.setValue(json);
  return p;
}

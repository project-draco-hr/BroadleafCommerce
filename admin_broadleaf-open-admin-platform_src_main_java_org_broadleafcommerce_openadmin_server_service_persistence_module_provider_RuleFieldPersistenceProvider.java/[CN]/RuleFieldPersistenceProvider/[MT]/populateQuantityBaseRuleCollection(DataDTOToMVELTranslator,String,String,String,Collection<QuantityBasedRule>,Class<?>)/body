{
  boolean dirty=false;
  if (!StringUtils.isEmpty(jsonPropertyValue)) {
    DataWrapper dw=convertJsonToDataWrapper(jsonPropertyValue);
    if (dw != null && StringUtils.isEmpty(dw.getError())) {
      List<QuantityBasedRule> updatedRules=new ArrayList<QuantityBasedRule>();
      for (      DataDTO dto : dw.getData()) {
        if (dto.getId() != null) {
          checkId: {
            for (            QuantityBasedRule quantityBasedRule : criteriaList) {
              if (dto.getId().equals(quantityBasedRule.getId())) {
                if (!quantityBasedRule.getQuantity().equals(dto.getQuantity())) {
                  quantityBasedRule.setQuantity(dto.getQuantity());
                  dirty=true;
                }
                try {
                  String mvel=translator.createMVEL(entityKey,dto,ruleBuilderFieldServiceFactory.createInstance(fieldService));
                  if (!quantityBasedRule.getMatchRule().equals(mvel)) {
                    quantityBasedRule.setMatchRule(mvel);
                    dirty=true;
                  }
                }
 catch (                MVELTranslationException e) {
                  throw new RuntimeException(e);
                }
                updatedRules.add(quantityBasedRule);
                break checkId;
              }
            }
            throw new IllegalArgumentException("Unable to update the rule of type (" + memberType.getName() + ") because an update was requested for id ("+ dto.getId()+ "), which does not exist.");
          }
        }
 else {
          QuantityBasedRule quantityBasedRule;
          try {
            quantityBasedRule=(QuantityBasedRule)memberType.newInstance();
            quantityBasedRule.setQuantity(dto.getQuantity());
            quantityBasedRule.setMatchRule(translator.createMVEL(entityKey,dto,ruleBuilderFieldServiceFactory.createInstance(fieldService)));
            if (StringUtils.isEmpty(quantityBasedRule.getMatchRule()) && !StringUtils.isEmpty(dw.getRawMvel())) {
              quantityBasedRule.setMatchRule(dw.getRawMvel());
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          criteriaList.add(quantityBasedRule);
          updatedRules.add(quantityBasedRule);
          dirty=true;
        }
      }
      Iterator<QuantityBasedRule> itr=criteriaList.iterator();
      while (itr.hasNext()) {
        checkForRemove: {
          QuantityBasedRule original=itr.next();
          for (          QuantityBasedRule quantityBasedRule : updatedRules) {
            if (original.equals(quantityBasedRule)) {
              break checkForRemove;
            }
          }
          itr.remove();
          dirty=true;
        }
      }
    }
  }
  return dirty;
}

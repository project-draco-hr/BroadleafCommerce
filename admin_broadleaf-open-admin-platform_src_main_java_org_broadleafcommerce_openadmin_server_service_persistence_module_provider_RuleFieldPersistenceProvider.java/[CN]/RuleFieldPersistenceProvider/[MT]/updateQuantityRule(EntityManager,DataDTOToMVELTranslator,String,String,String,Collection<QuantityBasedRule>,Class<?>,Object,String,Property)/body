{
  boolean dirty=false;
  if (!StringUtils.isEmpty(jsonPropertyValue)) {
    criteriaList.size();
    DataWrapper dw=convertJsonToDataWrapper(jsonPropertyValue);
    if (dw != null && StringUtils.isEmpty(dw.getError())) {
      List<QuantityBasedRule> updatedRules=new ArrayList<QuantityBasedRule>();
      for (      DataDTO dto : dw.getData()) {
        if (dto.getId() != null && !CollectionUtils.isEmpty(criteriaList)) {
          checkId: {
            for (            QuantityBasedRule quantityBasedRule : criteriaList) {
              Long id=sandBoxHelper.getOriginalId(em,quantityBasedRule);
              boolean isMatch=dto.getId().equals(id) || dto.getId().equals(quantityBasedRule.getId());
              if (isMatch) {
                String mvel;
                if (!quantityBasedRule.getQuantity().equals(dto.getQuantity())) {
                  dirty=true;
                }
                try {
                  mvel=translator.createMVEL(entityKey,dto,ruleBuilderFieldServiceFactory.createInstance(fieldService));
                  if (!quantityBasedRule.getMatchRule().equals(mvel)) {
                    dirty=true;
                  }
                }
 catch (                MVELTranslationException e) {
                  throw new RuntimeException(e);
                }
                if (!dirty && extensionManager != null) {
                  ExtensionResultHolder<Boolean> resultHolder=new ExtensionResultHolder<Boolean>();
                  ExtensionResultStatusType result=extensionManager.getProxy().establishDirtyState(quantityBasedRule,resultHolder);
                  if (ExtensionResultStatusType.NOT_HANDLED != result && resultHolder.getResult() != null) {
                    dirty=resultHolder.getResult();
                  }
                }
                if (dirty) {
                  quantityBasedRule=em.merge(quantityBasedRule);
                  quantityBasedRule.setQuantity(dto.getQuantity());
                  quantityBasedRule.setMatchRule(mvel);
                  if (extensionManager != null) {
                    extensionManager.getProxy().postUpdate(quantityBasedRule);
                  }
                }
                updatedRules.add(quantityBasedRule);
                break checkId;
              }
            }
            throw new IllegalArgumentException("Unable to update the rule of type (" + memberType.getName() + ") because an update was requested for id ("+ dto.getId()+ "), which does not exist.");
          }
        }
 else {
          QuantityBasedRule quantityBasedRule;
          try {
            quantityBasedRule=(QuantityBasedRule)memberType.newInstance();
            quantityBasedRule.setQuantity(dto.getQuantity());
            quantityBasedRule.setMatchRule(translator.createMVEL(entityKey,dto,ruleBuilderFieldServiceFactory.createInstance(fieldService)));
            if (StringUtils.isEmpty(quantityBasedRule.getMatchRule()) && !StringUtils.isEmpty(dw.getRawMvel())) {
              quantityBasedRule.setMatchRule(dw.getRawMvel());
            }
            PropertyUtils.setNestedProperty(quantityBasedRule,mappedBy,parent);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          em.persist(quantityBasedRule);
          dto.setId(quantityBasedRule.getId());
          if (extensionManager != null) {
            ExtensionResultHolder resultHolder=new ExtensionResultHolder();
            extensionManager.getProxy().postAdd(quantityBasedRule,resultHolder);
            if (resultHolder.getResult() != null) {
              quantityBasedRule=(QuantityBasedRule)resultHolder.getResult();
            }
          }
          updatedRules.add(quantityBasedRule);
          dirty=true;
        }
      }
      Iterator<QuantityBasedRule> itr=criteriaList.iterator();
      while (itr.hasNext()) {
        checkForRemove: {
          QuantityBasedRule original=itr.next();
          for (          QuantityBasedRule quantityBasedRule : updatedRules) {
            Long id=sandBoxHelper.getOriginalId(em,quantityBasedRule);
            boolean isMatch=original.getId().equals(id) || original.getId().equals(quantityBasedRule.getId());
            if (isMatch) {
              break checkForRemove;
            }
          }
          em.remove(original);
          dirty=true;
        }
      }
      ObjectMapper mapper=new ObjectMapper();
      String json;
      try {
        json=mapper.writeValueAsString(dw);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      property.setValue(json);
    }
  }
  return dirty;
}

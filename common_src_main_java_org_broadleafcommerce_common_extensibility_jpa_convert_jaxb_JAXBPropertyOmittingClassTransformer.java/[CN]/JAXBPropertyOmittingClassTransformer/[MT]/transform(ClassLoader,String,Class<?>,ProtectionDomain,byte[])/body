{
  if (classInfo.isEmpty()) {
    return null;
  }
  String convertedClassName=className.replace('/','.');
  HashSet<String> methodNames=classInfo.get(convertedClassName);
  if (methodNames != null && !methodNames.isEmpty()) {
    try {
      ClassFile classFile=new ClassFile(new DataInputStream(new ByteArrayInputStream(classfileBuffer)));
      ConstPool constantPool=classFile.getConstPool();
      AnnotationsAttribute annotationsAttribute=new AnnotationsAttribute(constantPool,AnnotationsAttribute.visibleTag);
      Annotation transientAnnotation=new Annotation(XmlTransient.class.getName(),constantPool);
      annotationsAttribute.addAnnotation(transientAnnotation);
      for (      String methodName : methodNames) {
        MethodInfo methodInfo=classFile.getMethod(methodName);
        if (methodInfo == null) {
          methodName=Character.toUpperCase(methodName.charAt(0)) + methodName.substring(1);
          String tmpMethodName="get" + methodName;
          methodInfo=classFile.getMethod(tmpMethodName);
          if (methodInfo == null) {
            tmpMethodName="is" + methodName;
            methodInfo=classFile.getMethod(tmpMethodName);
            if (methodInfo == null) {
              LOG.error("Error finding property of method associated with name " + methodName + " in class "+ convertedClassName+ ". Ignoring.");
              continue;
            }
          }
        }
        List<?> methodAttributes=methodInfo.getAttributes();
        Iterator<?> itr=methodAttributes.iterator();
        while (itr.hasNext()) {
          Object object=itr.next();
          if (AnnotationsAttribute.class.isAssignableFrom(object.getClass())) {
            AnnotationsAttribute attr=(AnnotationsAttribute)object;
            Annotation[] items=attr.getAnnotations();
            for (            Annotation annotation : items) {
              String typeName=annotation.getTypeName();
              if (!typeName.startsWith("javax.xml.bind.annotation")) {
                annotationsAttribute.addAnnotation(annotation);
              }
            }
            itr.remove();
          }
        }
        methodInfo.getAttributes().add(annotationsAttribute);
      }
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      DataOutputStream os=new DataOutputStream(bos);
      classFile.write(os);
      os.close();
      return bos.toByteArray();
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new IllegalClassFormatException("Unable to convert " + convertedClassName + ", to add XMLTransient annotations"+ e.getMessage());
    }
  }
  return null;
}

{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    String structuredContentTypeId=persistencePackage.getCustomCriteria()[1];
    StructuredContentType structuredContentType=structuredContentService.findStructuredContentTypeById(Long.valueOf(structuredContentTypeId));
    ClassMetadata metadata=new ClassMetadata();
    metadata.setCeilingType(StructuredContentType.class.getName());
    ClassTree entities=new ClassTree(StructuredContentTypeImpl.class.getName());
    metadata.setPolymorphicEntities(entities);
    int groupCount=1;
    int fieldCount=0;
    List<Property> propertiesList=new ArrayList<Property>();
    List<FieldGroup> groups=structuredContentType.getStructuredContentFieldTemplate().getFieldGroups();
    for (    FieldGroup group : groups) {
      List<FieldDefinition> definitions=group.getFieldDefinitions();
      for (      FieldDefinition definition : definitions) {
        Property property=new Property();
        property.setName(definition.getName());
        BasicFieldMetadata fieldMetadata=new BasicFieldMetadata();
        property.setMetadata(fieldMetadata);
        fieldMetadata.setFieldType(definition.getFieldType());
        fieldMetadata.setMutable(true);
        fieldMetadata.setInheritedFromType(StructuredContentTypeImpl.class.getName());
        fieldMetadata.setAvailableToTypes(new String[]{StructuredContentTypeImpl.class.getName()});
        fieldMetadata.setForeignKeyCollection(false);
        fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
        fieldMetadata.setLength(definition.getMaxLength());
        if (definition.getFieldEnumeration() != null && !CollectionUtils.isEmpty(definition.getFieldEnumeration().getEnumerationItems())) {
          int count=definition.getFieldEnumeration().getEnumerationItems().size();
          String[][] enumItems=new String[count][2];
          for (int j=0; j < count; j++) {
            FieldEnumerationItem item=definition.getFieldEnumeration().getEnumerationItems().get(j);
            enumItems[j][0]=item.getName();
            enumItems[j][1]=item.getFriendlyName();
          }
          fieldMetadata.setEnumerationValues(enumItems);
        }
        fieldMetadata.setName(definition.getName());
        fieldMetadata.setFriendlyName(definition.getFriendlyName());
        fieldMetadata.setSecurityLevel(definition.getSecurityLevel() == null ? "" : definition.getSecurityLevel());
        fieldMetadata.setOrder(fieldCount++);
        fieldMetadata.setVisibility(definition.getHiddenFlag() ? VisibilityEnum.HIDDEN_ALL : VisibilityEnum.VISIBLE_ALL);
        fieldMetadata.setGroup(group.getName());
        fieldMetadata.setGroupOrder(groupCount);
        fieldMetadata.setGroupCollapsed(group.getInitCollapsedFlag());
        fieldMetadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
        fieldMetadata.setLargeEntry(definition.getTextAreaFlag());
        fieldMetadata.setProminent(false);
        fieldMetadata.setColumnWidth(String.valueOf(definition.getColumnWidth()));
        fieldMetadata.setBroadleafEnumeration("");
        fieldMetadata.setReadOnly(false);
        if (definition.getValidationRegEx() != null) {
          Map<String,String> itemMap=new HashMap<String,String>();
          itemMap.put("regularExpression",definition.getValidationRegEx());
          itemMap.put(ConfigurationItem.ERROR_MESSAGE,definition.getValidationErrorMesageKey());
          fieldMetadata.getValidationConfigurations().put("org.broadleafcommerce.openadmin.server.service.persistence.validation.RegexPropertyValidator",itemMap);
        }
        propertiesList.add(property);
      }
      groupCount++;
      fieldCount=0;
    }
    Property property=new Property();
    property.setName("id");
    BasicFieldMetadata fieldMetadata=new BasicFieldMetadata();
    property.setMetadata(fieldMetadata);
    fieldMetadata.setFieldType(SupportedFieldType.ID);
    fieldMetadata.setSecondaryType(SupportedFieldType.INTEGER);
    fieldMetadata.setMutable(true);
    fieldMetadata.setInheritedFromType(StructuredContentTypeImpl.class.getName());
    fieldMetadata.setAvailableToTypes(new String[]{StructuredContentTypeImpl.class.getName()});
    fieldMetadata.setForeignKeyCollection(false);
    fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    fieldMetadata.setName("id");
    fieldMetadata.setFriendlyName("StructuredContentTypeCustomPersistenceHandler_ID");
    fieldMetadata.setSecurityLevel("");
    fieldMetadata.setVisibility(VisibilityEnum.HIDDEN_ALL);
    fieldMetadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
    fieldMetadata.setLargeEntry(false);
    fieldMetadata.setProminent(false);
    fieldMetadata.setColumnWidth("*");
    fieldMetadata.setBroadleafEnumeration("");
    fieldMetadata.setReadOnly(true);
    propertiesList.add(property);
    Property[] properties=new Property[propertiesList.size()];
    properties=propertiesList.toArray(properties);
    Arrays.sort(properties,new Comparator<Property>(){
      @Override public int compare(      Property o1,      Property o2){
        if (o1.getMetadata().getOrder() != null && o2.getMetadata().getOrder() != null) {
          return o1.getMetadata().getOrder().compareTo(o2.getMetadata().getOrder());
        }
 else         if (o1.getMetadata().getOrder() != null && o2.getMetadata().getOrder() == null) {
          return -1;
        }
 else         if (o1.getMetadata().getOrder() == null && o2.getMetadata().getOrder() != null) {
          return 1;
        }
 else         if (o1.getMetadata().getFriendlyName() != null && o2.getMetadata().getFriendlyName() != null) {
          return o1.getMetadata().getFriendlyName().compareTo(o2.getMetadata().getFriendlyName());
        }
 else {
          return o1.getName().compareTo(o2.getName());
        }
      }
    }
);
    metadata.setProperties(properties);
    DynamicResultSet results=new DynamicResultSet(metadata);
    return results;
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform inspect for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    String structuredContentId=persistencePackage.getCustomCriteria()[1];
    StructuredContent structuredContent=structuredContentService.findStructuredContentById(Long.valueOf(structuredContentId));
    Property[] properties=dynamicFieldUtil.buildDynamicPropertyList(structuredContent.getStructuredContentType().getStructuredContentFieldTemplate().getFieldGroups(),StructuredContentType.class);
    Map<String,FieldMetadata> md=new HashMap<String,FieldMetadata>();
    for (    Property property : properties) {
      md.put(property.getName(),property.getMetadata());
    }
    boolean validated=helper.validate(persistencePackage.getEntity(),null,md);
    if (!validated) {
      throw new ValidationException(persistencePackage.getEntity(),"Structured Content dynamic fields failed validation");
    }
    List<String> templateFieldNames=new ArrayList<String>(20);
    for (    FieldGroup group : structuredContent.getStructuredContentType().getStructuredContentFieldTemplate().getFieldGroups()) {
      for (      FieldDefinition def : group.getFieldDefinitions()) {
        templateFieldNames.add(def.getName());
      }
    }
    Map<String,String> dirtyFieldsOrigVals=new HashMap<String,String>();
    List<String> dirtyFields=new ArrayList<String>();
    Map<String,StructuredContentFieldXref> structuredContentFieldMap=structuredContent.getStructuredContentFieldXrefs();
    for (    Property property : persistencePackage.getEntity().getProperties()) {
      if (templateFieldNames.contains(property.getName())) {
        StructuredContentFieldXref scXref=structuredContentFieldMap.get(property.getName());
        if (scXref != null && scXref.getStructuredContentField() != null) {
          StructuredContentField structuredContentField=scXref.getStructuredContentField();
          boolean isDirty=(structuredContentField.getValue() == null && property.getValue() != null) || (structuredContentField.getValue() != null && property.getValue() == null);
          if (isDirty || (structuredContentField.getValue() != null && property.getValue() != null && !structuredContentField.getValue().trim().equals(property.getValue().trim()))) {
            dirtyFields.add(property.getName());
            dirtyFieldsOrigVals.put(property.getName(),structuredContentField.getValue());
            structuredContentField.setValue(property.getValue());
            scXref=dynamicEntityDao.merge(scXref);
          }
        }
 else {
          StructuredContentField structuredContentField=new StructuredContentFieldImpl();
          structuredContentField.setFieldKey(property.getName());
          structuredContentField.setValue(property.getValue());
          StructuredContentFieldXref scfx=new StructuredContentFieldXrefImpl();
          scfx.setStructuredContent(structuredContent);
          scfx.setKey(property.getName());
          scfx.setStrucuturedContentField(structuredContentField);
          scfx=dynamicEntityDao.persist(scfx);
          dirtyFields.add(property.getName());
        }
      }
    }
    List<String> removeItems=new ArrayList<String>();
    for (    String key : structuredContentFieldMap.keySet()) {
      if (persistencePackage.getEntity().findProperty(key) == null) {
        removeItems.add(key);
      }
    }
    if (removeItems.size() > 0) {
      for (      String removeKey : removeItems) {
        structuredContentFieldMap.remove(removeKey);
      }
    }
    Collections.sort(dirtyFields);
    Entity entity=fetchEntityBasedOnId(structuredContentId,dirtyFields);
    for (    Entry<String,String> entry : dirtyFieldsOrigVals.entrySet()) {
      entity.getPMap().get(entry.getKey()).setOriginalValue(entry.getValue());
      entity.getPMap().get(entry.getKey()).setOriginalDisplayValue(entry.getValue());
    }
    return entity;
  }
 catch (  ValidationException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

{
  Map<String,FieldMetadata> mergedProperties=new HashMap<String,FieldMetadata>();
  Boolean classAnnotatedPopulateManyToOneFields=null;
  Map<String,AdminPresentationOverride> presentationOverrides=new HashMap<String,AdminPresentationOverride>();
  for (int i=entities.length - 1; i >= 0; i--) {
    AdminPresentationOverrides myOverrides=entities[i].getAnnotation(AdminPresentationOverrides.class);
    if (myOverrides != null) {
      for (      AdminPresentationOverride myOverride : myOverrides.value()) {
        presentationOverrides.put(myOverride.name(),myOverride);
      }
    }
    AdminPresentationClass adminPresentationClass=entities[i].getAnnotation(AdminPresentationClass.class);
    if (adminPresentationClass != null && classAnnotatedPopulateManyToOneFields == null && adminPresentationClass.populateToOneFields() != PopulateToOneFieldsEnum.NOT_SPECIFIED) {
      classAnnotatedPopulateManyToOneFields=adminPresentationClass.populateToOneFields() == PopulateToOneFieldsEnum.TRUE;
    }
  }
  if (classAnnotatedPopulateManyToOneFields != null) {
    populateManyToOneFields=classAnnotatedPopulateManyToOneFields;
  }
  buildPropertiesFromPolymorphicEntities(entities,foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,populateManyToOneFields,includeFields,excludeFields,configurationKey,removeItems,ceilingEntityFullyQualifiedClassname,mergedProperties,prefix);
  for (  String propertyName : presentationOverrides.keySet()) {
    AdminPresentation annot=presentationOverrides.get(propertyName).value();
    for (    String key : mergedProperties.keySet()) {
      String testKey=prefix + key;
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && annot.excluded() && !removeItems.contains(propertyName)) {
        removeItems.add(propertyName);
        continue;
      }
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !annot.excluded() && removeItems.contains(propertyName)) {
        removeItems.remove(propertyName);
      }
      if (key.equals(propertyName)) {
        FieldMetadata metadata=mergedProperties.get(key);
        FieldPresentationAttributes attr=metadata.getPresentationAttributes();
        attr.setFriendlyName(annot.friendlyName());
        attr.setSecurityLevel(annot.securityLevel());
        attr.setHidden(annot.hidden());
        attr.setFormHidden(annot.formHidden());
        attr.setOrder(annot.order());
        attr.setExplicitFieldType(annot.fieldType());
        attr.setGroup(annot.group());
        attr.setGroupCollapsed(annot.groupCollapsed());
        attr.setGroupOrder(annot.groupOrder());
        attr.setLargeEntry(annot.largeEntry());
        attr.setProminent(annot.prominent());
        attr.setColumnWidth(annot.columnWidth());
        attr.setBroadleafEnumeration(annot.broadleafEnumeration());
        attr.setReadOnly(annot.readOnly());
        attr.setExcluded(annot.excluded());
        attr.setRequiredOverride(annot.requiredOverride() == RequiredOverride.IGNORED ? null : annot.requiredOverride() == RequiredOverride.REQUIRED ? true : false);
        if (annot.validationConfigurations().length != 0) {
          ValidationConfiguration[] configurations=annot.validationConfigurations();
          for (          ValidationConfiguration configuration : configurations) {
            ConfigurationItem[] items=configuration.configurationItems();
            Map<String,String> itemMap=new HashMap<String,String>();
            for (            ConfigurationItem item : items) {
              itemMap.put(item.itemName(),item.itemValue());
            }
            attr.getValidationConfigurations().put(configuration.validationImplementation(),itemMap);
          }
        }
      }
    }
  }
  if (metadataOverrides != null && configurationKey != null) {
    Map<String,Map<String,FieldMetadata>> configuredOverrides=metadataOverrides.get(configurationKey);
    if (configuredOverrides != null) {
      Map<String,FieldMetadata> entityOverrides=configuredOverrides.get(ceilingEntityFullyQualifiedClassname);
      if (entityOverrides != null) {
        for (        String propertyName : entityOverrides.keySet()) {
          FieldMetadata localMetadata=entityOverrides.get(propertyName);
          Boolean excluded=localMetadata.getPresentationAttributes().getExcluded();
          if (excluded == null) {
            excluded=false;
          }
          for (          String key : mergedProperties.keySet()) {
            String testKey=prefix + key;
            if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && excluded && !removeItems.contains(propertyName)) {
              removeItems.add(propertyName);
              continue;
            }
            if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !excluded && removeItems.contains(propertyName)) {
              removeItems.remove(propertyName);
            }
            if (key.equals(propertyName)) {
              FieldMetadata serverMetadata=mergedProperties.get(key);
              if (localMetadata.getPresentationAttributes().getFriendlyName() != null) {
                serverMetadata.getPresentationAttributes().setFriendlyName(localMetadata.getPresentationAttributes().getFriendlyName());
              }
              if (localMetadata.getPresentationAttributes().getSecurityLevel() != null) {
                serverMetadata.getPresentationAttributes().setSecurityLevel(localMetadata.getPresentationAttributes().getSecurityLevel());
              }
              if (localMetadata.getPresentationAttributes().isHidden() != null) {
                serverMetadata.getPresentationAttributes().setHidden(localMetadata.getPresentationAttributes().isHidden());
              }
              if (localMetadata.getPresentationAttributes().getFormHidden() != null) {
                serverMetadata.getPresentationAttributes().setFormHidden(localMetadata.getPresentationAttributes().getFormHidden());
              }
              if (localMetadata.getPresentationAttributes().getOrder() != null) {
                serverMetadata.getPresentationAttributes().setOrder(localMetadata.getPresentationAttributes().getOrder());
              }
              if (localMetadata.getPresentationAttributes().getExplicitFieldType() != null) {
                serverMetadata.getPresentationAttributes().setExplicitFieldType(localMetadata.getPresentationAttributes().getExplicitFieldType());
              }
              if (localMetadata.getPresentationAttributes().getGroup() != null) {
                serverMetadata.getPresentationAttributes().setGroup(localMetadata.getPresentationAttributes().getGroup());
              }
              if (localMetadata.getPresentationAttributes().getGroupCollapsed() != null) {
                serverMetadata.getPresentationAttributes().setGroupCollapsed(localMetadata.getPresentationAttributes().getGroupCollapsed());
              }
              if (localMetadata.getPresentationAttributes().getGroupOrder() != null) {
                serverMetadata.getPresentationAttributes().setGroupOrder(localMetadata.getPresentationAttributes().getGroupOrder());
              }
              if (localMetadata.getPresentationAttributes().isLargeEntry() != null) {
                serverMetadata.getPresentationAttributes().setLargeEntry(localMetadata.getPresentationAttributes().isLargeEntry());
              }
              if (localMetadata.getPresentationAttributes().isProminent() != null) {
                serverMetadata.getPresentationAttributes().setProminent(localMetadata.getPresentationAttributes().isProminent());
              }
              if (localMetadata.getPresentationAttributes().getColumnWidth() != null) {
                serverMetadata.getPresentationAttributes().setColumnWidth(localMetadata.getPresentationAttributes().getColumnWidth());
              }
              if (localMetadata.getPresentationAttributes().getBroadleafEnumeration() != null) {
                serverMetadata.getPresentationAttributes().setBroadleafEnumeration(localMetadata.getPresentationAttributes().getBroadleafEnumeration());
              }
              if (localMetadata.getPresentationAttributes().getReadOnly() != null) {
                serverMetadata.getPresentationAttributes().setReadOnly(localMetadata.getPresentationAttributes().getReadOnly());
              }
              if (localMetadata.getPresentationAttributes().getExcluded() != null) {
                serverMetadata.getPresentationAttributes().setExcluded(localMetadata.getPresentationAttributes().getExcluded());
              }
              if (localMetadata.getPresentationAttributes().getRequiredOverride() != null) {
                serverMetadata.getPresentationAttributes().setRequiredOverride(localMetadata.getPresentationAttributes().getRequiredOverride());
              }
              if (localMetadata.getPresentationAttributes().getValidationConfigurations() != null) {
                serverMetadata.getPresentationAttributes().setValidationConfigurations(localMetadata.getPresentationAttributes().getValidationConfigurations());
              }
            }
          }
        }
      }
    }
  }
  if (!ArrayUtils.isEmpty(includeFields)) {
    for (    String include : includeFields) {
      for (      String key : mergedProperties.keySet()) {
        String testKey=prefix + key;
        if (!(testKey.startsWith(include + ".") || testKey.equals(include))) {
          if (!removeItems.contains(include)) {
            removeItems.add(include);
          }
        }
 else {
          removeItems.remove(include);
        }
      }
    }
  }
 else   if (!ArrayUtils.isEmpty(excludeFields)) {
    for (    String exclude : excludeFields) {
      for (      String key : mergedProperties.keySet()) {
        String testKey=prefix + key;
        if (testKey.startsWith(exclude + ".") || testKey.equals(exclude)) {
          if (!removeItems.contains(exclude)) {
            removeItems.add(exclude);
          }
        }
 else {
          removeItems.remove(exclude);
        }
      }
    }
  }
  List<String> explicitRemoves=new ArrayList<String>();
  for (  String key : mergedProperties.keySet()) {
    String testKey=prefix + key;
    for (    String removeKey : removeItems) {
      if ((testKey.startsWith(removeKey + ".") || key.equals(removeKey)) && mergedProperties.get(key).getFieldType() != SupportedFieldType.FOREIGN_KEY && mergedProperties.get(key).getFieldType() != SupportedFieldType.ADDITIONAL_FOREIGN_KEY) {
        explicitRemoves.add(key);
      }
    }
  }
  for (  String removeKey : explicitRemoves) {
    mergedProperties.remove(removeKey);
  }
  return mergedProperties;
}

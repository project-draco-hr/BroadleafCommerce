{
  for (  Class<?> clazz : entities) {
    String cacheKey=getCacheKey(foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,populateManyToOneFields,clazz,configurationKey,isParentExcluded);
    Map<String,FieldMetadata> cacheData;
synchronized (this) {
      cacheData=(Map<String,FieldMetadata>)METADATA_CACHE.get(cacheKey);
      if (cacheData == null) {
        Map<String,FieldMetadata> props=getPropertiesForEntityClass(clazz,foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,prefix,isParentExcluded);
        for (        Class<?> clazz2 : entities) {
          if (!clazz2.getName().equals(clazz.getName())) {
            for (            Map.Entry<String,FieldMetadata> entry : props.entrySet()) {
              FieldMetadata metadata=entry.getValue();
              if (Class.forName(metadata.getInheritedFromType()).isAssignableFrom(clazz2)) {
                String[] both=(String[])ArrayUtils.addAll(metadata.getAvailableToTypes(),new String[]{clazz2.getName()});
                metadata.setAvailableToTypes(both);
              }
            }
          }
        }
        METADATA_CACHE.put(cacheKey,props);
        cacheData=props;
      }
    }
    Map<String,FieldMetadata> clonedCache=new HashMap<String,FieldMetadata>(cacheData.size());
    for (    Map.Entry<String,FieldMetadata> entry : cacheData.entrySet()) {
      clonedCache.put(entry.getKey(),entry.getValue().cloneFieldMetadata());
    }
    mergedProperties.putAll(clonedCache);
  }
}

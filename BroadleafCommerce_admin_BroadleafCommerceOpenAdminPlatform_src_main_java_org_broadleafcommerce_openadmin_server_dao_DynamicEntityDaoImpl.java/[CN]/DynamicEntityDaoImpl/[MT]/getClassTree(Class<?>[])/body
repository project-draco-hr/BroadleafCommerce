{
  ClassTree classTree=null;
  if (!ArrayUtils.isEmpty(polymorphicClasses)) {
    Class<?> topClass=polymorphicClasses[polymorphicClasses.length - 1];
    classTree=new ClassTree(topClass.getName());
    AdminPresentationClass classPresentation=topClass.getAnnotation(AdminPresentationClass.class);
    if (classPresentation != null) {
      String friendlyName=classPresentation.friendlyName();
      if (!StringUtils.isEmpty(friendlyName)) {
        classTree.setFriendlyName(friendlyName);
      }
    }
    for (int j=polymorphicClasses.length - 1; j >= 0; j--) {
      addClassToTree(polymorphicClasses[j],classTree);
    }
    classTree.finalizeStructure(1);
  }
  return classTree;
}

{
  Class<?>[] polymorphicEntities=getAllPolymorphicEntitiesFromCeiling(returnedClass);
  Map<String,FieldMetadata> newFields=getMergedProperties(ceilingEntityFullyQualifiedClassname,polymorphicEntities,foreignField,additionalNonPersistentProperties,additionalForeignFields,MergedPropertyType.PRIMARY,populateManyToOneFields,includeFields,excludeFields,configurationKey,removeItems,prefix + propertyName + ".");
  for (  FieldMetadata newMetadata : newFields.values()) {
    newMetadata.setInheritedFromType(targetClass.getName());
    newMetadata.setAvailableToTypes(new String[]{targetClass.getName()});
  }
  Map<String,FieldMetadata> convertedFields=new HashMap<String,FieldMetadata>();
  for (  String key : newFields.keySet()) {
    convertedFields.put(propertyName + "." + key,newFields.get(key));
    List<String> newRemoveItems=new ArrayList<String>();
    Iterator<String> itr=removeItems.iterator();
    while (itr.hasNext()) {
      String item=itr.next();
      if (propertyName.equals(item) || key.equals(item)) {
        itr.remove();
        newRemoveItems.add(propertyName + "." + key);
      }
    }
    removeItems.addAll(newRemoveItems);
  }
  fields.putAll(convertedFields);
}

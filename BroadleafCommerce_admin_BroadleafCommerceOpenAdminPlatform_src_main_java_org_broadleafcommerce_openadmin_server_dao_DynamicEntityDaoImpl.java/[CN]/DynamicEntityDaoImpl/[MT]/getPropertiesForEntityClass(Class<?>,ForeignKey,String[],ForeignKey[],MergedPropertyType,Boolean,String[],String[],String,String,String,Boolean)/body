{
  Map<String,FieldPresentationAttributes> presentationAttributes=getFieldPresentationAttributes(targetClass);
  if (isParentExcluded) {
    for (    String key : presentationAttributes.keySet()) {
      presentationAttributes.get(key).setExcluded(true);
    }
  }
  Map idMetadata=getIdMetadata(targetClass);
  Map<String,FieldMetadata> fields=new HashMap<String,FieldMetadata>();
  String idProperty=(String)idMetadata.get("name");
  List<String> propertyNames=getPropertyNames(targetClass);
  propertyNames.add(idProperty);
  Type idType=(Type)idMetadata.get("type");
  List<Type> propertyTypes=getPropertyTypes(targetClass);
  propertyTypes.add(idType);
  PersistentClass persistentClass=getPersistentClass(targetClass.getName());
  Iterator<Property> testIter=persistentClass.getPropertyIterator();
  List<Property> propertyList=new ArrayList<Property>();
  while (testIter.hasNext()) {
    Property property=testIter.next();
    if (property.getName().indexOf(".") >= 0) {
      throw new IllegalArgumentException("Properties from entities that utilize a period character ('.') in their name are incompatible with this system. The property name in question is: (" + property.getName() + ") from the class: ("+ targetClass.getName()+ ")");
    }
    propertyList.add(property);
  }
  buildProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,presentationAttributes,propertyList,fields,propertyNames,propertyTypes,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,prefix,isParentExcluded);
  FieldPresentationAttributes presentationAttribute=new FieldPresentationAttributes();
  presentationAttribute.setExplicitFieldType(SupportedFieldType.STRING);
  presentationAttribute.setVisibility(VisibilityEnum.HIDDEN_ALL);
  if (additionalNonPersistentProperties != null) {
    for (    String additionalNonPersistentProperty : additionalNonPersistentProperties) {
      fields.put(additionalNonPersistentProperty,getFieldMetadata(prefix,additionalNonPersistentProperty,propertyList,SupportedFieldType.STRING,null,targetClass,presentationAttribute,mergedPropertyType));
    }
  }
  return fields;
}

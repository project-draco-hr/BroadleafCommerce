{
  try {
    XPathFactory factory=XPathFactory.newInstance();
    XPath xPath=factory.newXPath();
    ArrayList<Node> exhaustedNodes1=new ArrayList<Node>();
    ArrayList<Node> exhaustedNodes2=new ArrayList<Node>();
    Document doc1=builder.parse(stream1);
    Document doc2=builder.parse(stream2);
    for (int j=0; j < this.handlers.length; j++) {
      MergeHandler temp=this.handlers[j];
      Node node1=(Node)xPath.evaluate(temp.getXPath(),doc1,XPathConstants.NODE);
      Node node2=(Node)xPath.evaluate(temp.getXPath(),doc2,XPathConstants.NODE);
      if (node1 != null && node2 != null && !exhaustedNodes1.contains(node1) && !exhaustedNodes2.contains(node2)) {
        exhaustedNodes1.add(node1);
        exhaustedNodes2.add(node2);
        temp.merge(node1,node2);
      }
    }
    TransformerFactory tFactory=TransformerFactory.newInstance();
    Transformer xmlTransformer=tFactory.newTransformer();
    xmlTransformer.setOutputProperty(OutputKeys.VERSION,"1.0");
    xmlTransformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");
    xmlTransformer.setOutputProperty(OutputKeys.METHOD,"xml");
    xmlTransformer.setOutputProperty(OutputKeys.INDENT,"yes");
    DOMSource source=new DOMSource(getCurrentDocument());
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(baos));
    StreamResult result=new StreamResult(writer);
    xmlTransformer.transform(source,result);
    return new ByteArrayInputStream(baos.toByteArray());
  }
 catch (  Throwable e) {
    throw new MergeException(e);
  }
 finally {
    clearDocument();
  }
}

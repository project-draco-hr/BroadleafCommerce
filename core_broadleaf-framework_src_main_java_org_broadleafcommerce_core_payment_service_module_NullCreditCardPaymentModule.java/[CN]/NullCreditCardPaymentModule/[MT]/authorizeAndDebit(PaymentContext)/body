{
  PaymentInfo paymentInfo=null;
  for (  PaymentInfo pi : paymentContext.getPaymentInfo().getOrder().getPaymentInfos()) {
    if (PaymentInfoType.CREDIT_CARD.equals(pi.getType())) {
      paymentInfo=pi;
    }
  }
  if (paymentInfo == null) {
    throw new PaymentException("PaymentInfo of type CREDIT_CARD must be on the order");
  }
  CreditCardPaymentInfo ccInfo=(CreditCardPaymentInfo)paymentContext.getReferencedPaymentInfo();
  String nameOnCard=ccInfo.getNameOnCard();
  String ccNumber=ccInfo.getPan().replaceAll("[\\s-]+","");
  Integer expMonth=ccInfo.getExpirationMonth();
  Integer expYear=ccInfo.getExpirationYear();
  String cvv=ccInfo.getCvvCode();
  CreditCardValidator visaValidator=new CreditCardValidator(CreditCardValidator.VISA);
  CreditCardValidator amexValidator=new CreditCardValidator(CreditCardValidator.AMEX);
  CreditCardValidator mcValidator=new CreditCardValidator(CreditCardValidator.MASTERCARD);
  CreditCardValidator discoverValidator=new CreditCardValidator(CreditCardValidator.DISCOVER);
  boolean validCard=false;
  String cardType="UNKNOWN";
  if (visaValidator.isValid(ccNumber)) {
    validCard=true;
    cardType="VISA";
  }
 else   if (amexValidator.isValid(ccNumber)) {
    validCard=true;
    cardType="AMEX";
  }
 else   if (mcValidator.isValid(ccNumber)) {
    validCard=true;
    cardType="MASTERCARD";
  }
 else   if (discoverValidator.isValid(ccNumber)) {
    validCard=true;
    cardType="DISCOVER";
  }
  DateTime expirationDate=new DateTime(expYear,expMonth,1,0,0);
  boolean validDate=expirationDate.isAfterNow();
  boolean validCVV=!cvv.equals("000");
  PaymentResponseItem responseItem=new PaymentResponseItemImpl();
  responseItem.setTransactionTimestamp(SystemTime.asDate());
  responseItem.setTransactionSuccess(validDate && validCard && validCVV);
  responseItem.setAmountPaid(paymentInfo.getAmount());
  responseItem.setCurrency(paymentInfo.getOrder().getCurrency());
  if (responseItem.getTransactionSuccess()) {
    Map<String,String> additionalFields=new HashMap<String,String>();
    additionalFields.put(PaymentInfoAdditionalFieldType.NAME_ON_CARD.getType(),nameOnCard);
    additionalFields.put(PaymentInfoAdditionalFieldType.CARD_TYPE.getType(),cardType);
    additionalFields.put(PaymentInfoAdditionalFieldType.EXP_MONTH.getType(),expMonth + "");
    additionalFields.put(PaymentInfoAdditionalFieldType.EXP_YEAR.getType(),expYear + "");
    additionalFields.put(PaymentInfoAdditionalFieldType.LAST_FOUR.getType(),StringUtils.right(ccNumber,4));
    paymentInfo.setAdditionalFields(additionalFields);
  }
 else {
    throw new PaymentException("Problem processing Credit Card.");
  }
  return responseItem;
}

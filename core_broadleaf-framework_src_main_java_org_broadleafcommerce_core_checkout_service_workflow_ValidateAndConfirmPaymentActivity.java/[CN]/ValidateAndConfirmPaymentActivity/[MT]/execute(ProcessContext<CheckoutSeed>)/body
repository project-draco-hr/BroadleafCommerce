{
  Order order=context.getSeedData().getOrder();
  Map<String,Object> rollbackState=new HashMap<String,Object>();
  Map<OrderPayment,PaymentTransaction> additionalTransactions=new HashMap<OrderPayment,PaymentTransaction>();
  List<PaymentResponseDTO> failedTransactions=new ArrayList<PaymentResponseDTO>();
  List<PaymentTransaction> confirmedTransactions=new ArrayList<PaymentTransaction>();
  Map<OrderPayment,PaymentTransactionType> additionalConfirmedTransactions=new HashMap<OrderPayment,PaymentTransactionType>();
  for (  OrderPayment payment : order.getPayments()) {
    if (payment.isActive()) {
      for (      PaymentTransaction tx : payment.getTransactions()) {
        if (PaymentTransactionType.UNCONFIRMED.equals(tx.getType())) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Transaction " + tx.getId() + " is not confirmed. Proceeding to confirm transaction.");
          }
          if (paymentConfigurationServiceProvider == null) {
            String msg="There are unconfirmed payment transactions on this payment but no payment gateway" + " configuration or transaction confirmation service configured";
            LOG.error(msg);
            throw new CheckoutException(msg,context.getSeedData());
          }
          PaymentGatewayConfigurationService cfg=paymentConfigurationServiceProvider.getGatewayConfigurationService(tx.getOrderPayment().getGatewayType());
          PaymentResponseDTO responseDTO=null;
          if (PaymentType.CREDIT_CARD.equals(payment.getType())) {
            PaymentRequestDTO s2sRequest=orderToPaymentRequestService.translatePaymentTransaction(payment.getAmount(),tx);
            populateCreditCardOnRequest(s2sRequest,payment);
            populateBillingAddressOnRequest(s2sRequest,payment);
            populateCustomerOnRequest(s2sRequest,payment);
            populateShippingAddressOnRequest(s2sRequest,payment);
            if (cfg.getConfiguration().isPerformAuthorizeAndCapture()) {
              responseDTO=cfg.getTransactionService().authorizeAndCapture(s2sRequest);
            }
 else {
              responseDTO=cfg.getTransactionService().authorize(s2sRequest);
            }
          }
 else {
            responseDTO=cfg.getTransactionConfirmationService().confirmTransaction(orderToPaymentRequestService.translatePaymentTransaction(payment.getAmount(),tx));
          }
          if (responseDTO == null) {
            String msg="Unable to Confirm/Authorize the UNCONFIRMED Transaction with id: " + tx.getId() + ". "+ "The ResponseDTO returned from the Gateway was null. Please check your implementation";
            LOG.error(msg);
            throw new CheckoutException(msg,context.getSeedData());
          }
          if (LOG.isTraceEnabled()) {
            LOG.trace("Transaction Confirmation Raw Response: " + responseDTO.getRawResponse());
          }
          if (responseDTO.getAmount() == null || responseDTO.getPaymentTransactionType() == null) {
            LOG.error("The ResponseDTO returned from the Gateway does not contain either an Amount or Payment Transaction Type. " + "Please check your implementation");
          }
          PaymentTransaction transaction=orderPaymentService.createTransaction();
          transaction.setAmount(responseDTO.getAmount());
          transaction.setRawResponse(responseDTO.getRawResponse());
          transaction.setSuccess(responseDTO.isSuccessful());
          transaction.setType(responseDTO.getPaymentTransactionType());
          transaction.setParentTransaction(tx);
          transaction.setOrderPayment(payment);
          transaction.setAdditionalFields(responseDTO.getResponseMap());
          additionalTransactions.put(payment,transaction);
          if (responseDTO.isSuccessful()) {
            additionalConfirmedTransactions.put(payment,transaction.getType());
          }
 else {
            failedTransactions.add(responseDTO);
          }
        }
 else         if (PaymentTransactionType.AUTHORIZE.equals(tx.getType()) || PaymentTransactionType.AUTHORIZE_AND_CAPTURE.equals(tx.getType())) {
          confirmedTransactions.add(tx);
        }
      }
    }
  }
  for (  OrderPayment payment : order.getPayments()) {
    if (additionalTransactions.containsKey(payment)) {
      PaymentTransactionType confirmedType=null;
      if (additionalConfirmedTransactions.containsKey(payment)) {
        confirmedType=additionalConfirmedTransactions.get(payment);
      }
      payment.addTransaction(additionalTransactions.get(payment));
      payment=orderPaymentService.save(payment);
      if (confirmedType != null) {
        List<PaymentTransaction> types=payment.getTransactionsForType(confirmedType);
        if (types.size() == 1) {
          confirmedTransactions.add(types.get(0));
        }
 else {
          throw new IllegalArgumentException("There should only be one AUTHORIZE or AUTHORIZE_AND_CAPTURE transaction." + "There are more than one confirmed payment transactions for Order Payment:" + payment.getId());
        }
      }
    }
  }
  rollbackState.put(CONFIRMED_TRANSACTIONS,confirmedTransactions);
  ActivityStateManagerImpl.getStateManager().registerState(this,context,getRollbackHandler(),rollbackState);
  if (!failedTransactions.isEmpty()) {
    handleUnsuccessfulTransactions(failedTransactions,context);
  }
  Money paymentSum=new Money(BigDecimal.ZERO);
  for (  OrderPayment payment : order.getPayments()) {
    if (payment.isActive()) {
      paymentSum=paymentSum.add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE)).add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE));
    }
  }
  if (paymentSum.lessThan(order.getTotal())) {
    throw new IllegalArgumentException("There are not enough payments to pay for the total order. The sum of " + "the payments is " + paymentSum.getAmount().toPlainString() + " and the order total is "+ order.getTotal().getAmount().toPlainString());
  }
  return context;
}

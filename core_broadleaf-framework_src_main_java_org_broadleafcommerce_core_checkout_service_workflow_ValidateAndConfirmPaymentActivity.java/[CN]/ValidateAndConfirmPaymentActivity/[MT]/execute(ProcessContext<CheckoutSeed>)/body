{
  Order order=context.getSeedData().getOrder();
  Map<OrderPayment,PaymentTransaction> additionalTransactions=new HashMap<OrderPayment,PaymentTransaction>();
  for (  OrderPayment payment : order.getPayments()) {
    for (    PaymentTransaction tx : payment.getTransactions()) {
      if (PaymentTransactionType.UNCONFIRMED.equals(tx.getType())) {
        if (LOG.isTraceEnabled()) {
          LOG.trace("Transaction is not confirmed. Proceeding to confirm transaction.");
        }
        if (paymentGatewayConfiguration == null || paymentGatewayConfiguration.getTransactionConfirmationService() == null) {
          String msg="There are unconfirmed payment transactions on this payment but no payment gateway" + " configuration or transaction confirmation service configured";
          LOG.error(msg);
          throw new CheckoutException(msg,context.getSeedData());
        }
 else {
          PaymentResponseDTO responseDTO=paymentGatewayConfiguration.getTransactionConfirmationService().confirmTransaction(orderToPaymentRequestService.translatePaymentTransaction(payment.getAmount(),tx));
          if (LOG.isTraceEnabled()) {
            LOG.trace("Transaction Confirmation Raw Response: " + responseDTO.getRawResponse());
          }
          if (responseDTO.isSuccessful()) {
            PaymentTransaction transaction=orderPaymentService.createTransaction();
            transaction.setAmount(responseDTO.getAmount());
            transaction.setRawResponse(responseDTO.getRawResponse());
            transaction.setSuccess(responseDTO.isSuccessful());
            transaction.setType(responseDTO.getPaymentTransactionType());
            transaction.setParentTransaction(tx);
            transaction.setOrderPayment(payment);
            additionalTransactions.put(payment,transaction);
          }
 else {
            String msg="Unable to Confirm Transaction with id: " + tx.getId();
            LOG.error(msg);
            throw new CheckoutException(msg,context.getSeedData());
          }
        }
      }
    }
  }
  for (  OrderPayment payment : order.getPayments()) {
    if (additionalTransactions.containsKey(payment)) {
      payment.addTransaction(additionalTransactions.get(payment));
    }
  }
  Money paymentSum=new Money(BigDecimal.ZERO);
  for (  OrderPayment payment : order.getPayments()) {
    paymentSum=paymentSum.add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE)).add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE));
  }
  if (paymentSum.lessThan(order.getTotal())) {
    throw new IllegalArgumentException("There are not enough payments to pay for the total order. The sum of " + "the payments is " + paymentSum.getAmount().toPlainString() + " and the order total is "+ order.getTotal().getAmount().toPlainString());
  }
  return context;
}

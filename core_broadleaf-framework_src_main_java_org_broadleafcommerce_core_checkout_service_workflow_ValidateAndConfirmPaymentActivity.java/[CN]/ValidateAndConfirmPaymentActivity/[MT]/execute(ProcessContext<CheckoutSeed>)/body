{
  Order order=context.getSeedData().getOrder();
  Map<String,Object> rollbackState=new HashMap<String,Object>();
  Map<OrderPayment,PaymentTransaction> additionalTransactions=new HashMap<OrderPayment,PaymentTransaction>();
  for (  OrderPayment payment : order.getPayments()) {
    for (    PaymentTransaction tx : payment.getTransactions()) {
      if (PaymentTransactionType.UNCONFIRMED.equals(tx.getType())) {
        if (LOG.isTraceEnabled()) {
          LOG.trace("Transaction " + tx.getId() + " is not confirmed. Proceeding to confirm transaction.");
        }
        if (paymentConfigurationServiceProvider == null) {
          String msg="There are unconfirmed payment transactions on this payment but no payment gateway" + " configuration or transaction confirmation service configured";
          LOG.error(msg);
          throw new CheckoutException(msg,context.getSeedData());
        }
        PaymentGatewayConfigurationService cfg=paymentConfigurationServiceProvider.getGatewayConfigurationService(tx.getOrderPayment().getGatewayType());
        PaymentResponseDTO responseDTO=cfg.getTransactionConfirmationService().confirmTransaction(orderToPaymentRequestService.translatePaymentTransaction(payment.getAmount(),tx));
        if (LOG.isTraceEnabled()) {
          LOG.trace("Transaction Confirmation Raw Response: " + responseDTO.getRawResponse());
        }
        if (responseDTO.isSuccessful()) {
          PaymentTransaction transaction=orderPaymentService.createTransaction();
          transaction.setAmount(responseDTO.getAmount());
          transaction.setRawResponse(responseDTO.getRawResponse());
          transaction.setSuccess(responseDTO.isSuccessful());
          transaction.setType(responseDTO.getPaymentTransactionType());
          transaction.setParentTransaction(tx);
          transaction.setOrderPayment(payment);
          additionalTransactions.put(payment,transaction);
        }
 else {
          String msg="Transaction confirmation attempt with id: " + tx.getId() + " was unsuccessful";
          LOG.error(msg);
          throw new CheckoutException(msg,context.getSeedData());
        }
        rollbackState.put(CONFIRMED_TRANSACTIONS,additionalTransactions.values());
        ActivityStateManagerImpl.getStateManager().registerState(this,context,getRollbackHandler(),rollbackState);
      }
    }
  }
  for (  OrderPayment payment : order.getPayments()) {
    if (additionalTransactions.containsKey(payment)) {
      payment.addTransaction(additionalTransactions.get(payment));
    }
  }
  Money paymentSum=new Money(BigDecimal.ZERO);
  for (  OrderPayment payment : order.getPayments()) {
    paymentSum=paymentSum.add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE)).add(payment.getSuccessfulTransactionAmountForType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE));
  }
  if (paymentSum.lessThan(order.getTotal())) {
    throw new IllegalArgumentException("There are not enough payments to pay for the total order. The sum of " + "the payments is " + paymentSum.getAmount().toPlainString() + " and the order total is "+ order.getTotal().getAmount().toPlainString());
  }
  return context;
}

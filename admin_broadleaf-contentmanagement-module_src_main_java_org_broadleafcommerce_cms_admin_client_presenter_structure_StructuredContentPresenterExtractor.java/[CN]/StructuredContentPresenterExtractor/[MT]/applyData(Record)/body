{
  try {
    final Map<String,Object> dirtyValues=new HashMap<String,Object>();
    extractData(selectedRecord,dirtyValues,StructuredContentPresenterInitializer.ATTRIBUTEMAP.get(FilterType.CUSTOMER),getDisplay().getCustomerFilterBuilder(),MVELKEYWORDMAP.get(FilterType.CUSTOMER));
    extractData(selectedRecord,dirtyValues,StructuredContentPresenterInitializer.ATTRIBUTEMAP.get(FilterType.PRODUCT),getDisplay().getProductFilterBuilder(),MVELKEYWORDMAP.get(FilterType.PRODUCT));
    extractData(selectedRecord,dirtyValues,StructuredContentPresenterInitializer.ATTRIBUTEMAP.get(FilterType.REQUEST),getDisplay().getRequestFilterBuilder(),MVELKEYWORDMAP.get(FilterType.REQUEST));
    extractData(selectedRecord,dirtyValues,StructuredContentPresenterInitializer.ATTRIBUTEMAP.get(FilterType.TIME),getDisplay().getTimeFilterBuilder(),MVELKEYWORDMAP.get(FilterType.TIME));
    extractQualifierData(null,true,dirtyValues);
    DSRequest requestProperties=new DSRequest();
    requestProperties.setAttribute("dirtyValues",dirtyValues);
    for (    String key : dirtyValues.keySet()) {
      getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().setValue(key,(String)dirtyValues.get(key));
    }
    getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().saveData(new DSCallback(){
      @Override public void execute(      DSResponse response,      Object rawData,      DSRequest request){
        if (response.getStatus() != RPCResponse.STATUS_FAILURE) {
          final String newId=response.getAttribute("newId");
          FormOnlyView legacyForm=(FormOnlyView)((FormOnlyView)getDisplay().getDynamicFormDisplay().getFormOnlyDisplay()).getMember("contentTypeForm");
          final DynamicForm form=legacyForm.getForm();
          for (          FormItem formItem : form.getFields()) {
            if (formItem instanceof RichTextCanvasItem) {
              form.setValue(formItem.getFieldName(),((RichTextHTMLPane)((RichTextCanvasItem)formItem).getCanvas()).getValue());
            }
          }
          StructuredContentTypeFormListDataSource dataSource=(StructuredContentTypeFormListDataSource)form.getDataSource();
          dataSource.setCustomCriteria(new String[]{"constructForm",newId});
          form.saveData(new DSCallback(){
            @Override public void execute(            DSResponse response,            Object rawData,            DSRequest request){
              if (response.getStatus() != RPCResponse.STATUS_FAILURE) {
                try {
                  extractQualifierData(newId,false,dirtyValues);
                  if (!presenter.currentStructuredContentId.equals(newId)) {
                    Record myRecord=getDisplay().getListDisplay().getGrid().getResultSet().find("id",presenter.currentStructuredContentId);
                    if (myRecord != null) {
                      myRecord.setAttribute("id",newId);
                      presenter.currentStructuredContentRecord=myRecord;
                      presenter.currentStructuredContentId=newId;
                    }
 else {
                      String primaryKey=getDisplay().getListDisplay().getGrid().getDataSource().getPrimaryKeyFieldName();
                      getDisplay().getListDisplay().getGrid().getDataSource().fetchData(new Criteria(primaryKey,newId),new DSCallback(){
                        @Override public void execute(                        DSResponse response,                        Object rawData,                        DSRequest request){
                          getDisplay().getListDisplay().getGrid().clearCriteria();
                          getDisplay().getListDisplay().getGrid().setData(response.getData());
                          getDisplay().getListDisplay().getGrid().selectRecord(0);
                        }
                      }
);
                      SC.say(BLCMain.getMessageManager().getString("criteriaDoesNotMatch"));
                    }
                  }
                  getDisplay().getListDisplay().getGrid().selectRecord(getDisplay().getListDisplay().getGrid().getRecordIndex(presenter.currentStructuredContentRecord));
                }
 catch (                IncompatibleMVELTranslationException e) {
                  SC.warn(e.getMessage());
                }
              }
            }
          }
);
        }
      }
    }
,requestProperties);
  }
 catch (  IncompatibleMVELTranslationException e) {
    SC.warn(e.getMessage());
  }
}

{
  Map<String,AdminPresentationOverride> presentationOverrides=new HashMap<String,AdminPresentationOverride>();
  Map<String,AdminPresentationToOneLookupOverride> presentationToOneLookupOverrides=new HashMap<String,AdminPresentationToOneLookupOverride>();
  Map<String,AdminPresentationDataDrivenEnumerationOverride> presentationDataDrivenEnumerationOverrides=new HashMap<String,AdminPresentationDataDrivenEnumerationOverride>();
  AdminPresentationOverrides myOverrides=entity.getAnnotation(AdminPresentationOverrides.class);
  if (myOverrides != null) {
    for (    AdminPresentationOverride myOverride : myOverrides.value()) {
      presentationOverrides.put(myOverride.name(),myOverride);
    }
    for (    AdminPresentationToOneLookupOverride myOverride : myOverrides.toOneLookups()) {
      presentationToOneLookupOverrides.put(myOverride.name(),myOverride);
    }
    for (    AdminPresentationDataDrivenEnumerationOverride myOverride : myOverrides.dataDrivenEnums()) {
      presentationDataDrivenEnumerationOverrides.put(myOverride.name(),myOverride);
    }
  }
  for (  String propertyName : presentationOverrides.keySet()) {
    for (    String key : mergedProperties.keySet()) {
      if (key.startsWith(propertyName)) {
        buildAdminPresentationOverride(prefix,isParentExcluded,mergedProperties,presentationOverrides,propertyName,key,dynamicEntityDao);
      }
    }
  }
  for (  String propertyName : presentationToOneLookupOverrides.keySet()) {
    for (    String key : mergedProperties.keySet()) {
      if (key.startsWith(propertyName)) {
        buildAdminPresentationToOneLookupOverride(mergedProperties,presentationToOneLookupOverrides,propertyName,key);
      }
    }
  }
  for (  String propertyName : presentationDataDrivenEnumerationOverrides.keySet()) {
    for (    String key : mergedProperties.keySet()) {
      if (key.startsWith(propertyName)) {
        buildAdminPresentationDataDrivenEnumerationOverride(mergedProperties,presentationDataDrivenEnumerationOverrides,propertyName,key,dynamicEntityDao);
      }
    }
  }
}

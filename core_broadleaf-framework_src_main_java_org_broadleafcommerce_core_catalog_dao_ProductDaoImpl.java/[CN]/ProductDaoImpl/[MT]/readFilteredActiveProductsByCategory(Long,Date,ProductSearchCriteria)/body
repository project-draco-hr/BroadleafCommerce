{
  CriteriaBuilder builder=em.getCriteriaBuilder();
  CriteriaQuery<Product> criteria=builder.createQuery(Product.class);
  Root<CategoryImpl> category=criteria.from(CategoryImpl.class);
  Join<Category,Product> product=category.join("allProducts");
  Path<Sku> sku=product.get("defaultSku");
  criteria.select(product);
  List<Predicate> restrictions=new ArrayList<Predicate>();
  restrictions.add(builder.equal(category.get("id"),categoryId));
  for (  Entry<String,String[]> entry : searchCriteria.getFilterCriteria().entrySet()) {
    String key=entry.getKey();
    List<String> eqValues=new ArrayList<String>();
    List<String[]> rangeValues=new ArrayList<String[]>();
    Path<?> pathToUse;
    if (key.contains("defaultSku.")) {
      pathToUse=sku;
      key=key.substring("defaultSku.".length());
    }
 else {
      pathToUse=product;
    }
    for (    String value : entry.getValue()) {
      if (value.contains("blcRange[")) {
        String[] rangeValue=new String[]{value.substring(value.indexOf("[") + 1,value.indexOf(":")),value.substring(value.indexOf(":") + 1,value.indexOf("]"))};
        rangeValues.add(rangeValue);
      }
 else {
        eqValues.add(value);
      }
    }
    if (eqValues.size() > 0) {
      restrictions.add(pathToUse.get(key).in(eqValues));
    }
    List<Predicate> rangeRestrictions=new ArrayList<Predicate>();
    for (    String[] range : rangeValues) {
      BigDecimal min=new BigDecimal(range[0]);
      BigDecimal max=null;
      if (range[1] != null && !range[1].equals("null")) {
        max=new BigDecimal(range[1]);
      }
      Predicate minRange=builder.greaterThan(pathToUse.get(key).as(BigDecimal.class),min);
      Predicate maxRange=null;
      if (max != null) {
        maxRange=builder.lessThan(pathToUse.get(key).as(BigDecimal.class),max);
        rangeRestrictions.add(builder.and(minRange,maxRange));
      }
 else {
        rangeRestrictions.add(minRange);
      }
    }
    if (rangeRestrictions.size() > 0) {
      restrictions.add(builder.or(rangeRestrictions.toArray(new Predicate[rangeRestrictions.size()])));
    }
  }
  restrictions.add(builder.or(builder.isNull(product.get("archiveStatus").get("archived")),builder.equal(product.get("archiveStatus").get("archived"),'N')));
  Date myDate=getDateFactoringInDateResolution(currentDate);
  restrictions.add(builder.lessThan(sku.get("activeStartDate").as(Date.class),myDate));
  restrictions.add(builder.or(builder.isNull(sku.get("activeEndDate")),builder.greaterThan(sku.get("activeEndDate").as(Date.class),myDate)));
  criteria.where(restrictions.toArray(new Predicate[restrictions.size()]));
  return (List<Product>)em.createQuery(criteria).getResultList();
}

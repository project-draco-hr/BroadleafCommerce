{
  for (  Map.Entry<String,FieldMetadata> entry : presentationAttributes.entrySet()) {
    if (entry.getKey().startsWith(propertyName + FieldManager.MAPFIELDSEPARATOR)) {
      TypeLocatorImpl typeLocator=new TypeLocatorImpl(new TypeResolver());
      Type myType=null;
      String valueClass=((BasicFieldMetadata)entry.getValue()).getMapFieldValueClass();
      if (valueClass != null) {
        myType=typeLocator.entity(valueClass);
      }
      if (myType == null) {
        SupportedFieldType fieldType=((BasicFieldMetadata)entry.getValue()).getExplicitFieldType();
        Class<?> basicJavaType=getBasicJavaType(fieldType);
        if (basicJavaType != null) {
          myType=typeLocator.basic(basicJavaType);
        }
      }
      if (myType == null) {
        java.lang.reflect.Type genericType=field.getGenericType();
        if (genericType instanceof ParameterizedType) {
          ParameterizedType pType=(ParameterizedType)genericType;
          Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[1];
          Class<?>[] entities=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(clazz);
          if (!ArrayUtils.isEmpty(entities)) {
            myType=typeLocator.entity(entities[entities.length - 1]);
          }
        }
      }
      if (myType == null) {
        throw new IllegalArgumentException("Unable to establish the type for the property (" + entry.getKey() + ")");
      }
      super.buildProperty(field,targetClass,foreignField,additionalForeignFields,mergedPropertyType,componentProperties,fields,idProperty,prefix,entry.getKey(),myType,isPropertyForeignKey,additionalForeignKeyIndexPosition,presentationAttributes,entry.getValue(),((BasicFieldMetadata)entry.getValue()).getExplicitFieldType(),myType.getReturnedClass(),dynamicEntityDao);
    }
  }
}

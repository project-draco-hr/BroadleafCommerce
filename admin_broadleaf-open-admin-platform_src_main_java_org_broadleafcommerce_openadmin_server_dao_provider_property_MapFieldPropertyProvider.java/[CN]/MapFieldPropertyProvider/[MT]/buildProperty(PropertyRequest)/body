{
  for (  Map.Entry<String,FieldMetadata> entry : propertyRequest.getPresentationAttributes().entrySet()) {
    if (entry.getKey().startsWith(propertyRequest.getRequestedPropertyName() + FieldManager.MAPFIELDSEPARATOR)) {
      TypeLocatorImpl typeLocator=new TypeLocatorImpl(new TypeResolver());
      Type myType=null;
      String valueClass=((BasicFieldMetadata)entry.getValue()).getMapFieldValueClass();
      if (valueClass != null) {
        myType=typeLocator.entity(valueClass);
      }
      if (myType == null) {
        SupportedFieldType fieldType=((BasicFieldMetadata)entry.getValue()).getExplicitFieldType();
        Class<?> basicJavaType=getBasicJavaType(fieldType);
        if (basicJavaType != null) {
          myType=typeLocator.basic(basicJavaType);
        }
      }
      if (myType == null) {
        java.lang.reflect.Type genericType=propertyRequest.getRequestedField().getGenericType();
        if (genericType instanceof ParameterizedType) {
          ParameterizedType pType=(ParameterizedType)genericType;
          Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[1];
          Class<?>[] entities=propertyRequest.getDynamicEntityDao().getAllPolymorphicEntitiesFromCeiling(clazz);
          if (!ArrayUtils.isEmpty(entities)) {
            myType=typeLocator.entity(entities[entities.length - 1]);
          }
        }
      }
      if (myType == null) {
        throw new IllegalArgumentException("Unable to establish the type for the property (" + entry.getKey() + ")");
      }
      super.buildProperty(new PropertyRequest(propertyRequest.getRequestedField(),propertyRequest.getTargetClass(),propertyRequest.getForeignField(),propertyRequest.getAdditionalForeignFields(),propertyRequest.getMergedPropertyType(),propertyRequest.getComponentProperties(),propertyRequest.getRequestedProperties(),propertyRequest.getIdProperty(),propertyRequest.getPrefix(),entry.getKey(),myType,propertyRequest.isPropertyForeignKey(),propertyRequest.getAdditionalForeignKeyIndexPosition(),propertyRequest.getPresentationAttributes(),entry.getValue(),((BasicFieldMetadata)entry.getValue()).getExplicitFieldType(),myType.getReturnedClass(),propertyRequest.getDynamicEntityDao()));
    }
  }
}

{
  BLCMain.NON_MODAL_PROGRESS.startProgress();
  JavaScriptObject data=request.getData();
  TreeNode record=new TreeNode(data);
  record.setAttribute("_type",new String[]{((DynamicEntityDataSource)dataSource).getDefaultNewEntityFullyQualifiedClassname()});
  Entity entity=buildEntity(record,request);
  service.remove(new PersistencePackage(ceilingEntityFullyQualifiedClassname,entity,persistencePerspective,customCriteria,BLCMain.csrfToken),new EntityServiceAsyncCallback<Void>(EntityOperationType.REMOVE,requestId,request,response,dataSource){
    public void onSuccess(    Void item){
      super.onSuccess(null);
      if (cb != null) {
        cb.onSuccess(dataSource);
      }
      dataSource.processResponse(requestId,response);
    }
    @Override protected void onSecurityException(    ApplicationSecurityException exception){
      super.onSecurityException(exception);
      if (cb != null) {
        cb.onFailure(exception);
      }
    }
    @Override protected void onOtherException(    Throwable exception){
      super.onOtherException(exception);
      if (cb != null) {
        cb.onFailure(exception);
      }
    }
    @Override protected void onError(    EntityOperationType opType,    String requestId,    DSRequest request,    DSResponse response,    Throwable caught){
      super.onError(opType,requestId,request,response,caught);
      if (cb != null) {
        cb.onFailure(caught);
      }
    }
  }
);
}

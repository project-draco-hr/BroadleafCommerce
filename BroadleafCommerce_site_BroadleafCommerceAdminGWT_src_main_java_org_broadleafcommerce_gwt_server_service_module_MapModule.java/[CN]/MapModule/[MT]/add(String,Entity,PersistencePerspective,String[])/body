{
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for add types other than ENTITY");
  }
  try {
    MapStructure mapStructure=(MapStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
    Serializable instance=dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),Long.valueOf(entity.findProperty("symbolicId").getValue()));
    FieldManager fieldManager=getFieldManager();
    Map map=(Map)fieldManager.getFieldValue(instance,mapStructure.getMapProperty());
    PersistentClass persistentClass=dynamicEntityDao.getPersistentClass(mapStructure.getValueClassName());
    Map<String,FieldMetadata> valueMergedProperties;
    if (persistentClass == null) {
      valueMergedProperties=dynamicEntityDao.getPropertiesForPrimitiveClass(((SimpleValueMapStructure)mapStructure).getValuePropertyName(),((SimpleValueMapStructure)mapStructure).getValuePropertyFriendlyName(),Class.forName(mapStructure.getValueClassName()),Class.forName(entity.getType()[0]),MergedPropertyType.MAPSTRUCTUREVALUE,null);
    }
 else {
      valueMergedProperties=dynamicEntityDao.getMergedProperties(mapStructure.getValueClassName(),new Class[]{Class.forName(mapStructure.getValueClassName())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.MAPSTRUCTUREVALUE,persistencePerspective.getPopulateManyToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),null);
    }
    Serializable valueInstance=(Serializable)Class.forName(mapStructure.getValueClassName()).newInstance();
    valueInstance=createPopulatedInstance(valueInstance,entity,valueMergedProperties,false);
    valueInstance=dynamicEntityDao.persist(valueInstance);
    map.put(entity.findProperty(mapStructure.getKeyPropertyName()).getValue(),valueInstance);
    instance=dynamicEntityDao.merge(instance);
    return getMapRecords(instance,mapStructure,valueMergedProperties,entity.findProperty("symbolicId"))[0];
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

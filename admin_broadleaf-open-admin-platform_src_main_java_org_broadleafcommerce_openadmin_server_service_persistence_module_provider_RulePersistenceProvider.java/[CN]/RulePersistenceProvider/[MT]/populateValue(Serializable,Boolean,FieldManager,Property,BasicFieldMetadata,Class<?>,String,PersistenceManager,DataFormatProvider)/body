{
  try {
switch (metadata.getFieldType()) {
case RULE_WITH_QUANTITY:
{
        Class<?> valueType=getListFieldType(instance,fieldManager,property,persistenceManager);
        if (valueType == null) {
          throw new IllegalAccessException("Unable to determine the valueType for the rule field (" + property.getName() + ")");
        }
        DataDTOToMVELTranslator translator=new DataDTOToMVELTranslator();
        Collection<QuantityBasedRule> rules;
        try {
          rules=(Collection<QuantityBasedRule>)fieldManager.getFieldValue(instance,property.getName());
        }
 catch (        FieldNotAvailableException e) {
          throw new IllegalArgumentException(e);
        }
        populateQuantityBaseRuleCollection(translator,RuleIdentifier.ENTITY_KEY_MAP.get(metadata.getRuleIdentifier()),metadata.getRuleIdentifier(),value,rules,valueType);
        break;
      }
case RULE_SIMPLE:
{
      DataDTOToMVELTranslator translator=new DataDTOToMVELTranslator();
      String mvel=convertMatchRuleJsonToMvel(translator,RuleIdentifier.ENTITY_KEY_MAP.get(metadata.getRuleIdentifier()),metadata.getRuleIdentifier(),value);
      Class<?> valueType=null;
      if (!property.getName().contains(FieldManager.MAPFIELDSEPARATOR)) {
        valueType=returnType;
      }
 else {
        String valueClassName=metadata.getMapFieldValueClass();
        if (valueClassName != null) {
          valueType=Class.forName(valueClassName);
        }
        if (valueType == null) {
          valueType=returnType;
        }
      }
      if (valueType == null) {
        throw new IllegalAccessException("Unable to determine the valueType for the rule field (" + property.getName() + ")");
      }
      if (String.class.isAssignableFrom(valueType)) {
        fieldManager.setFieldValue(instance,property.getName(),mvel);
      }
      if (SimpleRule.class.isAssignableFrom(valueType)) {
        SimpleRule rule;
        try {
          rule=(SimpleRule)fieldManager.getFieldValue(instance,property.getName());
        }
 catch (        FieldNotAvailableException e) {
          throw new IllegalArgumentException(e);
        }
        if (rule != null) {
          rule.setMatchRule(mvel);
        }
 else {
          rule=(SimpleRule)valueType.newInstance();
          rule.setMatchRule(mvel);
          persistenceManager.getDynamicEntityDao().persist(rule);
          fieldManager.setFieldValue(instance,property.getName(),rule);
        }
      }
      break;
    }
}
}
 catch (Exception e) {
throw new PersistenceException(e);
}
}

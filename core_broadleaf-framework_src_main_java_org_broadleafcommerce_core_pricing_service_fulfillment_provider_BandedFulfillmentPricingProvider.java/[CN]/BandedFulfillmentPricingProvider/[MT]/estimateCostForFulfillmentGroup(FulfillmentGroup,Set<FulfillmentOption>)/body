{
  FulfillmentEstimationResponse res=new FulfillmentEstimationResponse();
  HashMap<FulfillmentOption,Money> shippingPrices=new HashMap<FulfillmentOption,Money>();
  res.setFulfillmentOptionPrices(shippingPrices);
  for (  FulfillmentOption option : options) {
    if (canCalculateCostForFulfillmentGroup(fulfillmentGroup,option)) {
      List<? extends FulfillmentBand> bands=null;
      if (option instanceof BandedPriceFulfillmentOption) {
        bands=((BandedPriceFulfillmentOption)option).getBands();
      }
 else       if (option instanceof BandedWeightFulfillmentOption) {
        bands=((BandedWeightFulfillmentOption)option).getBands();
      }
      if (bands == null || bands.isEmpty()) {
        throw new IllegalStateException("There were no Fulfillment Price Bands configured for a BandedPriceFulfillmentOption with ID: " + option.getId());
      }
      BigDecimal retailTotal=BigDecimal.ZERO;
      BigDecimal flatTotal=BigDecimal.ZERO;
      BigDecimal weightTotal=BigDecimal.ZERO;
      boolean foundCandidateForBand=false;
      for (      FulfillmentGroupItem fulfillmentGroupItem : fulfillmentGroup.getFulfillmentGroupItems()) {
        boolean addToTotal=true;
        Sku sku=null;
        if (fulfillmentGroupItem.getOrderItem() instanceof DiscreteOrderItem) {
          sku=((DiscreteOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
        }
 else         if (fulfillmentGroupItem.getOrderItem() instanceof BundleOrderItem) {
          sku=((BundleOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
        }
        if (sku != null && option.getUseFlatRates()) {
          BigDecimal rate=sku.getFulfillmentFlatRates().get(option);
          if (rate != null) {
            addToTotal=false;
            flatTotal=flatTotal.add(rate);
          }
        }
        if (addToTotal) {
          foundCandidateForBand=true;
          BigDecimal price=(fulfillmentGroupItem.getPrice() != null) ? fulfillmentGroupItem.getPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity())) : null;
          if (price == null) {
            price=fulfillmentGroupItem.getOrderItem().getPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
          }
          retailTotal=retailTotal.add(price);
          if (sku != null && sku.getWeight() != null && sku.getWeight().getWeight() != null) {
            BigDecimal convertedWeight=convertWeight(sku.getWeight().getWeight(),sku.getWeight().getWeightUnitOfMeasure()).multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
            weightTotal=weightTotal.add(convertedWeight);
          }
        }
      }
      BigDecimal lowestBandFulfillmentPrice=null;
      BigDecimal lowestBandFulfillmentPriceMinimumAmount=BigDecimal.ZERO;
      if (foundCandidateForBand) {
        for (        FulfillmentBand band : bands) {
          BigDecimal bandMinimumAmount=BigDecimal.ZERO;
          boolean foundMatch=false;
          if (band instanceof FulfillmentPriceBand) {
            bandMinimumAmount=((FulfillmentPriceBand)band).getRetailPriceMinimumAmount();
            foundMatch=retailTotal.compareTo(bandMinimumAmount) >= 0;
          }
 else           if (band instanceof FulfillmentWeightBand) {
            bandMinimumAmount=((FulfillmentWeightBand)band).getMinimumWeight();
            foundMatch=weightTotal.compareTo(bandMinimumAmount) >= 0;
          }
          if (foundMatch) {
            FulfillmentBandResultAmountType resultAmountType=band.getResultAmountType();
            BigDecimal bandFulfillmentPrice=null;
            if (FulfillmentBandResultAmountType.RATE.equals(resultAmountType)) {
              bandFulfillmentPrice=band.getResultAmount();
            }
 else             if (FulfillmentBandResultAmountType.PERCENTAGE.equals(resultAmountType)) {
              bandFulfillmentPrice=retailTotal.multiply(band.getResultAmount());
            }
 else {
              LOG.warn("Unknown FulfillmentBandResultAmountType: " + resultAmountType.getType() + " Should be RATE or PERCENTAGE. Ignoring.");
            }
            if (bandFulfillmentPrice != null) {
              if (lowestBandFulfillmentPrice == null) {
                lowestBandFulfillmentPrice=bandFulfillmentPrice;
                lowestBandFulfillmentPriceMinimumAmount=bandMinimumAmount;
              }
              if (lowestBandFulfillmentPriceMinimumAmount.compareTo(bandMinimumAmount) == 0) {
                if (bandFulfillmentPrice.compareTo(lowestBandFulfillmentPrice) <= 0) {
                  lowestBandFulfillmentPrice=bandFulfillmentPrice;
                  lowestBandFulfillmentPriceMinimumAmount=bandMinimumAmount;
                }
              }
 else               if (bandMinimumAmount.compareTo(lowestBandFulfillmentPriceMinimumAmount) > 0) {
                lowestBandFulfillmentPrice=bandFulfillmentPrice;
                lowestBandFulfillmentPriceMinimumAmount=bandMinimumAmount;
              }
            }
 else {
              throw new IllegalStateException("Bands must have a non-null fulfillment price");
            }
          }
        }
      }
      if (lowestBandFulfillmentPrice == null) {
        lowestBandFulfillmentPrice=BigDecimal.ZERO;
      }
      lowestBandFulfillmentPrice=lowestBandFulfillmentPrice.add(flatTotal);
      shippingPrices.put(option,BroadleafCurrencyUtils.getMoney(lowestBandFulfillmentPrice,fulfillmentGroup.getOrder().getCurrency()));
    }
  }
  return res;
}

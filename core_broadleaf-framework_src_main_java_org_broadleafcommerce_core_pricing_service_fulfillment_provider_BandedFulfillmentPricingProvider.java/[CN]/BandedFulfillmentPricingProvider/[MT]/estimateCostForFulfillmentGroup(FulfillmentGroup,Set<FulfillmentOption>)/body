{
  FulfillmentEstimationResponse res=new FulfillmentEstimationResponse();
  HashMap<FulfillmentOption,Money> shippingPrices=new HashMap<FulfillmentOption,Money>();
  res.setFulfillmentOptionPrices(shippingPrices);
  for (  FulfillmentOption option : options) {
    if (canCalculateCostForFulfillmentGroup(fulfillmentGroup,option)) {
      List<? extends FulfillmentBand> bands=null;
      if (option instanceof BandedPriceFulfillmentOption) {
        bands=((BandedPriceFulfillmentOption)option).getBands();
      }
 else       if (option instanceof BandedWeightFulfillmentOption) {
        bands=((BandedWeightFulfillmentOption)option).getBands();
      }
      if (bands == null || bands.isEmpty()) {
        throw new IllegalStateException("There were no Fulfillment Price Bands configred for a BandedPriceFulfillmentOption with ID: " + option.getId());
      }
      BigDecimal retailTotal=BigDecimal.ZERO;
      BigDecimal flatTotal=BigDecimal.ZERO;
      BigDecimal weightTotal=BigDecimal.ZERO;
      for (      FulfillmentGroupItem fulfillmentGroupItem : fulfillmentGroup.getFulfillmentGroupItems()) {
        boolean addToTotal=true;
        Sku sku=null;
        if (fulfillmentGroupItem.getOrderItem() instanceof DiscreteOrderItem) {
          sku=((DiscreteOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
        }
 else         if (fulfillmentGroupItem.getOrderItem() instanceof BundleOrderItem) {
          sku=((BundleOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
        }
        if (sku != null && option.getUseFlatRates()) {
          BigDecimal rate=sku.getFulfillmentFlatRates().get(option);
          if (rate != null) {
            addToTotal=false;
            flatTotal=flatTotal.add(rate);
          }
        }
        if (addToTotal) {
          BigDecimal price=(fulfillmentGroupItem.getRetailPrice() != null) ? fulfillmentGroupItem.getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity())) : null;
          if (price == null) {
            price=fulfillmentGroupItem.getOrderItem().getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
          }
          retailTotal=retailTotal.add(price);
          if (sku != null && sku.getWeight() != null && sku.getWeight().getWeight() != null) {
            weightTotal=weightTotal.add(sku.getWeight().getWeight());
          }
        }
      }
      BigDecimal lowestFulfillmentAmount=BigDecimal.ZERO;
      BigDecimal lowestFulfillmentBandMinimum=BigDecimal.ZERO;
      for (      FulfillmentBand band : bands) {
        BigDecimal bandMinimumAmount=BigDecimal.ZERO;
        boolean foundMatch=false;
        if (band instanceof FulfillmentPriceBand) {
          bandMinimumAmount=((FulfillmentPriceBand)band).getRetailPriceMinimumAmount();
          foundMatch=retailTotal.compareTo(bandMinimumAmount) >= 0;
        }
 else         if (band instanceof FulfillmentWeightBand) {
          bandMinimumAmount=((FulfillmentWeightBand)band).getMinimumWeight();
          foundMatch=weightTotal.compareTo(bandMinimumAmount) >= 0;
        }
        if (foundMatch) {
          FulfillmentBandResultAmountType resultAmountType=band.getResultAmountType();
          BigDecimal bandFulfillmentPrice=null;
          if (FulfillmentBandResultAmountType.RATE.equals(resultAmountType)) {
            bandFulfillmentPrice=band.getResultAmount();
          }
 else           if (FulfillmentBandResultAmountType.PERCENTAGE.equals(resultAmountType)) {
            bandFulfillmentPrice=retailTotal.multiply(band.getResultAmount());
          }
 else {
            LOG.warn("Unknown FulfillmentBandResultAmountType: " + resultAmountType.getType() + " Should be RATE or PERCENTAGE. Ignoring.");
          }
          if (bandFulfillmentPrice != null) {
            if (lowestFulfillmentBandMinimum.equals(bandMinimumAmount)) {
              if (bandFulfillmentPrice.compareTo(lowestFulfillmentAmount) <= 0) {
                lowestFulfillmentAmount=bandFulfillmentPrice;
                lowestFulfillmentBandMinimum=bandMinimumAmount;
              }
            }
 else             if (bandMinimumAmount.compareTo(lowestFulfillmentBandMinimum) > 0) {
              lowestFulfillmentAmount=bandFulfillmentPrice;
              lowestFulfillmentBandMinimum=bandMinimumAmount;
            }
          }
        }
      }
      lowestFulfillmentAmount=lowestFulfillmentAmount.add(flatTotal);
      shippingPrices.put(option,new Money(lowestFulfillmentAmount));
    }
  }
  return res;
}

{
  ArrayList<OperatorDTO> operators=new ArrayList<OperatorDTO>();
  BLCOperator[] blcOperators;
  BLCFieldType blcFieldType;
switch (fieldType) {
case BOOLEAN:
    blcOperators=getBasicBooleanOperators();
  blcFieldType=BLCFieldType.NONE;
break;
case DATE:
blcOperators=getBasicDateOperators();
blcFieldType=BLCFieldType.TEXT;
break;
case ID:
blcOperators=getBasicNumericOperators();
blcFieldType=BLCFieldType.TEXT;
break;
case INTEGER:
blcOperators=getBasicNumericOperators();
blcFieldType=BLCFieldType.TEXT;
break;
case DECIMAL:
blcOperators=getBasicNumericOperators();
blcFieldType=BLCFieldType.TEXT;
break;
case MONEY:
blcOperators=getBasicNumericOperators();
blcFieldType=BLCFieldType.TEXT;
break;
case BROADLEAF_ENUMERATION:
blcOperators=getBasicEnumerationOperators();
blcFieldType=BLCFieldType.SELECT;
break;
case EXPLICIT_ENUMERATION:
blcOperators=getBasicEnumerationOperators();
blcFieldType=BLCFieldType.SELECT;
break;
case EMPTY_ENUMERATION:
blcOperators=getBasicEnumerationOperators();
blcFieldType=BLCFieldType.SELECT;
break;
case DATA_DRIVEN_ENUMERATION:
blcOperators=getBasicEnumerationOperators();
blcFieldType=BLCFieldType.SELECT;
break;
default :
blcOperators=getBasicTextOperators();
blcFieldType=BLCFieldType.TEXT;
}
for (BLCOperator blcOperator : blcOperators) {
OperatorDTO operatorDTO=new OperatorDTO();
operatorDTO.setName(blcOperator.name());
operatorDTO.setLabel(blcOperator.name());
operatorDTO.setFieldType(blcFieldType.name());
operators.add(operatorDTO);
}
return operators;
}

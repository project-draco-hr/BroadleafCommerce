{
  String sectionKey=getSectionKey(pathVars);
  String sectionClassName=getClassNameForSection(sectionKey);
  PersistencePackageRequest ppr=getSectionPersistencePackageRequest(sectionClassName);
  ClassMetadata cmd=service.getClassMetadata(ppr);
  Entity entity=service.getRecord(ppr,id,cmd,false);
  Map<String,DynamicResultSet> subRecordsMap=service.getRecordsForAllSubCollections(ppr,entity);
  EntityForm entityForm=formService.createEntityForm(cmd,entity,subRecordsMap);
  model.addAttribute("entity",entity);
  model.addAttribute("entityForm",entityForm);
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  setModelAttributes(model,sectionKey);
  boolean readable=false;
  for (  Property property : cmd.getProperties()) {
    FieldMetadata fieldMetadata=property.getMetadata();
    if (fieldMetadata instanceof BasicFieldMetadata) {
      if (!((BasicFieldMetadata)fieldMetadata).getReadOnly()) {
        readable=true;
        break;
      }
    }
 else {
      if (((CollectionMetadata)fieldMetadata).isMutable()) {
        readable=true;
        break;
      }
    }
  }
  if (!readable) {
    entityForm.setReadOnly();
  }
  try {
    adminRemoteSecurityService.securityCheck(sectionClassName,EntityOperationType.UPDATE);
  }
 catch (  ServiceException e) {
    if (e instanceof SecurityServiceException) {
      entityForm.setReadOnly();
    }
  }
  if (isAjaxRequest(request)) {
    entityForm.setReadOnly();
    model.addAttribute("viewType","modal/entityView");
    model.addAttribute("modalHeaderType","viewEntity");
    return "modules/modalContainer";
  }
 else {
    model.addAttribute("viewType","entityEdit");
    return "modules/defaultContainer";
  }
}

{
  String sectionKey=getSectionKey(pathVars);
  String mainClassName=getClassNameForSection(sectionKey);
  ClassMetadata mainMetadata=service.getClassMetadata(getSectionPersistencePackageRequest(mainClassName));
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  PersistencePackageRequest ppr=getSectionPersistencePackageRequest(mainClassName);
  Entity parentEntity=service.getRecord(ppr,id,mainMetadata,false);
  ppr=PersistencePackageRequest.fromMetadata(md);
  if (md instanceof BasicCollectionMetadata && ((BasicCollectionMetadata)md).getAddMethodType().equals(AddMethodType.PERSIST)) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr);
    Entity entity=service.getRecord(ppr,collectionItemId,collectionMetadata,true);
    Map<String,DynamicResultSet> subRecordsMap=service.getRecordsForAllSubCollections(ppr,entity);
    EntityForm entityForm=formService.createEntityForm(collectionMetadata,entity,subRecordsMap);
    entityForm.removeAction(DefaultEntityFormActions.DELETE);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/simpleEditEntity");
  }
 else   if (md instanceof AdornedTargetCollectionMetadata && ((AdornedTargetCollectionMetadata)md).getMaintainedAdornedTargetFields().length > 0) {
    AdornedTargetCollectionMetadata fmd=(AdornedTargetCollectionMetadata)md;
    EntityForm entityForm=formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id);
    Entity entity=service.getAdvancedCollectionRecord(mainMetadata,parentEntity,collectionProperty,collectionItemId);
    formService.populateEntityFormFields(entityForm,entity);
    formService.populateAdornedEntityFormFields(entityForm,entity,ppr.getAdornedList());
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/adornedEditEntity");
  }
 else   if (md instanceof MapMetadata) {
    MapMetadata fmd=(MapMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr);
    Entity entity=service.getAdvancedCollectionRecord(mainMetadata,parentEntity,collectionProperty,collectionItemId);
    EntityForm entityForm=formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id);
    formService.populateEntityFormFields(entityForm,entity);
    formService.populateMapEntityFormFields(entityForm,entity);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/mapEditEntity");
  }
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  model.addAttribute("modalHeaderType",modalHeaderType);
  model.addAttribute("collectionProperty",collectionProperty);
  setModelAttributes(model,sectionKey);
  return "modules/modalContainer";
}

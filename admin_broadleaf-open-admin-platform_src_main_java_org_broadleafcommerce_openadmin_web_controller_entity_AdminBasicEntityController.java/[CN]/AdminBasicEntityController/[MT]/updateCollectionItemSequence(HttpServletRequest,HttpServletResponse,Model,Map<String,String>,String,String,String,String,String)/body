{
  String sectionKey=getSectionKey(pathVars);
  String mainClassName=getClassNameForSection(sectionKey);
  List<SectionCrumb> sectionCrumbs=getSectionCrumbs(request,sectionKey,id);
  ClassMetadata mainMetadata=service.getClassMetadata(getSectionPersistencePackageRequest(mainClassName,sectionCrumbs,pathVars)).getDynamicResultSet().getClassMetaData();
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  PersistencePackageRequest ppr=getSectionPersistencePackageRequest(mainClassName,sectionCrumbs,pathVars);
  Entity parentEntity=service.getRecord(ppr,id,mainMetadata,false).getDynamicResultSet().getRecords()[0];
  ppr=PersistencePackageRequest.fromMetadata(md,sectionCrumbs);
  if (md instanceof AdornedTargetCollectionMetadata) {
    AdornedTargetCollectionMetadata fmd=(AdornedTargetCollectionMetadata)md;
    AdornedTargetList atl=ppr.getAdornedList();
    EntityForm entityForm=formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id);
    Entity entity=service.getAdvancedCollectionRecord(mainMetadata,parentEntity,collectionProperty,collectionItemId,sectionCrumbs,alternateId).getDynamicResultSet().getRecords()[0];
    formService.populateEntityFormFields(entityForm,entity);
    formService.populateAdornedEntityFormFields(entityForm,entity,ppr.getAdornedList());
    int sequenceValue=Integer.parseInt(newSequence) + 1;
    Field field=entityForm.findField(atl.getSortField());
    field.setValue(String.valueOf(sequenceValue));
    Map<String,Object> responseMap=new HashMap<String,Object>();
    service.updateSubCollectionEntity(entityForm,mainMetadata,collectionProperty,entity,collectionItemId,alternateId,sectionCrumbs);
    responseMap.put("status","ok");
    responseMap.put("field",collectionField);
    return responseMap;
  }
 else   if (md instanceof BasicCollectionMetadata) {
    BasicCollectionMetadata cd=(BasicCollectionMetadata)md;
    Map<String,Object> responseMap=new HashMap<String,Object>();
    Entity entity=service.getRecord(ppr,collectionItemId,mainMetadata,false).getDynamicResultSet().getRecords()[0];
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    EntityForm entityForm=formService.createEntityForm(collectionMetadata,sectionCrumbs);
    if (!StringUtils.isEmpty(cd.getSortProperty())) {
      Field f=new Field().withName(cd.getSortProperty()).withFieldType(SupportedFieldType.HIDDEN.toString());
      entityForm.addHiddenField(f);
    }
    formService.populateEntityFormFields(entityForm,entity);
    if (!StringUtils.isEmpty(cd.getSortProperty())) {
      int sequenceValue=Integer.parseInt(newSequence) + 1;
      Field field=entityForm.findField(cd.getSortProperty());
      field.setValue(String.valueOf(sequenceValue));
    }
    service.updateSubCollectionEntity(entityForm,mainMetadata,collectionProperty,parentEntity,collectionItemId,sectionCrumbs);
    responseMap.put("status","ok");
    responseMap.put("field",collectionField);
    return responseMap;
  }
 else {
    throw new UnsupportedOperationException("Cannot handle sequencing for non adorned target collection fields.");
  }
}

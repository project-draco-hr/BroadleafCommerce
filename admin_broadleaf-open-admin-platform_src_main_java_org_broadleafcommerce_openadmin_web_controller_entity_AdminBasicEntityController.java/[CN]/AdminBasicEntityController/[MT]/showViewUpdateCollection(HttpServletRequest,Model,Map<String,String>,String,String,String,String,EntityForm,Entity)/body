{
  String sectionKey=getSectionKey(pathVars);
  String mainClassName=getClassNameForSection(sectionKey);
  List<SectionCrumb> sectionCrumbs=getSectionCrumbs(request,sectionKey,id);
  ClassMetadata mainMetadata=service.getClassMetadata(getSectionPersistencePackageRequest(mainClassName,sectionCrumbs)).getDynamicResultSet().getClassMetaData();
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  SectionCrumb nextCrumb=new SectionCrumb();
  if (md instanceof MapMetadata) {
    nextCrumb.setSectionIdentifier(((MapMetadata)md).getValueClassName());
  }
 else {
    nextCrumb.setSectionIdentifier(((CollectionMetadata)md).getCollectionCeilingEntity());
  }
  nextCrumb.setSectionId(collectionItemId);
  if (!sectionCrumbs.contains(nextCrumb)) {
    sectionCrumbs.add(nextCrumb);
  }
  PersistencePackageRequest ppr=getSectionPersistencePackageRequest(mainClassName,sectionCrumbs);
  Entity parentEntity=service.getRecord(ppr,id,mainMetadata,false).getDynamicResultSet().getRecords()[0];
  ppr=PersistencePackageRequest.fromMetadata(md,sectionCrumbs);
  if (md instanceof BasicCollectionMetadata && ((BasicCollectionMetadata)md).getAddMethodType().equals(AddMethodType.PERSIST)) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    if (entity == null) {
      entity=service.getRecord(ppr,collectionItemId,collectionMetadata,true).getDynamicResultSet().getRecords()[0];
    }
    Map<String,DynamicResultSet> subRecordsMap=service.getRecordsForAllSubCollections(ppr,entity,sectionCrumbs);
    if (entityForm == null) {
      entityForm=formService.createEntityForm(collectionMetadata,entity,subRecordsMap,sectionCrumbs);
    }
 else {
      entityForm.clearFieldsMap();
      formService.populateEntityForm(collectionMetadata,entity,subRecordsMap,entityForm,sectionCrumbs);
      entityForm.removeAllActions();
    }
    entityForm.removeAction(DefaultEntityFormActions.DELETE);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/simpleEditEntity");
  }
 else   if (md instanceof AdornedTargetCollectionMetadata) {
    AdornedTargetCollectionMetadata fmd=(AdornedTargetCollectionMetadata)md;
    if (entity == null) {
      entity=service.getAdvancedCollectionRecord(mainMetadata,parentEntity,collectionProperty,collectionItemId,sectionCrumbs).getDynamicResultSet().getRecords()[0];
    }
    boolean populateTypeAndId=true;
    if (entityForm == null) {
      entityForm=formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id);
    }
 else {
      entityForm.clearFieldsMap();
      String entityType=entityForm.getEntityType();
      formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id,entityForm);
      entityForm.setEntityType(entityType);
      populateTypeAndId=false;
    }
    ClassMetadata cmd=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    for (    String field : fmd.getMaintainedAdornedTargetFields()) {
      Property p=cmd.getPMap().get(field);
      if (p != null && p.getMetadata() instanceof AdornedTargetCollectionMetadata) {
        Property alternateIdProperty=entity.getPMap().get(BasicPersistenceModule.ALTERNATE_ID_PROPERTY);
        DynamicResultSet drs=service.getRecordsForCollection(cmd,entity,p,null,null,null,alternateIdProperty.getValue(),sectionCrumbs).getDynamicResultSet();
        ListGrid listGrid=formService.buildCollectionListGrid(alternateIdProperty.getValue(),drs,p,ppr.getAdornedList().getAdornedTargetEntityClassname(),sectionCrumbs);
        listGrid.setListGridType(ListGrid.Type.INLINE);
        listGrid.getToolbarActions().add(DefaultListGridActions.ADD);
        entityForm.addListGrid(listGrid,EntityForm.DEFAULT_TAB_NAME,EntityForm.DEFAULT_TAB_ORDER);
      }
 else       if (p != null && p.getMetadata() instanceof MapMetadata) {
        MapMetadata mmd=(MapMetadata)p.getMetadata();
        Property alternateIdProperty=entity.getPMap().get(BasicPersistenceModule.ALTERNATE_ID_PROPERTY);
        DynamicResultSet drs=service.getRecordsForCollection(cmd,entity,p,null,null,null,alternateIdProperty.getValue(),sectionCrumbs).getDynamicResultSet();
        ListGrid listGrid=formService.buildCollectionListGrid(alternateIdProperty.getValue(),drs,p,mmd.getTargetClass(),sectionCrumbs);
        listGrid.setListGridType(ListGrid.Type.INLINE);
        listGrid.getToolbarActions().add(DefaultListGridActions.ADD);
        entityForm.addListGrid(listGrid,EntityForm.DEFAULT_TAB_NAME,EntityForm.DEFAULT_TAB_ORDER);
      }
    }
    formService.populateEntityFormFields(entityForm,entity,populateTypeAndId,populateTypeAndId);
    formService.populateAdornedEntityFormFields(entityForm,entity,ppr.getAdornedList());
    boolean atLeastOneBasicField=false;
    for (    Entry<String,Field> entry : entityForm.getFields().entrySet()) {
      if (entry.getValue().getIsVisible()) {
        atLeastOneBasicField=true;
        break;
      }
    }
    if (!atLeastOneBasicField) {
      entityForm.removeAction(DefaultEntityFormActions.SAVE);
    }
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/adornedEditEntity");
  }
 else   if (md instanceof MapMetadata) {
    MapMetadata fmd=(MapMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    if (entity == null) {
      entity=service.getAdvancedCollectionRecord(mainMetadata,parentEntity,collectionProperty,collectionItemId,sectionCrumbs).getEntity();
    }
    boolean populateTypeAndId=true;
    if (entityForm == null) {
      entityForm=formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id);
    }
 else {
      String priorKey=entityForm.getFields().get("priorKey").getValue();
      entityForm.clearFieldsMap();
      formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id,entityForm);
      entityForm.getFields().get("priorKey").setValue(priorKey);
      populateTypeAndId=false;
    }
    formService.populateEntityFormFields(entityForm,entity,populateTypeAndId,populateTypeAndId);
    formService.populateMapEntityFormFields(entityForm,entity);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/mapEditEntity");
  }
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  model.addAttribute("modalHeaderType",modalHeaderType);
  model.addAttribute("collectionProperty",collectionProperty);
  setModelAttributes(model,sectionKey);
  return "modules/modalContainer";
}

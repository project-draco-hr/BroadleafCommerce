{
  String mainClassName=getClassNameForSection(sectionKey);
  ppr.addCustomCriteria("owningClass=" + mainClassName);
  if (entityForm != null) {
    entityForm.clearFieldsMap();
  }
  List<SectionCrumb> sectionCrumbs=getSectionCrumbs(request,sectionKey,id);
  if (md instanceof BasicCollectionMetadata) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    if (fmd.getAddMethodType().equals(AddMethodType.PERSIST)) {
      ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
      if (entityForm == null) {
        entityForm=formService.createEntityForm(collectionMetadata,sectionCrumbs);
        entityForm.setCeilingEntityClassname(ppr.getCeilingEntityClassname());
        entityForm.setEntityType(ppr.getCeilingEntityClassname());
      }
 else {
        formService.populateEntityForm(collectionMetadata,entityForm,sectionCrumbs);
        formService.populateEntityFormFieldValues(collectionMetadata,entity,entityForm);
      }
      formService.removeNonApplicableFields(collectionMetadata,entityForm,ppr.getCeilingEntityClassname());
      entityForm.getTabs().iterator().next().getIsVisible();
      model.addAttribute("entityForm",entityForm);
      model.addAttribute("viewType","modal/simpleAddEntity");
    }
 else {
      DynamicResultSet drs=service.getRecords(ppr).getDynamicResultSet();
      ListGrid listGrid=formService.buildCollectionListGrid(id,drs,collectionProperty,sectionKey,sectionCrumbs);
      listGrid.setPathOverride(request.getRequestURL().toString());
      model.addAttribute("listGrid",listGrid);
      model.addAttribute("viewType","modal/simpleSelectEntity");
    }
  }
 else   if (md instanceof AdornedTargetCollectionMetadata) {
    AdornedTargetCollectionMetadata fmd=(AdornedTargetCollectionMetadata)md;
    ppr.setOperationTypesOverride(null);
    ppr.setType(PersistencePackageRequest.Type.STANDARD);
    ppr.setSectionEntityField(collectionField);
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    DynamicResultSet drs=service.getRecords(ppr).getDynamicResultSet();
    ListGrid listGrid=formService.buildMainListGrid(drs,collectionMetadata,sectionKey,sectionCrumbs);
    listGrid.setSubCollectionFieldName(collectionField);
    listGrid.setPathOverride(request.getRequestURL().toString());
    listGrid.setFriendlyName(collectionMetadata.getPolymorphicEntities().getFriendlyName());
    if (entityForm == null) {
      entityForm=formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id,false);
    }
 else {
      formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id,false,entityForm);
      formService.populateEntityFormFieldValues(collectionMetadata,entity,entityForm);
    }
    listGrid.setListGridType(ListGrid.Type.ADORNED);
    for (    Entry<String,Field> entry : entityForm.getFields().entrySet()) {
      if (entry.getValue().getIsVisible()) {
        listGrid.setListGridType(ListGrid.Type.ADORNED_WITH_FORM);
        break;
      }
    }
    model.addAttribute("listGrid",listGrid);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/adornedSelectEntity");
  }
 else   if (md instanceof MapMetadata) {
    MapMetadata fmd=(MapMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
    if (entityForm == null) {
      entityForm=formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id);
    }
 else {
      formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id,entityForm);
      formService.populateEntityFormFieldValues(collectionMetadata,entity,entityForm);
    }
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modal/mapAddEntity");
  }
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  model.addAttribute("modalHeaderType",ModalHeaderType.ADD_COLLECTION_ITEM.getType());
  model.addAttribute("collectionProperty",collectionProperty);
  setModelAttributes(model,sectionKey);
  return "modules/modalContainer";
}

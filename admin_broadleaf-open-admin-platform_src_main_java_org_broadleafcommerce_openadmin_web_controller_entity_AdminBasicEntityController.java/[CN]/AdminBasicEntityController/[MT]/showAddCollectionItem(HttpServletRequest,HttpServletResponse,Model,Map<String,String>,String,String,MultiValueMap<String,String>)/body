{
  String sectionKey=getSectionKey(pathVars);
  String mainClassName=getClassNameForSection(sectionKey);
  List<SectionCrumb> sectionCrumbs=getSectionCrumbs(request,sectionKey,id);
  ClassMetadata mainMetadata=service.getClassMetadata(getSectionPersistencePackageRequest(mainClassName,sectionCrumbs)).getDynamicResultSet().getClassMetaData();
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(md,sectionCrumbs).withFilterAndSortCriteria(getCriteria(requestParams)).withStartIndex(getStartIndex(requestParams)).withMaxIndex(getMaxIndex(requestParams));
  if (md instanceof BasicCollectionMetadata) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    if (fmd.getAddMethodType().equals(AddMethodType.PERSIST)) {
      ClassMetadata cmd=service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
      String entityType=null;
      if (requestParams.containsKey("entityType")) {
        entityType=requestParams.get("entityType").get(0);
      }
      if (StringUtils.isBlank(entityType)) {
        if (cmd.getPolymorphicEntities().getChildren().length == 0) {
          entityType=cmd.getPolymorphicEntities().getFullyQualifiedClassname();
        }
 else {
          entityType=getDefaultEntityType();
        }
      }
 else {
        entityType=URLDecoder.decode(entityType,"UTF-8");
      }
      if (StringUtils.isBlank(entityType)) {
        List<ClassTree> entityTypes=getAddEntityTypes(cmd.getPolymorphicEntities());
        model.addAttribute("entityTypes",entityTypes);
        model.addAttribute("viewType","modal/entityTypeSelection");
        model.addAttribute("entityFriendlyName",cmd.getPolymorphicEntities().getFriendlyName());
        String requestUri=request.getRequestURI();
        if (!request.getContextPath().equals("/") && requestUri.startsWith(request.getContextPath())) {
          requestUri=requestUri.substring(request.getContextPath().length() + 1,requestUri.length());
        }
        model.addAttribute("currentUri",requestUri);
        model.addAttribute("modalHeaderType","addEntity");
        setModelAttributes(model,sectionKey);
        return "modules/modalContainer";
      }
 else {
        ppr=ppr.withCeilingEntityClassname(entityType);
      }
    }
  }
  model.addAttribute("currentParams",new ObjectMapper().writeValueAsString(requestParams));
  return buildAddCollectionItemModel(request,response,model,id,collectionField,sectionKey,collectionProperty,md,ppr,null,null);
}

{
  Order cart=CartState.getCart();
  if (cart != null) {
    try {
      HashMap<String,String> productOptions=getOptions(uriInfo);
      OrderItemRequestDTO orderItemRequestDTO=new OrderItemRequestDTO();
      orderItemRequestDTO.setProductId(productId);
      orderItemRequestDTO.setCategoryId(categoryId);
      orderItemRequestDTO.setQuantity(quantity);
      if (productOptions.size() > 0) {
        orderItemRequestDTO.setItemAttributes(productOptions);
      }
      Order order=orderService.addItem(cart.getId(),orderItemRequestDTO,priceOrder);
      order=orderService.save(order,priceOrder);
      OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
      wrapper.wrapDetails(order,request);
      return wrapper;
    }
 catch (    PricingException e) {
      throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occurred pricing the order.").build());
    }
catch (    AddToCartException e) {
      if (e.getCause() != null) {
        throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("" + e.getCause()).build());
      }
      throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occurred adding the item to the cart." + e.getCause()).build());
    }
  }
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Cart could not be found").build());
}

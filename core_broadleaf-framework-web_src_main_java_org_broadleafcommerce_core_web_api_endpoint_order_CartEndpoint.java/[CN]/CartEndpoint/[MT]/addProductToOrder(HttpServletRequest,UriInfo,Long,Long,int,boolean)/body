{
  Customer customer=CustomerState.getCustomer(request);
  if (customer != null) {
    Order cart=orderService.findCartForCustomer(customer);
    if (cart != null) {
      try {
        MultivaluedMap<String,String> multiValuedMap=uriInfo.getQueryParameters();
        HashMap<String,String> productOptions=new HashMap<String,String>();
        Set<String> keySet=multiValuedMap.keySet();
        for (        String key : keySet) {
          if (multiValuedMap.getFirst(key) != null) {
            productOptions.put(key,multiValuedMap.getFirst(key));
          }
        }
        productOptions.remove("categoryId");
        productOptions.remove("productId");
        productOptions.remove("skuId");
        productOptions.remove("quantity");
        productOptions.remove("priceOrder");
        OrderItemRequestDTO orderItemRequestDTO=new OrderItemRequestDTO();
        orderItemRequestDTO.setCategoryId(categoryId);
        orderItemRequestDTO.setProductId(productId);
        orderItemRequestDTO.setCategoryId(categoryId);
        orderItemRequestDTO.setQuantity(quantity);
        if (productOptions.size() > 0) {
          orderItemRequestDTO.setItemAttributes(productOptions);
        }
        Order order=orderService.addItem(cart.getId(),orderItemRequestDTO,priceOrder);
        order=orderService.save(order,priceOrder);
        OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
        wrapper.wrap(order,request);
        return wrapper;
      }
 catch (      PricingException e) {
        throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occured pricing the order.").build());
      }
catch (      AddToCartException e) {
        throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occured adding the item to the cart.").build());
      }
    }
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Cart could not be found").build());
  }
  throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).type(MediaType.TEXT_PLAIN).entity("Could not find customer associated with request. " + "Ensure that customer ID is passed in the request as header or request parameter : customerId").build());
}

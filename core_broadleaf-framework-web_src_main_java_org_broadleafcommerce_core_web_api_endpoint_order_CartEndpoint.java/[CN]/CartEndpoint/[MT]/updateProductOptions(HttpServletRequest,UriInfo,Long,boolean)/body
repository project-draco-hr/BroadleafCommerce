{
  Order cart=CartState.getCart();
  if (cart != null) {
    try {
      OrderItemRequestDTO orderItemRequestDTO=new OrderItemRequestDTO();
      HashMap<String,String> productOptions=getOptions(uriInfo);
      if (uriInfo.getQueryParameters().getFirst("bundleOrderItemId") != null) {
      }
      orderItemRequestDTO.setOrderItemId(itemId);
      if (productOptions.size() > 0) {
        orderItemRequestDTO.setItemAttributes(productOptions);
      }
      Order order=orderService.updateProductOptionsForItem(cart.getId(),orderItemRequestDTO,priceOrder);
      order=orderService.save(order,priceOrder);
      return wrapCart(request,cart);
    }
 catch (    UpdateCartException e) {
      if (e.getCause() instanceof ItemNotFoundException) {
        throw new WebApplicationException(e,Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Could not find order item id " + itemId).build());
      }
 else {
        throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occurred on updating the cart.").build());
      }
    }
catch (    PricingException pe) {
      throw new WebApplicationException(pe,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occurred pricing the cart.").build());
    }
  }
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Cart could not be found").build());
}

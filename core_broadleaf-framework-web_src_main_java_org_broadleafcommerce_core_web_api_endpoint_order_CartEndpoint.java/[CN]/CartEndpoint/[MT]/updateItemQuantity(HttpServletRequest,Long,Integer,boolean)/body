{
  Customer customer=CustomerState.getCustomer(request);
  if (customer != null) {
    Order cart=orderService.findCartForCustomer(customer);
    if (cart != null) {
      try {
        OrderItemRequestDTO orderItemRequestDTO=new OrderItemRequestDTO();
        orderItemRequestDTO.setOrderItemId(itemId);
        orderItemRequestDTO.setQuantity(quantity);
        Order order=orderService.updateItemQuantity(cart.getId(),orderItemRequestDTO,priceOrder);
        order=orderService.save(order,priceOrder);
        OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
        wrapper.wrap(order,request);
        return wrapper;
      }
 catch (      UpdateCartException e) {
        if (e.getCause() instanceof ItemNotFoundException) {
          throw new WebApplicationException(Response.Status.NOT_FOUND);
        }
 else {
          throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
        }
      }
catch (      RemoveFromCartException e) {
        if (e.getCause() instanceof ItemNotFoundException) {
          throw new WebApplicationException(Response.Status.NOT_FOUND);
        }
 else {
          throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
        }
      }
catch (      PricingException pe) {
        throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
      }
    }
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  throw new WebApplicationException(Response.Status.BAD_REQUEST);
}

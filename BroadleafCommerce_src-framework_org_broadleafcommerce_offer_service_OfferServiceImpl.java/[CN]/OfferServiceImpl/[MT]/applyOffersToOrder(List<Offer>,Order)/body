{
  clearOffersandAdjustments(order);
  List<Offer> filteredOffers=filterOffers(offers,order.getCustomer());
  if ((filteredOffers == null) || (filteredOffers.isEmpty())) {
    order.assignOrderItemsFinalPrice();
    order.setSubTotal(order.calculateOrderItemsFinalPrice());
  }
 else {
    List<CandidateOrderOffer> qualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
    List<CandidateItemOffer> qualifiedItemOffers=new ArrayList<CandidateItemOffer>();
    order.setSubTotal(order.calculateOrderItemsCurrentPrice());
    List<DiscreteOrderItem> discreteOrderItems=order.getDiscountableDiscreteOrderItems();
    for (    Offer offer : filteredOffers) {
      if (offer.getType() == OfferType.ORDER) {
        if (couldOfferApplyToOrder(offer,order)) {
          CandidateOrderOffer candidateOffer=new CandidateOrderOfferImpl(order,offer);
          order.addCandidateOrderOffer(candidateOffer);
          qualifiedOrderOffers.add(candidateOffer);
        }
      }
 else       if (offer.getType() == OfferType.ORDER_ITEM) {
        for (        DiscreteOrderItem discreteOrderItem : discreteOrderItems) {
          if (couldOfferApplyToOrder(offer,order,discreteOrderItem)) {
            CandidateItemOffer candidateOffer=new CandidateItemOfferImpl(discreteOrderItem,offer);
            discreteOrderItem.addCandidateItemOffer(candidateOffer);
            qualifiedItemOffers.add(candidateOffer);
          }
        }
      }
 else       if (offer.getType() == OfferType.FULFILLMENT_GROUP) {
        for (        FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
          if (couldOfferApplyToOrder(offer,order,fulfillmentGroup)) {
            CandidateFulfillmentGroupOffer candidateOffer=new CandidateFulfillmentGroupOfferImpl(fulfillmentGroup,offer);
            fulfillmentGroup.addCandidateFulfillmentGroupOffer(candidateOffer);
          }
        }
      }
    }
    if ((qualifiedItemOffers.isEmpty()) && (qualifiedOrderOffers.isEmpty())) {
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
    }
 else {
      Offer notCombinableOrderOfferApplied=null;
      if (!qualifiedItemOffers.isEmpty()) {
        Collections.sort(qualifiedItemOffers,new BeanComparator("discountedPrice"));
        Collections.sort(qualifiedItemOffers,new BeanComparator("priority"));
        qualifiedItemOffers=removeTrailingNotCombinableItemOffers(qualifiedItemOffers);
        notCombinableOrderOfferApplied=applyAllOrderOffers(qualifiedOrderOffers,order);
      }
      Offer notCombinableItemOfferApplied=null;
      if (!qualifiedOrderOffers.isEmpty()) {
        Collections.sort(qualifiedOrderOffers,new BeanComparator("discountedPrice"));
        Collections.sort(qualifiedOrderOffers,new BeanComparator("priority"));
        qualifiedOrderOffers=removeTrailingNotCombinableOrderOffers(qualifiedOrderOffers);
        notCombinableItemOfferApplied=applyAllItemOffers(qualifiedItemOffers);
      }
      if ((notCombinableItemOfferApplied != null) && (notCombinableOrderOfferApplied != null)) {
        if (order.getAdjustmentPrice().greaterThanOrEqual(order.calculateOrderItemsCurrentPrice())) {
          order.removeAllOrderAdjustments();
          qualifiedOrderOffers=removeOfferFromCandidateOrderOffers(qualifiedOrderOffers,notCombinableOrderOfferApplied);
          notCombinableOrderOfferApplied=null;
          if (!qualifiedOrderOffers.isEmpty()) {
            applyAllOrderOffers(qualifiedOrderOffers,order);
          }
        }
 else {
          order.removeAllItemAdjustments();
          qualifiedItemOffers=removeOfferFromCandidateItemOffers(qualifiedItemOffers,notCombinableItemOfferApplied);
          notCombinableItemOfferApplied=null;
          if (!qualifiedItemOffers.isEmpty()) {
            applyAllItemOffers(qualifiedItemOffers);
          }
        }
      }
      if ((notCombinableItemOfferApplied != null) && (!qualifiedOrderOffers.isEmpty())) {
        if (order.getAdjustmentPrice().greaterThan(order.calculateOrderItemsCurrentPrice())) {
          order.removeAllOrderAdjustments();
          qualifiedOrderOffers.clear();
        }
 else {
          order.removeAllItemAdjustments();
          qualifiedItemOffers=removeOfferFromCandidateItemOffers(qualifiedItemOffers,notCombinableItemOfferApplied);
          notCombinableItemOfferApplied=null;
          if (!qualifiedItemOffers.isEmpty()) {
            applyAllItemOffers(qualifiedItemOffers);
          }
        }
      }
      if ((notCombinableOrderOfferApplied != null) && (!qualifiedItemOffers.isEmpty())) {
        if (order.getAdjustmentPrice().lessThan(order.calculateOrderItemsCurrentPrice())) {
          order.removeAllItemAdjustments();
          qualifiedItemOffers.clear();
        }
 else {
          order.removeAllOrderAdjustments();
          qualifiedOrderOffers=removeOfferFromCandidateOrderOffers(qualifiedOrderOffers,notCombinableOrderOfferApplied);
          notCombinableOrderOfferApplied=null;
          if (!qualifiedOrderOffers.isEmpty()) {
            applyAllOrderOffers(qualifiedOrderOffers,order);
          }
        }
      }
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
      if ((!qualifiedOrderOffers.isEmpty()) && (!qualifiedOrderOffers.isEmpty())) {
        List<CandidateOrderOffer> finalQualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
        order.removeAllOrderAdjustments();
        for (        CandidateOrderOffer condidateOrderOffer : qualifiedOrderOffers) {
          if (couldOfferApplyToOrder(condidateOrderOffer.getOffer(),order)) {
            finalQualifiedOrderOffers.add(condidateOrderOffer);
          }
        }
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("discountedPrice"));
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("priority"));
        if (!finalQualifiedOrderOffers.isEmpty()) {
          applyAllOrderOffers(finalQualifiedOrderOffers,order);
        }
      }
    }
  }
}

{
  int thisSign=signum();
  int valueSign=val.signum();
  if (thisSign == valueSign) {
    if (this.scale == val.scale && this.bitLength < 54 && val.bitLength < 54) {
      return doubleCompareTo(smallValue,val.smallValue);
    }
    double diffScale=this.scale - val.scale;
    double diffPrecision=this.aproxPrecision() - val.aproxPrecision();
    if (diffPrecision > diffScale + 1) {
      return thisSign;
    }
 else     if (diffPrecision < diffScale - 1) {
      return -thisSign;
    }
 else {
      int absDiffScale=(int)Math.abs(diffScale);
      if (absDiffScale < DOUBLE_TEN_POW.length) {
        if (diffScale < 0 && (bitLength + DOUBLE_TEN_POW_BIT_LENGTH[absDiffScale]) < 54) {
          return doubleCompareTo(smallValue * DOUBLE_TEN_POW[absDiffScale],val.smallValue);
        }
 else         if (diffScale > 0 && (val.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[absDiffScale]) < 54) {
          return doubleCompareTo(smallValue,val.smallValue * DOUBLE_TEN_POW[absDiffScale]);
        }
      }
      BigInteger thisUnscaled=this.getUnscaledValue();
      BigInteger valUnscaled=val.getUnscaledValue();
      if (diffScale < 0) {
        thisUnscaled=thisUnscaled.multiply(Multiplication.powerOf10(absDiffScale));
      }
 else       if (diffScale > 0) {
        valUnscaled=valUnscaled.multiply(Multiplication.powerOf10(absDiffScale));
      }
      return thisUnscaled.compareTo(valUnscaled);
    }
  }
 else   if (thisSign < valueSign) {
    return -1;
  }
 else {
    return 1;
  }
}

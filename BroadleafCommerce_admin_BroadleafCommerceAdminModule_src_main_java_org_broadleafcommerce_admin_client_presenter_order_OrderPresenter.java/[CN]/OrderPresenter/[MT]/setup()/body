{
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("orderDS",new OrderListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource top){
      setupDisplayItems(top);
      ((ListGridDataSource)top).setupGridFields(new String[]{"customer.firstName","customer.lastName","name","orderNumber","status"},new Boolean[]{false,false,false,false,false});
      library.put("orderDS",top);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("orderItemDS",new OrderItemListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      library.put("orderItemDS",result);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("bundleOrderItemDS",new BundledOrderItemListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      orderItemPresenter=new OrderItemPresenter(((OrderDisplay)getDisplay()).getOrderItemsDisplay());
      orderItemPresenter.setDataSource((ListGridDataSource)library.get("orderItemDS"),new String[]{"name","quantity","price","retailPrice","salePrice"},new Boolean[]{false,false,false,false,false});
      ((OrderItemPresenter)orderItemPresenter).setExpansionDataSource((ListGridDataSource)result,new String[]{"name","quantity","price","retailPrice","salePrice"},new Boolean[]{false,false,false,false,false});
      orderItemPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("countryDS",new CountryListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      ((ListGridDataSource)result).resetPermanentFieldVisibility("abbreviation","name");
      EntitySearchDialog countrySearchView=new EntitySearchDialog((ListGridDataSource)result);
      ((DynamicEntityDataSource)library.get("orderDS")).getFormItemCallbackHandlerManager().addSearchFormItemCallback("address.country",countrySearchView,BLCMain.getMessageManager().getString("countrySearchPrompt"),(DynamicFormDisplay)((OrderDisplay)getDisplay()).getFulfillmentGroupDisplay());
      library.put("countrySearchView",countrySearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("stateDS",new StateListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      ((ListGridDataSource)result).resetPermanentFieldVisibility("abbreviation","name");
      EntitySearchDialog stateSearchView=new EntitySearchDialog((ListGridDataSource)result);
      ((DynamicEntityDataSource)library.get("orderDS")).getFormItemCallbackHandlerManager().addSearchFormItemCallback("address.state",stateSearchView,BLCMain.getMessageManager().getString("stateSearchPrompt"),(DynamicFormDisplay)((OrderDisplay)getDisplay()).getFulfillmentGroupDisplay());
      library.put("stateSearchView",stateSearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("fulfillmentGroupDS",new FulfillmentGroupListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      fulfillmentGroupPresenter=new SubPresenter(((OrderDisplay)getDisplay()).getFulfillmentGroupDisplay());
      fulfillmentGroupPresenter.setDataSource((ListGridDataSource)result,new String[]{"referenceNumber","method","service","shippingPrice","status","address.postalCode"},new Boolean[]{false,false,false,false,false,false});
      fulfillmentGroupPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("paymentInfoDS",new PaymentInfoListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      paymentInfoPresenter=new SubPresenter(((OrderDisplay)getDisplay()).getPaymentInfoDisplay());
      paymentInfoPresenter.setDataSource((ListGridDataSource)result,new String[]{"referenceNumber","type","amount"},new Boolean[]{false,false,false});
      paymentInfoPresenter.setReadOnly(true);
      ((DynamicEntityDataSource)result).getFormItemCallbackHandlerManager().addSearchFormItemCallback("address.country",(EntitySearchDialog)library.get("countrySearchView"),BLCMain.getMessageManager().getString("countrySearchPrompt"),(DynamicFormDisplay)((OrderDisplay)getDisplay()).getFulfillmentGroupDisplay());
      ((DynamicEntityDataSource)result).getFormItemCallbackHandlerManager().addSearchFormItemCallback("address.state",(EntitySearchDialog)library.get("stateSearchView"),BLCMain.getMessageManager().getString("stateSearchPrompt"),(DynamicFormDisplay)((OrderDisplay)getDisplay()).getFulfillmentGroupDisplay());
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("paymentAdditionalAttributesDS",new PaymentAdditionalAttributesDataSourceFactory(this),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      Map<String,Object> initialValues=new HashMap<String,Object>();
      initialValues.put("key",BLCMain.getMessageManager().getString("paymentAttributeKeyDefault"));
      initialValues.put("value",BLCMain.getMessageManager().getString("paymentAttributeValueDefault"));
      additionalPaymentAttributesPresenter=new SimpleMapStructurePresenter(((OrderDisplay)getDisplay()).getAdditionalAttributesDisplay(),initialValues);
      additionalPaymentAttributesPresenter.setDataSource((ListGridDataSource)result,new String[]{"key","value"},new Boolean[]{true,true});
      additionalPaymentAttributesPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("offerCodeDS",new OfferCodeListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      offerCodePresenter=new SubPresenter(((OrderDisplay)getDisplay()).getOfferCodeDisplay());
      offerCodePresenter.setDataSource((ListGridDataSource)result,new String[]{"offerCode","startDate","endDate","offer.name","offer.type","offer.value"},new Boolean[]{false,false,false,false,false,false});
      offerCodePresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("orderAdjustmentDS",new OrderAdjustmentListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      orderAdjustmentPresenter=new CreateBasedListStructurePresenter(((OrderDisplay)getDisplay()).getOrderAdjustmentDisplay(),BLCMain.getMessageManager().getString("newOrderAdjustmentTitle"));
      orderAdjustmentPresenter.setDataSource((ListGridDataSource)result,new String[]{"reason","value","offer.name","offer.type"},new Boolean[]{false,false,false,false});
      orderAdjustmentPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("orderItemAdjustmentDS",new OrderItemAdjustmentListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      orderItemAdjustmentPresenter=new CreateBasedListStructurePresenter(((OrderDisplay)getDisplay()).getOrderItemAdjustmentDisplay(),BLCMain.getMessageManager().getString("newOrderItemAdjustmentTitle"));
      orderItemAdjustmentPresenter.setDataSource((ListGridDataSource)result,new String[]{"reason","value","offer.type"},new Boolean[]{false,false,false});
      orderItemAdjustmentPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("fulfillmentGroupAdjustmentDS",new FulfillmentGroupAdjustmentListDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      fulfillmentGroupAdjustmentPresenter=new CreateBasedListStructurePresenter(((OrderDisplay)getDisplay()).getFulfillmentGroupAdjustmentDisplay(),BLCMain.getMessageManager().getString("newFGAdjustmentTitle"));
      fulfillmentGroupAdjustmentPresenter.setDataSource((ListGridDataSource)result,new String[]{"reason","value","offer.type"},new Boolean[]{false,false,false});
      fulfillmentGroupAdjustmentPresenter.setReadOnly(true);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("discreteOrderItemFeePriceDS",new DiscreteOrderItemFeePriceDataSourceFactory(),null,new Object[]{},new AsyncCallbackAdapter(){
    public void onSetupSuccess(    DataSource result){
      feesPresenter=new CreateBasedListStructurePresenter(((OrderDisplay)getDisplay()).getOrderItemFeeDisplay(),BLCMain.getMessageManager().getString("newOrderItemFeeTitle"));
      feesPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","amount","reportingCode"},new Boolean[]{false,false,false});
      feesPresenter.setReadOnly(true);
    }
  }
));
}

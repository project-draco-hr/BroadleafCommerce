{
  Main.NON_MODAL_PROGRESS.startProgress();
  AppServices.DYNAMIC_ENTITY.inspect(ceilingEntityFullyQualifiedClassname,foreignFields,additionalNonPersistentProperties,new AbstractCallback<DynamicResultSet>(){
    @Override protected void onOtherException(    Throwable exception){
      super.onOtherException(exception);
      cb.onFailure(exception);
    }
    @Override protected void onSecurityException(    ApplicationSecurityException exception){
      super.onSecurityException(exception);
      cb.onFailure(exception);
    }
    public void onSuccess(    DynamicResultSet result){
      super.onSuccess(result);
      ClassMetadata metadata=result.getClassMetaData();
      for (      Property property : metadata.getProperties()) {
        String propertyName=property.getName();
        String fieldType=property.getType();
        Long length=property.getLength();
        Boolean required=property.getRequired();
        if (required == null) {
          required=false;
        }
        Boolean mutable=property.getMutable();
        String inheritedFromType=property.getInheritedFromType();
        String availableToTypes=property.getAvailableToTypes();
        String foreignKeyClass=property.getForeignKeyClass();
        String foreignKeyProperty=property.getForeignKeyProperty();
        String friendlyName=property.getFriendlyName();
        Boolean hidden=property.getHidden();
        String group=property.getGroup();
        Boolean largeEntry=property.getLargeEntry();
        Boolean prominent=property.getProminent();
        Integer order=property.getOrder();
        DataSourceField field;
switch (SupportedFieldType.valueOf(fieldType)) {
case ID:
          field=new DataSourceTextField("id");
        field.setCanEdit(false);
      field.setPrimaryKey(true);
    field.setHidden(true);
  field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
case BOOLEAN:
field=new DataSourceBooleanField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setCanEdit(mutable);
break;
case DATE:
field=new DataSourceDateTimeField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case INTEGER:
field=new DataSourceIntegerField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case DECIMAL:
field=new DataSourceFloatField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case EMAIL:
field=new DataSourceTextField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setValidators(Validators.EMAIL);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case MONEY:
field=new DataSourceFloatField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setValidators(Validators.USCURRENCY);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case FOREIGN_KEY:
field=new DataSourceTextField(propertyName,friendlyName != null ? friendlyName : propertyName);
String dataSourceName=null;
for (ForeignKey foreignKey : foreignFields) {
if (foreignKey.getForeignKeyClass().equals(foreignKeyClass)) {
dataSourceName=foreignKey.getDataSourceName();
break;
}
}
if (dataSourceName == null) {
field.setForeignKey(foreignKeyProperty);
}
 else {
field.setForeignKey(dataSourceName + "." + foreignKeyProperty);
}
field.setForeignKey(foreignKeyProperty);
field.setHidden(true);
field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
default :
field=new DataSourceTextField(propertyName,friendlyName != null ? friendlyName : propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
}
if (hidden != null) {
field.setHidden(hidden);
field.setAttribute("permanentlyHidden",hidden);
}
if (group != null) {
field.setAttribute("formGroup",group);
}
if (largeEntry != null) {
field.setAttribute("largeEntry",largeEntry);
}
if (prominent != null) {
field.setAttribute("prominent",prominent);
}
if (order != null) {
field.setAttribute("order",order);
}
if (length != null) {
field.setLength(length.intValue());
}
field.setAttribute("inheritedFromType",inheritedFromType);
field.setAttribute("availableToTypes",availableToTypes);
field.setAttribute("fieldType",fieldType);
addField(field);
}
DataSourceField typeField=new DataSourceTextField("type");
typeField.setCanEdit(false);
typeField.setHidden(true);
addField(typeField);
for (PolymorphicEntity polymorphicEntity : metadata.getPolymorphicEntities()) {
String name=polymorphicEntity.getName();
String type=polymorphicEntity.getType();
polymorphicEntities.put(type,name);
}
defaultNewEntityFullyQualifiedClassname=polymorphicEntities.keySet().iterator().next();
cb.onSuccess(DynamicEntityDataSource.this);
}
}
);
}

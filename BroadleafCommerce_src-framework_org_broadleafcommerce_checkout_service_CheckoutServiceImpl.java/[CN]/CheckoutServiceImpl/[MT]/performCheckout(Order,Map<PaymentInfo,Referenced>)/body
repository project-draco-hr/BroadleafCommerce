{
  for (  PaymentInfo info : payments.keySet()) {
    if (info.getReferenceNumber() == null) {
      throw new CheckoutException("PaymentInfo reference number cannot be null");
    }
  }
  for (  Referenced referenced : payments.values()) {
    if (referenced.getReferenceNumber() == null) {
      throw new CheckoutException("Referenced reference number cannot be null");
    }
  }
  try {
    CheckoutSeed seed=new CheckoutSeed(order,payments,new HashMap<String,Object>());
    checkoutWorkflow.doActivities(seed);
    return seed;
  }
 catch (  WorkflowException e) {
    Throwable cause=e;
    while (e.getCause() != null) {
      if (cause.equals(e.getCause())) {
        break;
      }
      cause=e.getCause();
    }
    throw new CheckoutException("Unable to checkout order -- id: " + order.getId(),cause);
  }
}

{
  AdornedTargetCollectionMetadata serverMetadata=(AdornedTargetCollectionMetadata)attributes.get(field.getName());
  AdornedTargetCollectionMetadata metadata=new AdornedTargetCollectionMetadata();
  if (serverMetadata != null && adornedTargetCollectionMetadata.isMutable() == null) {
    metadata.setMutable(serverMetadata.isMutable());
  }
 else {
    metadata.setMutable(adornedTargetCollectionMetadata.isMutable());
  }
  org.broadleafcommerce.openadmin.client.dto.OperationTypes dtoOperationTypes=new org.broadleafcommerce.openadmin.client.dto.OperationTypes();
  if (serverMetadata != null && adornedTargetCollectionMetadata.getAddType() == null) {
    dtoOperationTypes.setAddType(serverMetadata.getPersistencePerspective().getOperationTypes().getAddType());
  }
 else {
    dtoOperationTypes.setAddType(adornedTargetCollectionMetadata.getAddType());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getRemoveType() == null) {
    dtoOperationTypes.setRemoveType(serverMetadata.getPersistencePerspective().getOperationTypes().getRemoveType());
  }
 else {
    dtoOperationTypes.setRemoveType(adornedTargetCollectionMetadata.getRemoveType());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getFetchType() == null) {
    dtoOperationTypes.setFetchType(serverMetadata.getPersistencePerspective().getOperationTypes().getFetchType());
  }
 else {
    dtoOperationTypes.setFetchType(adornedTargetCollectionMetadata.getFetchType());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getInspectType() == null) {
    dtoOperationTypes.setInspectType(serverMetadata.getPersistencePerspective().getOperationTypes().getInspectType());
  }
 else {
    dtoOperationTypes.setInspectType(adornedTargetCollectionMetadata.getInspectType());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getUpdateType() == null) {
    dtoOperationTypes.setUpdateType(serverMetadata.getPersistencePerspective().getOperationTypes().getUpdateType());
  }
 else {
    dtoOperationTypes.setInspectType(adornedTargetCollectionMetadata.getUpdateType());
  }
  PersistencePerspective persistencePerspective=new PersistencePerspective(dtoOperationTypes,new String[]{},new ForeignKey[]{});
  if (serverMetadata != null && adornedTargetCollectionMetadata.getConfigurationKey() == null) {
    serverMetadata.getPersistencePerspective().setConfigurationKey(serverMetadata.getPersistencePerspective().getConfigurationKey());
  }
 else {
    if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getConfigurationKey())) {
      persistencePerspective.setConfigurationKey(adornedTargetCollectionMetadata.getConfigurationKey());
    }
  }
  metadata.setPersistencePerspective(persistencePerspective);
  OneToMany oneToMany=field.getAnnotation(OneToMany.class);
  ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
  String parentObjectProperty=null;
  if (serverMetadata != null && adornedTargetCollectionMetadata.getParentObjectProperty() == null) {
    parentObjectProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getLinkedObjectPath();
  }
 else {
    checkProperty: {
      if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getParentObjectProperty())) {
        parentObjectProperty=adornedTargetCollectionMetadata.getParentObjectProperty();
        break checkProperty;
      }
      if (oneToMany != null && !StringUtils.isEmpty(oneToMany.mappedBy())) {
        parentObjectProperty=oneToMany.mappedBy();
        break checkProperty;
      }
      if (manyToMany != null && !StringUtils.isEmpty(manyToMany.mappedBy())) {
        parentObjectProperty=manyToMany.mappedBy();
        break checkProperty;
      }
      if (StringUtils.isEmpty(parentObjectProperty)) {
        throw new IllegalArgumentException("Unable to infer a parentObjectProperty for the @AdminPresentationAdornedTargetCollection annotated field(" + field.getName() + "). If not using the mappedBy property of @OneToMany or @ManyToMany, please make sure to explicitly define the parentObjectProperty property");
      }
    }
  }
  String sortProperty;
  if (serverMetadata != null && adornedTargetCollectionMetadata.getSortProperty() == null) {
    sortProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getSortField();
  }
 else {
    if (StringUtils.isEmpty(adornedTargetCollectionMetadata.getSortProperty())) {
      sortProperty=null;
    }
 else {
      sortProperty=adornedTargetCollectionMetadata.getSortProperty();
    }
  }
  String ceiling=null;
  checkCeiling: {
    if (oneToMany != null && oneToMany.targetEntity() != void.class) {
      ceiling=oneToMany.targetEntity().getName();
      break checkCeiling;
    }
    if (manyToMany != null && manyToMany.targetEntity() != void.class) {
      ceiling=manyToMany.targetEntity().getName();
      break checkCeiling;
    }
  }
  if (!StringUtils.isEmpty(ceiling)) {
    metadata.setCollectionCeilingEntity(ceiling);
  }
  metadata.setParentObjectClass(targetClass.getName());
  if (serverMetadata != null && adornedTargetCollectionMetadata.getMaintainedAdornedTargetFields() == null) {
    metadata.setMaintainedAdornedTargetFields(serverMetadata.getMaintainedAdornedTargetFields());
  }
 else {
    metadata.setMaintainedAdornedTargetFields(adornedTargetCollectionMetadata.getMaintainedAdornedTargetFields());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getGridVisibleFields() == null) {
    metadata.setGridVisibleFields(serverMetadata.getGridVisibleFields());
  }
 else {
    metadata.setGridVisibleFields(adornedTargetCollectionMetadata.getGridVisibleFields());
  }
  String parentObjectIdProperty;
  if (serverMetadata != null && adornedTargetCollectionMetadata.getParentObjectIdProperty() == null) {
    parentObjectIdProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getLinkedIdProperty();
  }
 else {
    parentObjectIdProperty=adornedTargetCollectionMetadata.getParentObjectIdProperty();
  }
  String targetObjectProperty;
  if (serverMetadata != null && adornedTargetCollectionMetadata.getTargetObjectProperty() == null) {
    targetObjectProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getTargetObjectPath();
  }
 else {
    targetObjectProperty=adornedTargetCollectionMetadata.getTargetObjectProperty();
  }
  String targetObjectIdProperty;
  if (serverMetadata != null && adornedTargetCollectionMetadata.getTargetObjectIdProperty() == null) {
    targetObjectIdProperty=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getTargetIdProperty();
  }
 else {
    targetObjectIdProperty=adornedTargetCollectionMetadata.getTargetObjectIdProperty();
  }
  Boolean isAscending;
  if (serverMetadata != null && adornedTargetCollectionMetadata.isSortAscending() == null) {
    isAscending=((AdornedTargetList)serverMetadata.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST)).getSortAscending();
  }
 else {
    isAscending=adornedTargetCollectionMetadata.isSortAscending();
  }
  AdornedTargetList adornedTargetList=new AdornedTargetList(field.getName(),parentObjectProperty,parentObjectIdProperty,targetObjectProperty,targetObjectIdProperty,ceiling,sortProperty,isAscending);
  persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.ADORNEDTARGETLIST,adornedTargetList);
  if (serverMetadata != null && adornedTargetCollectionMetadata.getExcluded() == null) {
    metadata.setExcluded(serverMetadata.getExcluded());
  }
 else {
    metadata.setExcluded(adornedTargetCollectionMetadata.getExcluded());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getFriendlyName() == null) {
    metadata.setFriendlyName(serverMetadata.getFriendlyName());
  }
 else {
    metadata.setFriendlyName(adornedTargetCollectionMetadata.getFriendlyName());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getSecurityLevel() == null) {
    metadata.setSecurityLevel(serverMetadata.getSecurityLevel());
  }
 else {
    metadata.setSecurityLevel(adornedTargetCollectionMetadata.getSecurityLevel());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getOrder() == null) {
    metadata.setOrder(serverMetadata.getOrder());
  }
 else {
    metadata.setOrder(adornedTargetCollectionMetadata.getOrder());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getTargetElementId() == null) {
    metadata.setTargetElementId(serverMetadata.getTargetElementId());
  }
 else {
    if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getTargetElementId())) {
      metadata.setTargetElementId(adornedTargetCollectionMetadata.getTargetElementId());
    }
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getDataSourceName() == null) {
    metadata.setDataSourceName(serverMetadata.getDataSourceName());
  }
 else {
    if (!StringUtils.isEmpty(adornedTargetCollectionMetadata.getDataSourceName())) {
      metadata.setDataSourceName(adornedTargetCollectionMetadata.getDataSourceName());
    }
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.getCustomCriteria() == null) {
    metadata.setCustomCriteria(serverMetadata.getCustomCriteria());
  }
 else {
    metadata.setCustomCriteria(adornedTargetCollectionMetadata.getCustomCriteria());
  }
  if (serverMetadata != null && adornedTargetCollectionMetadata.isIgnoreAdornedProperties() == null) {
    metadata.setIgnoreAdornedProperties(serverMetadata.isIgnoreAdornedProperties());
  }
 else {
    metadata.setIgnoreAdornedProperties(adornedTargetCollectionMetadata.isIgnoreAdornedProperties());
  }
  attributes.put(field.getName(),metadata);
}

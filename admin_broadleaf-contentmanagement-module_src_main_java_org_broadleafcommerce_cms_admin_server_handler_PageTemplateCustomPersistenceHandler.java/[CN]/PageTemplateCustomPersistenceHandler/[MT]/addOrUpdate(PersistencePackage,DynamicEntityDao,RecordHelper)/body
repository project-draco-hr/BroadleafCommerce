{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    String pageId=persistencePackage.getCustomCriteria()[1];
    Page page=pageService.findPageById(Long.valueOf(pageId));
    Property[] properties=dynamicFieldUtil.buildDynamicPropertyList(getFieldGroups(page,null),PageTemplate.class);
    Map<String,FieldMetadata> md=new HashMap<String,FieldMetadata>();
    for (    Property property : properties) {
      md.put(property.getName(),property.getMetadata());
    }
    boolean validated=helper.validate(persistencePackage.getEntity(),null,md);
    if (!validated) {
      throw new ValidationException(persistencePackage.getEntity(),"Page dynamic fields failed validation");
    }
    List<String> templateFieldNames=new ArrayList<String>(20);
    for (    FieldGroup group : getFieldGroups(page,null)) {
      for (      FieldDefinition definition : group.getFieldDefinitions()) {
        templateFieldNames.add(definition.getName());
      }
    }
    Map<String,String> dirtyFieldsOrigVals=new HashMap<String,String>();
    List<String> dirtyFields=new ArrayList<String>();
    Map<String,PageField> pageFieldMap=page.getPageFields();
    for (    Property property : persistencePackage.getEntity().getProperties()) {
      if (templateFieldNames.contains(property.getName())) {
        PageField pageField=pageFieldMap.get(property.getName());
        if (pageField != null) {
          boolean isDirty=(pageField.getValue() == null && property.getValue() != null) || (pageField.getValue() != null && property.getValue() == null);
          if (isDirty || (pageField.getValue() != null && property.getValue() != null && !pageField.getValue().trim().equals(property.getValue().trim()))) {
            dirtyFields.add(property.getName());
            dirtyFieldsOrigVals.put(property.getName(),pageField.getValue());
          }
          pageField.setValue(property.getValue());
        }
 else {
          pageField=new PageFieldImpl();
          pageField.setFieldKey(property.getName());
          pageField.setValue(property.getValue());
          dynamicEntityDao.persist(pageField);
          pageFieldMap.put(property.getName(),pageField);
          dirtyFields.add(property.getName());
        }
      }
    }
    List<String> removeItems=new ArrayList<String>();
    for (    String key : pageFieldMap.keySet()) {
      if (persistencePackage.getEntity().findProperty(key) == null) {
        removeItems.add(key);
      }
    }
    if (removeItems.size() > 0) {
      for (      String removeKey : removeItems) {
        pageFieldMap.remove(removeKey);
      }
    }
    Collections.sort(dirtyFields);
    Entity entity=fetchEntityBasedOnId(pageId,dirtyFields);
    for (    Map.Entry<String,String> entry : dirtyFieldsOrigVals.entrySet()) {
      entity.getPMap().get(entry.getKey()).setOriginalValue(entry.getValue());
      entity.getPMap().get(entry.getKey()).setOriginalDisplayValue(entry.getValue());
    }
    return entity;
  }
 catch (  ValidationException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ServiceException("Unable to perform update for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

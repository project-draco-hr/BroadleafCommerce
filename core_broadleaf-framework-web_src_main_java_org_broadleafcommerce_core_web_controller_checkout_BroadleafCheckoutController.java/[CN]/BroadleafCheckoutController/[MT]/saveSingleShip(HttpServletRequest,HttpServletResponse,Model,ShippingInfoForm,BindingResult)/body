{
  exploitProtectionService.compareToken(shippingForm.getCsrfToken());
  Order cart=CartState.getCart();
  shippingInfoFormValidator.validate(shippingForm,result);
  if (result.hasErrors()) {
    putFulfillmentOptionsAndEstimationOnModel(model);
    model.addAttribute("states",stateService.findStates());
    model.addAttribute("countries",countryService.findCountries());
    model.addAttribute("expirationMonths",populateExpirationMonths());
    model.addAttribute("expirationYears",populateExpirationYears());
    model.addAttribute("validShipping",false);
    return getCheckoutView();
  }
  FulfillmentGroup fulfillmentGroup=cart.getFulfillmentGroups().get(0);
  fulfillmentGroup.setAddress(shippingForm.getAddress());
  fulfillmentGroup.setPersonalMessage(shippingForm.getPersonalMessage());
  fulfillmentGroup.setDeliveryInstruction(shippingForm.getDeliveryMessage());
  FulfillmentOption fulfillmentOption=fulfillmentOptionService.readFulfillmentOptionById(shippingForm.getFulfillmentOptionId());
  fulfillmentGroup.setFulfillmentOption(fulfillmentOption);
  cart=orderService.save(cart,true);
  CartState.setCart(cart);
  return isAjaxRequest(request) ? getCheckoutView() : getCheckoutPageRedirect();
}

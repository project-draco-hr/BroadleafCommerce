{
  Order cart=CartState.getCart();
  Map<PaymentInfo,Referenced> payments=new HashMap<PaymentInfo,Referenced>();
  orderService.removePaymentsFromOrder(cart,PaymentInfoType.CREDIT_CARD);
  billingInfoFormValidator.validate(billingForm,result);
  if (result.hasErrors()) {
    checkout(request,response,model);
    return getCheckoutView();
  }
  PaymentInfo ccInfo=creditCardPaymentInfoFactory.constructPaymentInfo(cart);
  ccInfo.setAddress(billingForm.getAddress());
  cart.getPaymentInfos().add(ccInfo);
  CreditCardPaymentInfo ccReference=(CreditCardPaymentInfo)securePaymentInfoService.create(PaymentInfoType.CREDIT_CARD);
  ccReference.setNameOnCard(billingForm.getCreditCardName());
  ccReference.setReferenceNumber(ccInfo.getReferenceNumber());
  ccReference.setPan(billingForm.getCreditCardNumber());
  ccReference.setCvvCode(billingForm.getCreditCardCvvCode());
  ccReference.setExpirationMonth(Integer.parseInt(billingForm.getCreditCardExpMonth()));
  ccReference.setExpirationYear(Integer.parseInt(billingForm.getCreditCardExpYear()));
  payments.put(ccInfo,ccReference);
  cart.setOrderNumber(new SimpleDateFormat("yyyyMMddHHmmssS").format(SystemTime.asDate()));
  cart.setStatus(OrderStatus.SUBMITTED);
  cart.setSubmitDate(Calendar.getInstance().getTime());
  CheckoutResponse checkoutResponse=checkoutService.performCheckout(cart,payments);
  if (!checkoutResponse.getPaymentResponse().getResponseItems().get(ccInfo).getTransactionSuccess()) {
    checkout(request,response,model);
    model.addAttribute("paymentException",true);
    return getCheckoutView();
  }
  return getConfirmationView(cart.getOrderNumber());
}

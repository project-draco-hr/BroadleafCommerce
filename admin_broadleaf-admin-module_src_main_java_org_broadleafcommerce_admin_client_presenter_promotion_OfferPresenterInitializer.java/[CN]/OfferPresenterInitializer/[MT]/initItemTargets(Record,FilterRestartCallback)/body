{
  Criteria relationshipCriteria=offerItemTargetCriteriaDataSource.createRelationshipCriteria(offerItemTargetCriteriaDataSource.getPrimaryKeyValue(selectedRecord));
  offerItemTargetCriteriaDataSource.fetchData(relationshipCriteria,new DSCallback(){
    public void execute(    DSResponse response,    Object rawData,    DSRequest request){
      boolean isTargetCriteria=false;
      if (response.getTotalRows() > 0) {
        for (        Record record : response.getData()) {
          if (Integer.parseInt(record.getAttribute("quantity")) > 0) {
            isTargetCriteria=true;
            break;
          }
        }
      }
      getDisplay().getNewTargetItemBuilderLayout().setVisible(true);
      if (isTargetCriteria) {
        getDisplay().removeAllTargetItemBuilders();
        for (        Record record : response.getData()) {
          if (Integer.parseInt(record.getAttribute("quantity")) > 0) {
            final ItemBuilderDisplay display=getDisplay().addTargetItemBuilder(orderItemDataSource);
            presenter.bindItemBuilderEvents(display,true);
            display.getItemFilterBuilder().clearCriteria();
            display.setRecord(record);
            display.getItemQuantity().setValue(Integer.parseInt(record.getAttribute("quantity")));
            try {
              display.getItemFilterBuilder().setVisible(true);
              display.getRawItemForm().setVisible(false);
              AdvancedCriteria myCriteria=TRANSLATOR.createAdvancedCriteria(record.getAttribute("orderItemMatchRule"),orderItemDataSource);
              if (myCriteria != null) {
                display.getItemFilterBuilder().setCriteria(myCriteria);
              }
            }
 catch (            IncompatibleMVELTranslationException e) {
              GWT.log("Could not translate MVEL",e);
              SC.warn(BLCMain.getMessageManager().getString("mvelTranslationProblem"));
              display.setIncompatibleMVEL(true);
              display.getItemFilterBuilder().setVisible(false);
              display.getRawItemForm().setVisible(true);
              display.getRawItemTextArea().setValue(record.getAttribute("orderItemMatchRule"));
            }
            display.getRemoveButton().addClickHandler(new ClickHandler(){
              public void onClick(              ClickEvent event){
                getDisplay().removeTargetItemBuilder(display);
              }
            }
);
          }
        }
      }
 else {
        getDisplay().removeAllTargetItemBuilders();
        presenter.bindItemBuilderEvents(getDisplay().addTargetItemBuilder(orderItemDataSource),true);
      }
      if (cb != null) {
        cb.processComplete();
      }
      Timer timer=new Timer(){
        @Override public void run(){
          getDisplay().getDynamicFormDisplay().getSaveButton().disable();
          getDisplay().getDynamicFormDisplay().getRefreshButton().disable();
        }
      }
;
      timer.schedule(500);
    }
  }
);
  String offerItemTargetRuleType=selectedRecord.getAttribute("offerItemTargetRuleType");
  if (offerItemTargetRuleType == null) {
    offerItemTargetRuleType="NONE";
  }
  if (offerItemTargetRuleType.equals("NONE")) {
    getDisplay().getQualifyForAnotherPromoTargetRadio().setValue("NO");
    getDisplay().getReceiveFromAnotherPromoTargetRadio().setValue("NO");
  }
 else   if (offerItemTargetRuleType.equals("QUALIFIER")) {
    getDisplay().getQualifyForAnotherPromoTargetRadio().setValue("YES");
    getDisplay().getReceiveFromAnotherPromoTargetRadio().setValue("NO");
  }
 else   if (offerItemTargetRuleType.equals("TARGET")) {
    getDisplay().getQualifyForAnotherPromoTargetRadio().setValue("NO");
    getDisplay().getReceiveFromAnotherPromoTargetRadio().setValue("YES");
  }
 else   if (offerItemTargetRuleType.equals("QUALIFIER_TARGET")) {
    getDisplay().getQualifyForAnotherPromoTargetRadio().setValue("YES");
    getDisplay().getReceiveFromAnotherPromoTargetRadio().setValue("YES");
  }
}

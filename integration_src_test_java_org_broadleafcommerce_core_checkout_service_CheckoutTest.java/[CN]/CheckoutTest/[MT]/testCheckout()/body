{
  String userName="customer1";
  Customer customer=customerService.readCustomerByUsername(userName);
  Order order=cartService.createNewCartForCustomer(customer);
  Address address=new AddressImpl();
  address.setAddressLine1("123 Test Rd");
  address.setCity("Dallas");
  address.setFirstName("Jeff");
  address.setLastName("Fischer");
  address.setPostalCode("75240");
  address.setPrimaryPhone("972-978-9067");
  State state=new StateImpl();
  state.setAbbreviation("ALL");
  state.setName("ALL");
  address.setState(state);
  Country country=new CountryImpl();
  country.setAbbreviation("US");
  country.setName("United States");
  state.setCountry(country);
  address.setCountry(country);
  FulfillmentGroup group=new FulfillmentGroupImpl();
  group.setIsShippingPriceTaxable(true);
  group.setOrder(order);
  group.setAddress(address);
  List<FulfillmentGroup> groups=new ArrayList<FulfillmentGroup>();
  groups.add(group);
  order.setFulfillmentGroups(groups);
  Money total=new Money(5D);
  group.setShippingPrice(total);
  group.setMethod("standard");
  group.setService(ShippingServiceType.BANDED_SHIPPING.getType());
  DiscreteOrderItem item=new DiscreteOrderItemImpl();
  item.setOrder(order);
  item.setPrice(new Money(14.99D));
  item.setRetailPrice(new Money(14.99D));
  item.setQuantity(1);
  Sku newSku=new SkuImpl();
  newSku.setName("Under Armor T-Shirt -- Red");
  newSku.setRetailPrice(new Money(14.99));
  newSku.setActiveStartDate(SystemTime.asDate());
  newSku.setDiscountable(false);
  newSku=catalogService.saveSku(newSku);
  item.setSku(newSku);
  item=(DiscreteOrderItem)orderItemService.saveOrderItem(item);
  List<OrderItem> items=new ArrayList<OrderItem>();
  items.add(item);
  order.setOrderItems(items);
  FulfillmentGroupItem fgItem=new FulfillmentGroupItemImpl();
  fgItem.setFulfillmentGroup(group);
  fgItem.setOrderItem(item);
  fgItem.setQuantity(1);
  group.addFulfillmentGroupItem(fgItem);
  order.setTotalShipping(new Money(0D));
  PaymentInfo payment=new PaymentInfoImpl();
  payment.setAddress(address);
  payment.setAmount(new Money(15D + (15D * 0.05D)));
  payment.setReferenceNumber("1234");
  payment.setType(PaymentInfoType.CREDIT_CARD);
  payment.setOrder(order);
  CreditCardPaymentInfo cc=new CreditCardPaymentInfo(){
    private String referenceNumber="1234";
    public String getCvvCode(){
      return "123";
    }
    public Integer getExpirationMonth(){
      return 11;
    }
    public Integer getExpirationYear(){
      return 2011;
    }
    public Long getId(){
      return null;
    }
    public String getPan(){
      return "1111111111111111";
    }
    public void setCvvCode(    String cvvCode){
    }
    public void setExpirationMonth(    Integer expirationMonth){
    }
    public void setExpirationYear(    Integer expirationYear){
    }
    public void setId(    Long id){
    }
    public void setPan(    String pan){
    }
    public EncryptionModule getEncryptionModule(){
      return encryptionModule;
    }
    public String getReferenceNumber(){
      return referenceNumber;
    }
    public void setEncryptionModule(    EncryptionModule encryptionModule){
    }
    public void setReferenceNumber(    String referenceNumber){
      this.referenceNumber=referenceNumber;
    }
  }
;
  Map<PaymentInfo,Referenced> map=new HashMap<PaymentInfo,Referenced>();
  map.put(payment,cc);
  CheckoutResponse response=checkoutService.performCheckout(order,map);
  for (  PaymentInfo paymentInfo : response.getInfos().keySet()) {
    assert(paymentInfo.getReferenceNumber().equals("abc123"));
    assert(response.getInfos().get(paymentInfo).getReferenceNumber().equals("abc123"));
  }
  Referenced referenced=null;
  try {
    referenced=securePaymentInfoService.findSecurePaymentInfo("abc123",PaymentInfoType.CREDIT_CARD);
  }
 catch (  Exception e) {
  }
  try {
    referenced=securePaymentInfoService.findSecurePaymentInfo("1234",PaymentInfoType.CREDIT_CARD);
  }
 catch (  Exception e) {
  }
  assert(referenced == null);
  assert(order.getTotal().greaterThan(order.getSubTotal()));
  assert(order.getTotalTax().equals(order.getSubTotal().add(order.getTotalShipping()).multiply(0.05D)));
  assert(response.getPaymentResponse().getResponseItems().size() > 0);
}

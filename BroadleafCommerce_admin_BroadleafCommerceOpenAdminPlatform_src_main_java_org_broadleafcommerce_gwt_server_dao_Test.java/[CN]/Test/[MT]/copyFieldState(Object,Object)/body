{
  if (!src.getClass().isAssignableFrom(dest.getClass())) {
    throw new IllegalArgumentException("Destination class [" + dest.getClass().getName() + "] must be same or subclass as source class ["+ src.getClass().getName()+ "]");
  }
  org.springframework.util.ReflectionUtils.doWithFields(src.getClass(),new org.springframework.util.ReflectionUtils.FieldCallback(){
    @SuppressWarnings({"rawtypes","unchecked"}) public void doWith(    final Field field) throws IllegalArgumentException, IllegalAccessException {
      if (Modifier.isStatic(field.getModifiers()) || Modifier.isFinal(field.getModifiers())) {
        return;
      }
      org.springframework.util.ReflectionUtils.makeAccessible(field);
      final Object srcValue=field.get(src);
      final Object destValue=field.get(dest);
      if (srcValue != null && destValue != null) {
        if (srcValue.equals(destValue) && isEntity(srcValue)) {
          copyFieldState(srcValue,destValue);
          return;
        }
 else         if (Collection.class.isAssignableFrom(srcValue.getClass())) {
          Object[] srcArray=((Collection)srcValue).toArray();
          Object[] destArray=((Collection)destValue).toArray();
          for (          Object newSrcValue : srcArray) {
            int index=Arrays.binarySearch(destArray,newSrcValue,new Comparator(){
              public int compare(              Object o1,              Object o2){
                if (o1.equals(o2)) {
                  return 0;
                }
                return -1;
              }
            }
);
            if (index >= 0) {
              if (isEntity(newSrcValue)) {
                copyFieldState(newSrcValue,destArray[index]);
              }
 else {
                ((Collection)destValue).remove(newSrcValue);
                ((Collection)destValue).add(newSrcValue);
              }
            }
 else {
              ((Collection)destValue).add(newSrcValue);
            }
          }
          return;
        }
 else         if (Map.class.isAssignableFrom(srcValue.getClass())) {
          Map srcMap=(Map)srcValue;
          Map destMap=(Map)destValue;
          for (          Object key : srcMap.keySet()) {
            if (destMap.containsKey(key)) {
              Object newSrcValue=srcMap.get(key);
              Object newDestValue=destMap.get(key);
              if (newSrcValue.equals(newDestValue)) {
                if (isEntity(newSrcValue)) {
                  copyFieldState(newSrcValue,newDestValue);
                }
 else {
                  destMap.remove(key);
                  destMap.put(key,newDestValue);
                }
                continue;
              }
            }
            destMap.put(key,destMap.get(key));
          }
          return;
        }
      }
      if (srcValue != null) {
        field.set(dest,srcValue);
      }
    }
  }
);
}

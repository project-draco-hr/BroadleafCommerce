{
  Map<String,FieldMetadataOverride> overrides=getTargetedOverride(overrideViaXmlRequest.getRequestedConfigKey(),overrideViaXmlRequest.getRequestedCeilingEntity());
  if (overrides != null) {
    for (    String propertyName : overrides.keySet()) {
      final FieldMetadataOverride localMetadata=overrides.get(propertyName);
      for (      String key : overrideViaXmlRequest.getRequestedMetadata().keySet()) {
        if (key.equals(propertyName)) {
          try {
            if (overrideViaXmlRequest.getRequestedMetadata().get(key) instanceof AdornedTargetCollectionMetadata) {
              AdornedTargetCollectionMetadata serverMetadata=(AdornedTargetCollectionMetadata)overrideViaXmlRequest.getRequestedMetadata().get(key);
              if (serverMetadata.getTargetClass() != null) {
                Class<?> targetClass=Class.forName(serverMetadata.getTargetClass());
                Class<?> parentClass=null;
                if (serverMetadata.getOwningClass() != null) {
                  parentClass=Class.forName(serverMetadata.getOwningClass());
                }
                String fieldName=serverMetadata.getFieldName();
                Field field=overrideViaXmlRequest.getDynamicEntityDao().getFieldManager().getField(targetClass,fieldName);
                Map<String,FieldMetadata> temp=new HashMap<String,FieldMetadata>(1);
                temp.put(field.getName(),serverMetadata);
                FieldInfo info=buildFieldInfo(field);
                buildAdornedTargetCollectionMetadata(parentClass,targetClass,temp,info,localMetadata,overrideViaXmlRequest.getDynamicEntityDao());
                serverMetadata=(AdornedTargetCollectionMetadata)temp.get(field.getName());
                overrideViaXmlRequest.getRequestedMetadata().put(key,serverMetadata);
                if (overrideViaXmlRequest.getParentExcluded()) {
                  if (LOG.isDebugEnabled()) {
                    LOG.debug("applyAdornedTargetCollectionMetadataOverrides:Excluding " + key + "because parent is marked as excluded.");
                  }
                  serverMetadata.setExcluded(true);
                }
              }
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
  return true;
}

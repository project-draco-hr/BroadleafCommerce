{
  try {
    Map<String,FieldMetadata> productProperties=getMergedProperties(Product.class,dynamicEntityDao,persistencePerspective.getPopulateManyToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields());
    Object primaryKey=helper.getPrimaryKey(entity,productProperties);
    Product productInstance=(Product)dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),primaryKey);
    productInstance=(Product)helper.createPopulatedInstance(productInstance,entity,productProperties,false);
    Sku skuInstance=productInstance.getAllSkus().get(0);
    Map<String,FieldMetadata> skuProperties=getMergedProperties(Sku.class,dynamicEntityDao,persistencePerspective.getPopulateManyToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields());
    for (    Property property : entity.getProperties()) {
      if (property.getName().startsWith("allSkus.")) {
        property.setName(property.getName().substring("allSkus.".length(),property.getName().length()));
      }
    }
    skuInstance=(Sku)helper.createPopulatedInstance(skuInstance,entity,skuProperties,false);
    dynamicEntityDao.merge(productInstance);
    Entity productEntity=helper.getRecord(productProperties,productInstance,null,null);
    Entity skuEntity=helper.getRecord(skuProperties,skuInstance,null,null);
    productEntity.mergeProperties("allSkus",skuEntity);
    return productEntity;
  }
 catch (  Exception e) {
    LOG.error("Unable to add entity for " + entity.getType()[0],e);
    throw new ServiceException("Unable to add entity for " + entity.getType()[0],e);
  }
}

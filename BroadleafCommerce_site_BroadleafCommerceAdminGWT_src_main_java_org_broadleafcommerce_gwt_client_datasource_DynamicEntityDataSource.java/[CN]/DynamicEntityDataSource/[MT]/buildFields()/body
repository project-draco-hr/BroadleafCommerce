{
  Main.NON_MODAL_PROGRESS.startProgress();
  AppServices.DYNAMIC_ENTITY.inspect(ceilingEntityFullyQualifiedClassname,optionalFields,new AbstractCallback<DynamicResultSet>(){
    public void onSuccess(    DynamicResultSet result){
      super.onSuccess(result);
      ClassMetadata metadata=result.getClassMetaData();
      for (      Property property : metadata.getProperties()) {
        String propertyName=property.getName();
        String fieldType=property.getType();
        Long length=property.getLength();
        Boolean required=property.getRequired();
        Boolean mutable=property.getMutable();
        String inheritedFromType=property.getInheritedFromType();
        String availableToTypes=property.getAvailableToTypes();
        DataSourceField field;
switch (SupportedFieldType.valueOf(fieldType)) {
case ID:
          field=new DataSourceTextField("id");
        field.setCanEdit(false);
      field.setPrimaryKey(true);
    field.setHidden(true);
  field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
case BOOLEAN:
field=new DataSourceBooleanField(propertyName,propertyName);
field.setCanEdit(mutable);
break;
case DATE:
field=new DataSourceDateTimeField(propertyName,propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case INTEGER:
field=new DataSourceIntegerField(propertyName,propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case DECIMAL:
field=new DataSourceFloatField(propertyName,propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case EMAIL:
field=new DataSourceTextField(propertyName,propertyName);
RegExpValidator emailValidator=new RegExpValidator();
emailValidator.setErrorMessage("Invalid email address");
emailValidator.setExpression("^([a-zA-Z0-9_.\\-+])+@(([a-zA-Z0-9\\-])+\\.)+[a-zA-Z0-9]{2,4}$");
field.setValidators(emailValidator);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case MONEY:
field=new DataSourceFloatField(propertyName,propertyName);
RegExpValidator usCurrencyValidator=new RegExpValidator();
usCurrencyValidator.setErrorMessage("Invalid currency amount");
usCurrencyValidator.setExpression("^(\\d{1,3}(\\,\\d{3})*|(\\d+))(\\.\\d{2})?$");
field.setValidators(usCurrencyValidator);
field.setCanEdit(mutable);
field.setRequired(required);
break;
case HIERARCHY_KEY:
field=new DataSourceTextField(propertyName,propertyName);
field.setForeignKey("id");
field.setHidden(true);
field.setAttribute("permanentlyHidden",true);
field.setRequired(required);
break;
default :
field=new DataSourceTextField(propertyName,propertyName);
field.setCanEdit(mutable);
field.setRequired(required);
break;
}
field.setLength(length.intValue());
field.setAttribute("inheritedFromType",inheritedFromType);
field.setAttribute("availableToTypes",availableToTypes);
addField(field);
}
DataSourceField typeField=new DataSourceTextField("type");
typeField.setCanEdit(false);
typeField.setHidden(true);
addField(typeField);
for (PolymorphicEntity polymorphicEntity : metadata.getPolymorphicEntities()) {
String name=polymorphicEntity.getName();
String type=polymorphicEntity.getType();
polymorphicEntities.put(type,name);
}
defaultNewEntityFullyQualifiedClassname=polymorphicEntities.keySet().iterator().next();
eventBus.fireEvent(new DataSourcePreparedEvent(DynamicEntityDataSource.this,token));
}
}
);
}

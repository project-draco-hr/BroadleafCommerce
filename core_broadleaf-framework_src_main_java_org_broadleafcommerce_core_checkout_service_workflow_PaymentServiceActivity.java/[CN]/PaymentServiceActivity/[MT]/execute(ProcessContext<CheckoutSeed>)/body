{
  CheckoutSeed seed=context.getSeedData();
  CompositePaymentResponse response=compositePaymentService.executePayment(seed.getOrder(),seed.getInfos(),seed.getPaymentResponse());
  for (  Entry<PaymentInfo,PaymentResponseItem> entry : response.getPaymentResponse().getResponseItems().entrySet()) {
    checkTransactionStatus(context,entry.getValue());
    if (context.isStopped()) {
      String log="Stopping checkout workflow due to payment response code: ";
      log+=entry.getValue().getProcessorResponseCode();
      log+=" and text: ";
      log+=entry.getValue().getProcessorResponseText();
      log+=" for payment type: " + entry.getKey().getType().getType();
      LOG.debug(log);
      break;
    }
  }
  Money paidAmount=new Money(0);
  for (  Entry<PaymentInfo,PaymentResponseItem> entry : response.getPaymentResponse().getResponseItems().entrySet()) {
    if (entry.getValue().getTransactionSuccess()) {
      paidAmount=paidAmount.add(entry.getValue().getTransactionAmount());
    }
  }
  if (paidAmount.lessThan(seed.getOrder().getRemainingTotal())) {
    throw new InsufficientFundsException(String.format("Order remaining total was [%s] but paid amount was [%s]",seed.getOrder().getTotal(),paidAmount));
  }
  return context;
}

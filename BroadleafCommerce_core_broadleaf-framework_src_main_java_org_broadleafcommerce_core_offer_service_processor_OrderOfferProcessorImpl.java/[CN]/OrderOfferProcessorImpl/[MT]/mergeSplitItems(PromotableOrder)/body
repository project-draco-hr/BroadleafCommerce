{
  List<PromotableOrderItem> itemsToRemove=new ArrayList<PromotableOrderItem>();
  Iterator<PromotableOrderItem> finalItems=order.getDiscountableDiscreteOrderItems().iterator();
  while (finalItems.hasNext()) {
    PromotableOrderItem nextItem=finalItems.next();
    List<PromotableOrderItem> mySplits=order.searchSplitItems(nextItem);
    if (!CollectionUtils.isEmpty(mySplits)) {
      if (mySplits.size() == 1 && mySplits.contains(nextItem)) {
        mySplits.remove(nextItem);
        continue;
      }
      PromotableOrderItem cloneItem=(PromotableOrderItem)nextItem.clone();
      cloneItem.clearAllDiscount();
      cloneItem.clearAllQualifiers();
      cloneItem.removeAllAdjustments();
      cloneItem.setQuantity(0);
      Iterator<PromotableOrderItem> splitItemIterator=mySplits.iterator();
      while (splitItemIterator.hasNext()) {
        PromotableOrderItem splitItem=splitItemIterator.next();
        if (!splitItem.isHasOrderItemAdjustments()) {
          cloneItem.setQuantity(cloneItem.getQuantity() + splitItem.getQuantity());
          splitItemIterator.remove();
        }
      }
      if (cloneItem.getQuantity() > 0) {
        mySplits.add(cloneItem);
      }
      if (mySplits.contains(nextItem)) {
        mySplits.remove(nextItem);
      }
 else {
        itemsToRemove.add(nextItem);
      }
    }
  }
  try {
    for (    OrderItemSplitContainer key : order.getSplitItems()) {
      List<PromotableOrderItem> mySplits=key.getSplitItems();
      if (!CollectionUtils.isEmpty(mySplits)) {
        PromotableFulfillmentGroup targetGroup=null;
        checkGroups: {
          for (          PromotableFulfillmentGroup fg : order.getFulfillmentGroups()) {
            for (            FulfillmentGroupItem fgItem : fg.getDelegate().getFulfillmentGroupItems()) {
              if (fgItem.getOrderItem().equals(key.getKey())) {
                targetGroup=fg;
                break checkGroups;
              }
            }
          }
        }
        for (        PromotableOrderItem myItem : mySplits) {
          DiscreteOrderItem delegateItem=(DiscreteOrderItem)myItem.getDelegate();
          if (delegateItem.getBundleOrderItem() == null) {
            delegateItem=(DiscreteOrderItem)cartService.addOrderItemToOrder(order.getDelegate(),delegateItem,false);
            cartService.addItemToFulfillmentGroup(delegateItem,targetGroup.getDelegate(),false);
          }
 else {
            delegateItem=(DiscreteOrderItem)cartService.addOrderItemToBundle(order.getDelegate(),delegateItem.getBundleOrderItem(),delegateItem,false);
          }
        }
      }
    }
    for (    PromotableOrderItem orderItem : itemsToRemove) {
      DiscreteOrderItem delegateItem=(DiscreteOrderItem)orderItem.getDelegate();
      if (delegateItem.getBundleOrderItem() == null) {
        cartService.removeItemFromOrder(order.getDelegate(),orderItem.getDelegate(),false);
      }
 else {
        cartService.removeItemFromBundle(order.getDelegate(),delegateItem.getBundleOrderItem(),orderItem.getDelegate(),false);
      }
    }
    order.resetDiscreteOrderItems();
  }
 catch (  PricingException e) {
    throw new RuntimeException("Could not propagate the items split by the promotion engine into the order",e);
  }
}

{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  String[] customCriteria=persistencePackage.getCustomCriteria();
  if (ArrayUtils.isEmpty(customCriteria) || customCriteria.length != 5) {
    ServiceException e=new ServiceException("Invalid request for entity: " + ceilingEntityFullyQualifiedClassname);
    LOG.error("Invalid request for entity: " + ceilingEntityFullyQualifiedClassname,e);
    throw e;
  }
  AdminUser adminUser=adminRemoteSecurityService.getPersistentAdminUser();
  if (adminUser == null) {
    ServiceException e=new ServiceException("Unable to determine current user logged in status");
    throw e;
  }
  try {
    String operation=customCriteria[1];
    List<Long> targets=new ArrayList<Long>();
    if (!StringUtils.isEmpty(customCriteria[2])) {
      String[] parts=customCriteria[2].split(",");
      for (      String part : parts) {
        try {
          targets.add(Long.valueOf(part));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
    String requiredPermission="PERMISSION_ALL_USER_SANDBOX";
    boolean allowOperation=false;
    for (    AdminRole role : adminUser.getAllRoles()) {
      for (      AdminPermission permission : role.getAllPermissions()) {
        if (permission.getName().equals(requiredPermission)) {
          allowOperation=true;
          break;
        }
      }
    }
    if (!allowOperation) {
      ServiceException e=new ServiceException("Current user does not have permission to perform operation");
      LOG.error("Current user does not have permission to perform operation",e);
      throw e;
    }
    SandBox mySandBox=sandBoxService.retrieveUserSandBox(adminUser);
    SandBox approvalSandBox=sandBoxService.retrieveApprovalSandBox(mySandBox);
    if (operation.equals("releaseAll")) {
      sandBoxService.revertAllSandBoxItems(mySandBox,approvalSandBox);
    }
 else     if (operation.equals("releaseSelected")) {
      List<SandBoxItem> items=retrieveSandBoxItems(targets,dynamicEntityDao,mySandBox);
      sandBoxService.revertSelectedSandBoxItems(approvalSandBox,items);
    }
 else     if (operation.equals("reclaimAll")) {
      sandBoxService.rejectAllSandBoxItems(mySandBox,approvalSandBox,"reclaiming sandbox items");
    }
 else     if (operation.equals("reclaimSelected")) {
      List<SandBoxItem> items=retrieveSandBoxItems(targets,dynamicEntityDao,mySandBox);
      sandBoxService.rejectSelectedSandBoxItems(approvalSandBox,"reclaiming sandbox item",items);
    }
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(SandBoxItem.class.getName(),persistencePerspective);
    cto.get("originalSandBoxId").setFilterValue(mySandBox.getId().toString());
    cto.get("archivedFlag").setFilterValue(Boolean.FALSE.toString());
    List<FilterMapping> filterMappings=helper.getFilterMappings(persistencePerspective,cto,SandBoxItem.class.getName(),originalProps);
    List<Serializable> records=helper.getPersistentRecords(SandBoxItem.class.getName(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    Entity[] results=helper.getRecords(originalProps,records);
    int totalRecords=helper.getTotalRecords(StringUtils.isEmpty(persistencePackage.getFetchTypeFullyQualifiedClassname()) ? persistencePackage.getCeilingEntityFullyQualifiedClassname() : persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings);
    DynamicResultSet response=new DynamicResultSet(results,totalRecords);
    return response;
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to execute persistence activity for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

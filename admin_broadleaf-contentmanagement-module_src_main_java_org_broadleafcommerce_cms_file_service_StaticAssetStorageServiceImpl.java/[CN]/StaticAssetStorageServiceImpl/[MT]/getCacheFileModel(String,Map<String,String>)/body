{
  StaticAsset staticAsset=findStaticAsset(fullUrl);
  if (staticAsset == null) {
    throw new AssetNotFoundException("Unable to find an asset for the url (" + fullUrl + ")");
  }
  String mimeType=staticAsset.getMimeType();
  Map<String,String> convertedParameters=namedOperationManager.manageNamedParameters(parameterMap);
  String returnFilePath=null;
  if (StorageType.FILESYSTEM.equals(staticAsset.getStorageType()) && convertedParameters.isEmpty()) {
    InputStream classPathInputStream=getResourceFromClasspath(staticAsset);
    if (classPathInputStream != null) {
      String cacheName=constructCacheFileName(staticAsset,convertedParameters,true);
      File cacheFile=new File(cacheName);
      if (!cacheFile.exists()) {
        createCacheFile(classPathInputStream,cacheFile);
      }
      returnFilePath=cacheFile.getAbsolutePath();
    }
 else {
      returnFilePath=generateStorageFileName(staticAsset.getFullUrl(),false);
    }
  }
 else {
    String sharedCacheName=constructCacheFileName(staticAsset,convertedParameters,true);
    File cacheFile=new File(sharedCacheName);
    if (!cacheFile.exists()) {
      String cacheName=constructCacheFileName(staticAsset,convertedParameters,false);
      cacheFile=new File(cacheName);
    }
    if (!cacheFile.exists()) {
      InputStream original=findInputStreamForStaticAsset(staticAsset);
      boolean useSharedFile=shouldUseSharedFile(original);
      if (!convertedParameters.isEmpty()) {
        Operation[] operations=artifactService.buildOperations(convertedParameters,original,staticAsset.getMimeType());
        InputStream converted=artifactService.convert(original,operations,staticAsset.getMimeType());
        createCacheFile(converted,cacheFile);
        if ("image/gif".equals(mimeType)) {
          mimeType="image/png";
        }
      }
 else {
        if (useSharedFile) {
          cacheFile=new File(sharedCacheName);
          createCacheFile(original,cacheFile);
        }
 else {
          createCacheFile(original,cacheFile);
        }
      }
    }
    returnFilePath=cacheFile.getAbsolutePath();
  }
  Map<String,String> model=new HashMap<String,String>(2);
  model.put("cacheFilePath",returnFilePath);
  model.put("mimeType",mimeType);
  return model;
}

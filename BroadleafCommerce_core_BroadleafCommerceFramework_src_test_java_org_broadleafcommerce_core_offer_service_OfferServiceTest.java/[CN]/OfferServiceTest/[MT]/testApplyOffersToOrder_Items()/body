{
  CandidateItemOfferAnswer answer=new CandidateItemOfferAnswer();
  OrderItemAdjustmentAnswer answer2=new OrderItemAdjustmentAnswer();
  EasyMock.expect(offerDaoMock.createCandidateItemOffer()).andAnswer(answer).times(2);
  EasyMock.expect(offerDaoMock.createOrderItemAdjustment()).andAnswer(answer2).times(2);
  replay();
  Order order=dataProvider.createBasicOrder();
  List<Offer> offers=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  offerService.applyOffersToOrder(offers,order);
  int adjustmentCount=0;
  for (  OrderItem item : order.getOrderItems()) {
    if (item.getOrderItemAdjustments() != null) {
      adjustmentCount+=item.getOrderItemAdjustments().size();
    }
  }
  assertTrue(adjustmentCount == 2);
  order=dataProvider.createBasicOrder();
  offers=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test5\"), MVEL.eval(\"toUpperCase()\",\"test6\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  offerService.applyOffersToOrder(offers,order);
  adjustmentCount=0;
  for (  OrderItem item : order.getOrderItems()) {
    if (item.getOrderItemAdjustments() != null) {
      adjustmentCount+=item.getOrderItemAdjustments().size();
    }
  }
  assertTrue(adjustmentCount == 0);
  verify();
}

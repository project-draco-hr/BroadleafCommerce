{
  CandidateFulfillmentGroupOfferAnswer answer=new CandidateFulfillmentGroupOfferAnswer();
  EasyMock.expect(offerDaoMock.createCandidateFulfillmentGroupOffer()).andAnswer(answer).times(5);
  FulfillmentGroupAdjustmentAnswer answer2=new FulfillmentGroupAdjustmentAnswer();
  EasyMock.expect(offerDaoMock.createFulfillmentGroupAdjustment()).andAnswer(answer2).times(5);
  replay();
  Order order=dataProvider.createBasicOrder();
  List<CandidateFulfillmentGroupOffer> qualifiedOffers=new ArrayList<CandidateFulfillmentGroupOffer>();
  List<Offer> offers=dataProvider.createFGBasedOffer("order.subTotal.getAmount()>20","fulfillmentGroup.address.postalCode==75244",OfferDiscountType.PERCENT_OFF);
  fgProcessor.filterFulfillmentGroupLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(0));
  boolean offerApplied=fgProcessor.applyAllFulfillmentGroupOffers(qualifiedOffers,order);
  assertTrue(offerApplied);
  order=dataProvider.createBasicOrder();
  qualifiedOffers=new ArrayList<CandidateFulfillmentGroupOffer>();
  offers=dataProvider.createFGBasedOffer("order.subTotal.getAmount()>20","fulfillmentGroup.address.postalCode==75244",OfferDiscountType.PERCENT_OFF);
  offers.addAll(dataProvider.createFGBasedOfferWithItemCriteria("order.subTotal.getAmount()>20","fulfillmentGroup.address.postalCode==75244",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))"));
  offers.get(1).setName("secondOffer");
  fgProcessor.filterFulfillmentGroupLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(0));
  fgProcessor.filterFulfillmentGroupLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(1));
  offerApplied=fgProcessor.applyAllFulfillmentGroupOffers(qualifiedOffers,order);
  assertTrue(offerApplied);
  int fgAdjustmentCount=0;
  for (  FulfillmentGroup fg : order.getFulfillmentGroups()) {
    fgAdjustmentCount+=fg.getFulfillmentGroupAdjustments().size();
  }
  assertTrue(fgAdjustmentCount == 3);
  verify();
}

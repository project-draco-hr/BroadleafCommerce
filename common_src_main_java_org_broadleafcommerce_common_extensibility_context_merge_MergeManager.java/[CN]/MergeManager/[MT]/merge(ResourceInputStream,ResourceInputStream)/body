{
  try {
    Document doc1=builder.parse(stream1);
    Document doc2=builder.parse(stream2);
    List<Node> exhaustedNodes=new ArrayList<Node>();
    for (    MergeHandler handler : this.handlers) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Processing handler: " + handler.getXPath());
      }
      MergePoint point=new MergePoint(handler,doc1,doc2);
      Node[] list=point.merge(exhaustedNodes);
      if (list != null) {
        Collections.addAll(exhaustedNodes,list);
      }
    }
    TransformerFactory tFactory=TransformerFactory.newInstance();
    Transformer xmlTransformer=tFactory.newTransformer();
    xmlTransformer.setOutputProperty(OutputKeys.VERSION,"1.0");
    xmlTransformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");
    xmlTransformer.setOutputProperty(OutputKeys.METHOD,"xml");
    xmlTransformer.setOutputProperty(OutputKeys.INDENT,"yes");
    DOMSource source=new DOMSource(doc1);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(baos));
    StreamResult result=new StreamResult(writer);
    xmlTransformer.transform(source,result);
    byte[] itemArray=baos.toByteArray();
    return new ResourceInputStream(new ByteArrayInputStream(itemArray),stream2.getName(),stream1.getNames());
  }
 catch (  Exception e) {
    throw new MergeException(e);
  }
}

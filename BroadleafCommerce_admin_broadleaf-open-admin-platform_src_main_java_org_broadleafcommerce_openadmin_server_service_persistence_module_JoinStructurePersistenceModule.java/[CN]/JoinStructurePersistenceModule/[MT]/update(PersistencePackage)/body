{
  String[] customCriteria=persistencePackage.getCustomCriteria();
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for update types other than ENTITY");
  }
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  Entity entity=persistencePackage.getEntity();
  JoinStructure joinStructure=(JoinStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINSTRUCTURE);
  try {
    CriteriaTransferObject cto=new CriteriaTransferObject();
    FilterAndSortCriteria filterCriteria=cto.get(joinStructure.getName());
    filterCriteria.setFilterValue(entity.findProperty(joinStructure.getLinkedObjectPath() + "." + joinStructure.getLinkedIdProperty()).getValue());
    if (joinStructure.getSortField() != null) {
      FilterAndSortCriteria sortCriteria=cto.get(joinStructure.getSortField());
      sortCriteria.setSortAscending(joinStructure.getSortAscending());
    }
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(joinStructure.getJoinStructureEntityClassname(),new Class[]{Class.forName(joinStructure.getJoinStructureEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINSTRUCTURE,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    BaseCtoConverter ctoConverter=getJoinStructureCtoConverter(persistencePerspective,cto,mergedProperties,joinStructure);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,joinStructure.getJoinStructureEntityClassname());
    List<Serializable> records=persistenceManager.getDynamicEntityDao().query(queryCriteria,Class.forName(joinStructure.getJoinStructureEntityClassname()));
    int index=0;
    Long myEntityId=Long.valueOf(entity.findProperty(joinStructure.getTargetObjectPath() + "." + joinStructure.getTargetIdProperty()).getValue());
    FieldManager fieldManager=getFieldManager();
    for (    Serializable record : records) {
      Long targetId=(Long)fieldManager.getFieldValue(record,joinStructure.getTargetObjectPath() + "." + joinStructure.getTargetIdProperty());
      if (myEntityId.equals(targetId)) {
        break;
      }
      index++;
    }
    if (joinStructure.getSortField() != null && entity.findProperty(joinStructure.getSortField()).getValue() != null) {
      Serializable myRecord=records.remove(index);
      myRecord=createPopulatedInstance(myRecord,entity,mergedProperties,false);
      Integer newPos=Integer.valueOf(entity.findProperty(joinStructure.getSortField()).getValue());
      records.add(newPos,myRecord);
      index=1;
      for (      Serializable record : records) {
        fieldManager.setFieldValue(record,joinStructure.getSortField(),Long.valueOf(index));
        index++;
      }
    }
 else {
      String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
      Class<?>[] entities=persistenceManager.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
      Map<String,FieldMetadata> mergedPropertiesTarget=persistenceManager.getDynamicEntityDao().getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
      Serializable myRecord=records.get(index);
      myRecord=createPopulatedInstance(myRecord,entity,mergedProperties,false);
      myRecord=persistenceManager.getDynamicEntityDao().merge(myRecord);
      List<Serializable> myList=new ArrayList<Serializable>();
      myList.add(myRecord);
      Entity[] payload=getRecords(mergedPropertiesTarget,myList,mergedProperties,joinStructure.getTargetObjectPath());
      entity=payload[0];
    }
    return entity;
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

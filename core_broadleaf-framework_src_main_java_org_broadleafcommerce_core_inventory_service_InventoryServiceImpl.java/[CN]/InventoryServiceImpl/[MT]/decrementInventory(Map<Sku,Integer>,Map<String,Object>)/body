{
  ExtensionResultStatusType res=extensionManager.getProxy().decrementInventory(skuQuantities,context);
  if (ExtensionResultStatusType.NOT_HANDLED.equals(res)) {
    for (    Entry<Sku,Integer> entry : skuQuantities.entrySet()) {
      Sku sku=entry.getKey();
      Integer quantity=entry.getValue();
      if (quantity == null || quantity < 1) {
        throw new IllegalArgumentException("Quantity " + quantity + " is not valid. Must be greater than zero and not null.");
      }
      if (checkBasicAvailablility(sku)) {
        if (InventoryType.CHECK_QUANTITY.equals(sku.getInventoryType())) {
          Integer inventoryAvailable=retrieveQuantityAvailable(sku,context);
          if (inventoryAvailable == null) {
            return;
          }
          if (inventoryAvailable < quantity) {
            throw new InventoryUnavailableException("There was not enough inventory to fulfill this request.",sku.getId(),quantity,inventoryAvailable);
          }
          int newInventory=inventoryAvailable - quantity;
          sku.setQuantityAvailable(newInventory);
          catalogService.saveSku(sku);
        }
 else {
          LOG.info("Not decrementing inventory as the Sku has been marked as always available");
        }
      }
 else {
        throw new InventoryUnavailableException("The Sku has been marked as unavailable",sku.getId(),quantity,0);
      }
    }
  }
}

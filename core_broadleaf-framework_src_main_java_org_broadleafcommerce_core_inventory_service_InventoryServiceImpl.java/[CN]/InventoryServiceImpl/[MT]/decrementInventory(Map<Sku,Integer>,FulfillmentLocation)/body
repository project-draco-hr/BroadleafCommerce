{
  Set<Sku> skus=skuInventory.keySet();
  Map<Long,Integer> unavailableInventoryHolder=new HashMap<Long,Integer>();
  for (  Sku sku : skus) {
    Integer quantity=skuInventory.get(sku);
    if (sku.getInventoryType() == null && (sku.getDefaultProduct().getDefaultCategory() == null || sku.getDefaultProduct().getDefaultCategory().getInventoryType() == null)) {
      continue;
    }
 else     if (InventoryType.NONE.equals(sku.getInventoryType()) || (sku.getDefaultProduct().getDefaultCategory() != null && InventoryType.NONE.equals(sku.getDefaultProduct().getDefaultCategory().getInventoryType()))) {
      continue;
    }
    if (quantity == null || quantity < 0) {
      throw new IllegalArgumentException("Quantity must not be a positive integer");
    }
    if (quantity == 0) {
      continue;
    }
    Inventory inventory=null;
    if (fulfillmentLocation != null) {
      inventory=inventoryDao.readInventoryForUpdate(sku,fulfillmentLocation);
    }
 else {
      inventory=inventoryDao.readInventoryForUpdateForDefaultFulfillmentLocation(sku);
    }
    if (inventory != null) {
      Integer quantityAvailable=inventory.getQuantityAvailable();
      int qtyToUpdate=quantityAvailable - quantity;
      if (qtyToUpdate < 0) {
        unavailableInventoryHolder.put(sku.getId(),quantityAvailable);
      }
 else {
        inventory.setQuantityAvailable(qtyToUpdate);
        inventoryDao.save(inventory);
      }
    }
 else {
      unavailableInventoryHolder.put(sku.getId(),0);
    }
  }
  if (!unavailableInventoryHolder.isEmpty()) {
    InventoryUnavailableException ex=new InventoryUnavailableException("Inventory is unavailable for " + unavailableInventoryHolder.size() + " skus");
    ex.setSkuInventoryAvailable(unavailableInventoryHolder);
    throw ex;
  }
}

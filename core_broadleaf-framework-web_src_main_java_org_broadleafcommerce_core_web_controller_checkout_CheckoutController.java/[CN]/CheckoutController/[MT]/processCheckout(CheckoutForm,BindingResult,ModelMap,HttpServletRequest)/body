{
  if (checkoutForm.getIsSameAddress()) {
    copyAddress(checkoutForm);
  }
  checkoutFormValidator.validate(checkoutForm,errors);
  if (errors.hasErrors()) {
    return checkout(checkoutForm,errors,model,request);
  }
  checkoutForm.getBillingAddress().setCountry(countryService.findCountryByAbbreviation(checkoutForm.getBillingAddress().getCountry().getAbbreviation()));
  checkoutForm.getBillingAddress().setState(stateService.findStateByAbbreviation(checkoutForm.getBillingAddress().getState().getAbbreviation()));
  checkoutForm.getShippingAddress().setCountry(countryService.findCountryByAbbreviation(checkoutForm.getShippingAddress().getCountry().getAbbreviation()));
  checkoutForm.getShippingAddress().setState(stateService.findStateByAbbreviation(checkoutForm.getShippingAddress().getState().getAbbreviation()));
  Order order=retrieveCartOrder(request,model);
  order.setOrderNumber(new SimpleDateFormat("yyyyMMddHHmmssS").format(SystemTime.asDate()));
  List<FulfillmentGroup> groups=order.getFulfillmentGroups();
  if (groups.size() < 1) {
    return "redirect:/basket/viewCart.htm";
  }
  FulfillmentGroup group=groups.get(0);
  group.setOrder(order);
  group.setAddress(checkoutForm.getShippingAddress());
  group.setShippingPrice(order.getTotalShipping());
  Map<PaymentInfo,Referenced> payments=new HashMap<PaymentInfo,Referenced>();
  CreditCardPaymentInfo creditCardPaymentInfo=((CreditCardPaymentInfo)securePaymentInfoService.create(PaymentInfoType.CREDIT_CARD));
  creditCardPaymentInfo.setCvvCode(checkoutForm.getCreditCardCvvCode());
  creditCardPaymentInfo.setExpirationMonth(Integer.parseInt(checkoutForm.getCreditCardExpMonth()));
  creditCardPaymentInfo.setExpirationYear(Integer.parseInt(checkoutForm.getCreditCardExpYear()));
  creditCardPaymentInfo.setPan(checkoutForm.getCreditCardNumber());
  creditCardPaymentInfo.setReferenceNumber(checkoutForm.getCreditCardNumber());
  PaymentInfo paymentInfo=paymentInfoService.create();
  paymentInfo.setAddress(checkoutForm.getBillingAddress());
  paymentInfo.setOrder(order);
  paymentInfo.setType(PaymentInfoType.CREDIT_CARD);
  paymentInfo.setReferenceNumber(checkoutForm.getCreditCardNumber());
  paymentInfo.setAmount(order.getTotal());
  payments.put(paymentInfo,creditCardPaymentInfo);
  List<PaymentInfo> paymentInfos=new ArrayList<PaymentInfo>();
  paymentInfos.add(paymentInfo);
  order.setPaymentInfos(paymentInfos);
  order.setStatus(OrderStatus.SUBMITTED);
  order.setSubmitDate(Calendar.getInstance().getTime());
  try {
    checkoutService.performCheckout(order,payments);
  }
 catch (  CheckoutException e) {
    LOG.error("Cannot perform checkout",e);
  }
  Customer customer=order.getCustomer();
  if (StringUtils.isEmpty(customer.getFirstName())) {
    customer.setFirstName(checkoutForm.getBillingAddress().getFirstName());
  }
  if (StringUtils.isEmpty(customer.getLastName())) {
    customer.setLastName(checkoutForm.getBillingAddress().getLastName());
  }
  if (StringUtils.isEmpty(customer.getEmailAddress())) {
    customer.setEmailAddress(order.getEmailAddress());
  }
  customerService.saveCustomer(customer,false);
  return receiptView != null ? "redirect:" + receiptView : "redirect:/orders/viewOrderConfirmation.htm?orderNumber=" + order.getOrderNumber();
}

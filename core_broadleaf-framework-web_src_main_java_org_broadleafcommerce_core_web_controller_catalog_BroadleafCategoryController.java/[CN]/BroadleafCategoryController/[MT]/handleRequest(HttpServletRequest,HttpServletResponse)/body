{
  ModelAndView model=new ModelAndView();
  Category category=(Category)request.getAttribute(CategoryHandlerMapping.CURRENT_CATEGORY_ATTRIBUTE_NAME);
  assert(category != null);
  ProductSearchCriteria searchCriteria=new ProductSearchCriteria();
  Map<String,String[]> params=request.getParameterMap();
  for (Iterator<Map.Entry<String,String[]>> iter=params.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry<String,String[]> entry=iter.next();
    String key=entry.getKey();
    if (key.equals(ProductSearchCriteria.SORT_STRING)) {
      searchCriteria.setSortQuery(entry.getValue()[0]);
      iter.remove();
    }
    if (key.equals(ProductSearchCriteria.PAGE_NUMBER)) {
      searchCriteria.setPage(Integer.parseInt(entry.getValue()[0]));
      iter.remove();
    }
    if (key.equals(ProductSearchCriteria.PAGE_SIZE_STRING)) {
      searchCriteria.setPageSize(Integer.parseInt(entry.getValue()[0]));
      iter.remove();
    }
  }
  searchCriteria.setFilterCriteria(params);
  model.addObject(CATEGORY_ATTRIBUTE_NAME,category);
  ProductSearchResult result=productSearchService.findProductsByCategory(category,searchCriteria);
  for (  SearchFacetDTO facet : result.getFacets()) {
    for (    SearchFacetResultDTO facetResult : facet.getFacetValues()) {
      facetResult.setActive(FacetUtils.isActive(facetResult,params));
    }
  }
  model.addObject(PRODUCTS_ATTRIBUTE_NAME,result.getProducts());
  model.addObject(FACETS_ATTRIBUTE_NAME,result.getFacets());
  if (StringUtils.isNotEmpty(category.getDisplayTemplate())) {
    model.setViewName(category.getDisplayTemplate());
  }
 else {
    model.setViewName(getDefaultCategoryView());
  }
  return model;
}

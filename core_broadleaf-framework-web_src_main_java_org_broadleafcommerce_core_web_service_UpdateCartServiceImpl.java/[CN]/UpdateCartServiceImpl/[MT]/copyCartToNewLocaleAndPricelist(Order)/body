{
  if (currentCart.getOrderItems() == null) {
    return null;
  }
  BroadleafCurrency currency=findActiveCurrency();
  if (currency == null) {
    return null;
  }
  List<AddToCartItem> itemsToReprice=new ArrayList<AddToCartItem>();
  List<OrderItem> itemsToRemove=new ArrayList<OrderItem>();
  List<OrderItem> itemsToReset=new ArrayList<OrderItem>();
  boolean repriceOrder=true;
  for (  OrderItem orderItem : currentCart.getOrderItems()) {
    if (orderItem instanceof DiscreteOrderItem) {
      DiscreteOrderItem doi=(DiscreteOrderItem)orderItem;
      if (checkAvailabilityInLocale(doi,currency)) {
        AddToCartItem itemRequest=new AddToCartItem();
        itemRequest.setProductId(doi.getProduct().getId());
        itemRequest.setQuantity(doi.getQuantity());
        itemsToReprice.add(itemRequest);
        itemsToReset.add(orderItem);
      }
 else {
        itemsToRemove.add(orderItem);
      }
    }
 else     if (orderItem instanceof BundleOrderItem) {
      BundleOrderItem boi=(BundleOrderItem)orderItem;
      for (      DiscreteOrderItem doi : boi.getDiscreteOrderItems()) {
        if (checkAvailabilityInLocale(doi,currency)) {
          AddToCartItem itemRequest=new AddToCartItem();
          itemRequest.setProductId(doi.getProduct().getId());
          itemRequest.setQuantity(doi.getQuantity());
          itemsToReprice.add(itemRequest);
          itemsToReset.add(orderItem);
        }
 else {
          itemsToRemove.add(orderItem);
        }
      }
    }
  }
  for (  OrderItem orderItem : itemsToReset) {
    try {
      currentCart=orderService.removeItem(currentCart.getId(),orderItem.getId(),false);
    }
 catch (    RemoveFromCartException e) {
      e.printStackTrace();
    }
  }
  for (  AddToCartItem itemRequest : itemsToReprice) {
    try {
      currentCart=orderService.addItem(currentCart.getId(),itemRequest,false);
    }
 catch (    AddToCartException e) {
      e.printStackTrace();
    }
  }
  try {
    currentCart=orderService.save(currentCart,repriceOrder);
  }
 catch (  PricingException e) {
    e.printStackTrace();
  }
  setSavedCurrency(currency);
  UpdateCartResponse updateCartResponse=new UpdateCartResponse();
  updateCartResponse.setRemovedItems(itemsToRemove);
  updateCartResponse.setOrder(currentCart);
  return updateCartResponse;
}

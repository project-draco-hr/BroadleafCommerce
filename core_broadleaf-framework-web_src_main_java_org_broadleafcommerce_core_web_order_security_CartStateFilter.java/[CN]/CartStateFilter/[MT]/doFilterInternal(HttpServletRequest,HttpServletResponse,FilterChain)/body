{
  cartStateProcessor.process(new ServletWebRequest(request,response));
  if (!requestRequiresLock(request)) {
    chain.doFilter(request,response);
    return;
  }
  Order order=CartState.getCart();
  if (LOG.isTraceEnabled()) {
    LOG.trace("Thread[" + Thread.currentThread().getId() + "] attempting to lock order["+ order.getId()+ "]");
  }
  Object lockObject=null;
  try {
    if (lockObject == null) {
      if (getErrorInsteadOfQueue()) {
        lockObject=orderLockManager.acquireLockIfAvailable(order);
        if (lockObject == null) {
          throw new OrderLockAcquisitionFailureException("Thread[" + Thread.currentThread().getId() + "] could not acquire lock for order["+ order.getId()+ "]");
        }
      }
 else {
        lockObject=orderLockManager.acquireLock(order);
      }
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Thread[" + Thread.currentThread().getId() + "] grabbed lock for order["+ order.getId()+ "]");
    }
    CartState.setCart(orderService.reloadOrder(order));
    chain.doFilter(request,response);
  }
  finally {
    if (lockObject != null) {
      orderLockManager.releaseLock(lockObject);
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Thread[" + Thread.currentThread().getId() + "] released lock for order["+ order.getId()+ "]");
    }
  }
}

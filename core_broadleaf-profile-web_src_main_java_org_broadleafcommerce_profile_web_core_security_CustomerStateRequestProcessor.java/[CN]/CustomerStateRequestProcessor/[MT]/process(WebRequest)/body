{
  Customer customer=null;
  Long overrideId=null;
  if (BLCRequestUtils.isOKtoUseSession(request)) {
    overrideId=(Long)request.getAttribute(OVERRIDE_CUSTOMER_SESSION_ATTR_NAME,WebRequest.SCOPE_GLOBAL_SESSION);
  }
  if (overrideId != null) {
    customer=customerService.readCustomerById(overrideId);
  }
 else {
    Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    if ((authentication != null) && !(authentication instanceof AnonymousAuthenticationToken)) {
      String userName=authentication.getName();
      customer=(Customer)BroadleafRequestCustomerResolverImpl.getRequestCustomerResolver().getCustomer(request);
      if (userName != null && (customer == null || !userName.equals(customer.getUsername()))) {
        customer=customerService.readCustomerByUsername(userName);
        if (logger.isDebugEnabled() && customer != null) {
          logger.debug("Customer found by username " + userName);
        }
      }
      if (customer != null) {
        String lastPublishedEventClass=(String)BLCRequestUtils.getSessionAttributeIfOk(request,LAST_PUBLISHED_EVENT_CLASS_SESSION_ATTRIBUTE_NAME);
        String eventUsername=(String)BLCRequestUtils.getSessionAttributeIfOk(request,LAST_PUBLISHED_EVENT_USERNAME_SESSION_ATTRIBUTE_NAME);
        if (authentication instanceof RememberMeAuthenticationToken) {
          customer.setCookied(true);
          boolean publishRememberMeEvent=true;
          if (CustomerAuthenticatedFromCookieEvent.class.getName().equals(lastPublishedEventClass)) {
            if (userName.equals(eventUsername)) {
              publishRememberMeEvent=false;
            }
          }
          if (publishRememberMeEvent) {
            CustomerAuthenticatedFromCookieEvent cookieEvent=new CustomerAuthenticatedFromCookieEvent(customer,this.getClass().getName());
            publishEvent(cookieEvent,request,CustomerAuthenticatedFromCookieEvent.class.getName(),userName);
          }
        }
 else         if (authentication instanceof UsernamePasswordAuthenticationToken) {
          customer.setLoggedIn(true);
          boolean publishLoggedInEvent=true;
          if (CustomerLoggedInEvent.class.getName().equals(lastPublishedEventClass)) {
            if (userName.equals(eventUsername)) {
              publishLoggedInEvent=false;
            }
          }
          if (publishLoggedInEvent) {
            CustomerLoggedInEvent loggedInEvent=new CustomerLoggedInEvent(customer,this.getClass().getName());
            publishEvent(loggedInEvent,request,CustomerLoggedInEvent.class.getName(),userName);
          }
        }
 else {
          customer=resolveAuthenticatedCustomer(authentication);
        }
      }
    }
  }
  if (customer == null) {
    customer=resolveAnonymousCustomer(request);
  }
 else {
    customer=mergeCustomerIfRequired(request,customer);
  }
  CustomerState.setCustomer(customer);
  @SuppressWarnings("unchecked") Map<String,Object> ruleMap=(Map<String,Object>)request.getAttribute(BLC_RULE_MAP_PARAM,WebRequest.SCOPE_REQUEST);
  if (ruleMap == null) {
    ruleMap=new HashMap<String,Object>();
  }
  ruleMap.put("customer",customer);
  request.setAttribute(BLC_RULE_MAP_PARAM,ruleMap,WebRequest.SCOPE_REQUEST);
}

{
  JavaScriptObject data=request.getData();
  final ListGridRecord temp=new ListGridRecord(data);
  Entity tempEntity=buildEntity(temp);
  final ListGridRecord record=associatedGrid.getRecord(associatedGrid.getRecordIndex(temp));
  Entity entity=buildEntity(record);
  for (  Property property : tempEntity.getProperties()) {
    entity.findProperty(property.getName()).setValue(property.getValue());
  }
  String componentId=request.getComponentId();
  if (componentId != null) {
    if (entity.getType() == null) {
      String[] type=((ListGrid)Canvas.getById(componentId)).getSelectedRecord().getAttributeAsStringArray("type");
      entity.setType(type);
    }
  }
  service.remove(entity,persistencePerspective,customCriteria,new EntityServiceAsyncCallback<Void>(EntityOperationType.REMOVE,requestId,request,response,dataSource){
    public void onSuccess(    Void item){
      super.onSuccess(null);
      if (cb != null) {
        cb.onSuccess(dataSource);
      }
      dataSource.processResponse(requestId,response);
    }
    @Override protected void onSecurityException(    ApplicationSecurityException exception){
      super.onSecurityException(exception);
      if (cb != null) {
        cb.onFailure(exception);
      }
    }
    @Override protected void onOtherException(    Throwable exception){
      super.onOtherException(exception);
      if (cb != null) {
        cb.onFailure(exception);
      }
    }
    @Override protected void onError(    EntityOperationType opType,    String requestId,    DSRequest request,    DSResponse response,    Throwable caught){
      super.onError(opType,requestId,request,response,caught);
      if (cb != null) {
        cb.onFailure(caught);
      }
    }
  }
);
}

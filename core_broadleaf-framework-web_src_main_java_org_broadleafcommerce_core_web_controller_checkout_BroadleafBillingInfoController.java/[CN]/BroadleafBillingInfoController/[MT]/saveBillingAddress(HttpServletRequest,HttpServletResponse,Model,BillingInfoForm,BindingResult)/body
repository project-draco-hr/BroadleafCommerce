{
  Order cart=CartState.getCart();
  CustomerPayment customerPayment=null;
  if (billingForm.isUseShippingAddress()) {
    copyShippingAddressToBillingAddress(cart,billingForm);
  }
  Boolean useCustomerPayment=billingForm.getUseCustomerPayment();
  if (useCustomerPayment && billingForm.getCustomerPaymentId() != null) {
    customerPayment=customerPaymentService.readCustomerPaymentById(billingForm.getCustomerPaymentId());
    if (customerPayment != null) {
      Address address=customerPayment.getBillingAddress();
      if (address != null) {
        copyAddressToBillingAddress(billingForm,address);
      }
    }
  }
  billingInfoFormValidator.validate(billingForm,result);
  if (result.hasErrors()) {
    return getCheckoutView();
  }
  if ((billingForm.getAddress().getPhonePrimary() != null) && (StringUtils.isEmpty(billingForm.getAddress().getPhonePrimary().getPhoneNumber()))) {
    billingForm.getAddress().setPhonePrimary(null);
  }
  if ((billingForm.getAddress().getPhoneSecondary() != null) && (StringUtils.isEmpty(billingForm.getAddress().getPhoneSecondary().getPhoneNumber()))) {
    billingForm.getAddress().setPhoneSecondary(null);
  }
  if ((billingForm.getAddress().getPhoneFax() != null) && (StringUtils.isEmpty(billingForm.getAddress().getPhoneFax().getPhoneNumber()))) {
    billingForm.getAddress().setPhoneFax(null);
  }
  boolean found=false;
  String paymentName=billingForm.getPaymentName();
  Boolean saveNewPayment=billingForm.getSaveNewPayment();
  for (  OrderPayment p : cart.getPayments()) {
    if (PaymentType.CREDIT_CARD.equals(p.getType()) && p.isActive()) {
      if (p.getBillingAddress() == null) {
        p.setBillingAddress(billingForm.getAddress());
      }
 else {
        Address updatedAddress=updateAddress(billingForm.getAddress(),p.getBillingAddress());
        p.setBillingAddress(updatedAddress);
      }
      found=true;
    }
  }
  if (!found) {
    OrderPayment tempOrderPayment=orderPaymentService.create();
    tempOrderPayment.setType(PaymentType.CREDIT_CARD);
    tempOrderPayment.setPaymentGatewayType(PaymentGatewayType.TEMPORARY);
    tempOrderPayment.setBillingAddress(billingForm.getAddress());
    tempOrderPayment.setOrder(cart);
    cart.getPayments().add(tempOrderPayment);
  }
  orderService.save(cart,true);
  if (isAjaxRequest(request)) {
    checkoutControllerExtensionManager.getProxy().addAdditionalModelVariables(model);
    return getCheckoutView();
  }
 else {
    return getCheckoutPageRedirect();
  }
}

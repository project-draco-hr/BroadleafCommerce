{
  if (!isValidModuleForService(fulfillmentGroup.getService()) && !isDefaultModule()) {
    LOG.info("fulfillment group (" + fulfillmentGroup.getId() + ") with a service type of ("+ fulfillmentGroup.getService()+ ") is not valid for this module service type ("+ getServiceName()+ ")");
    return;
  }
  if (fulfillmentGroup.getFulfillmentGroupItems().size() == 0) {
    LOG.warn("fulfillment group (" + fulfillmentGroup.getId() + ") does not contain any fulfillment group items. Unable to price banded shipping");
    fulfillmentGroup.setShippingPrice(BroadleafCurrencyUtils.getMoney(BigDecimal.ZERO,fulfillmentGroup.getOrder().getCurrency()));
    fulfillmentGroup.setSaleShippingPrice(BroadleafCurrencyUtils.getMoney(BigDecimal.ZERO,fulfillmentGroup.getOrder().getCurrency()));
    fulfillmentGroup.setRetailShippingPrice(BroadleafCurrencyUtils.getMoney(BigDecimal.ZERO,fulfillmentGroup.getOrder().getCurrency()));
    return;
  }
  Address address=fulfillmentGroup.getAddress();
  String state=(address != null && address.getState() != null) ? address.getState().getAbbreviation() : null;
  BigDecimal retailTotal=new BigDecimal(0);
  String feeType=feeTypeMapping.get(fulfillmentGroup.getMethod());
  String feeSubType=((feeSubTypeMapping.get(state) == null) ? feeSubTypeMapping.get("ALL") : feeSubTypeMapping.get(state));
  for (  FulfillmentGroupItem fulfillmentGroupItem : fulfillmentGroup.getFulfillmentGroupItems()) {
    BigDecimal price=(fulfillmentGroupItem.getRetailPrice() != null) ? fulfillmentGroupItem.getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity())) : null;
    if (price == null) {
      price=fulfillmentGroupItem.getOrderItem().getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
    }
    retailTotal=retailTotal.add(price);
  }
  ShippingRate sr=shippingRateService.readShippingRateByFeeTypesUnityQty(feeType,feeSubType,retailTotal);
  if (sr == null) {
    throw new NotImplementedException("Shipping rate " + fulfillmentGroup.getMethod() + " not supported");
  }
  BigDecimal shippingPrice=new BigDecimal(0);
  if (sr.getBandResultPercent().compareTo(0) > 0) {
    BigDecimal percent=new BigDecimal(sr.getBandResultPercent() / 100);
    shippingPrice=retailTotal.multiply(percent);
  }
 else {
    shippingPrice=sr.getBandResultQuantity();
  }
  fulfillmentGroup.setShippingPrice(BroadleafCurrencyUtils.getMoney(shippingPrice,fulfillmentGroup.getOrder().getCurrency()));
  fulfillmentGroup.setSaleShippingPrice(fulfillmentGroup.getShippingPrice());
  fulfillmentGroup.setRetailShippingPrice(fulfillmentGroup.getSaleShippingPrice());
}

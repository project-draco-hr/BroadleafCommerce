{
  Product product=catalogService.findProductById(productId);
  if (CollectionUtils.isEmpty(product.getProductOptions())) {
    return -1;
  }
  List<List<ProductOptionValue>> allPermutations=generatePermutations(0,new ArrayList<ProductOptionValue>(),product.getProductOptions());
  if (allPermutations == null) {
    return -2;
  }
  LOG.info("Total number of permutations: " + allPermutations.size());
  LOG.info(allPermutations);
  List<List<ProductOptionValue>> previouslyGeneratedPermutations=new ArrayList<List<ProductOptionValue>>();
  if (CollectionUtils.isNotEmpty(product.getAdditionalSkus())) {
    for (    Sku additionalSku : product.getAdditionalSkus()) {
      if (CollectionUtils.isNotEmpty(additionalSku.getProductOptionValues())) {
        previouslyGeneratedPermutations.add(additionalSku.getProductOptionValues());
      }
    }
  }
  List<List<ProductOptionValue>> permutationsToGenerate=new ArrayList<List<ProductOptionValue>>();
  for (  List<ProductOptionValue> permutation : allPermutations) {
    boolean previouslyGenerated=false;
    for (    List<ProductOptionValue> generatedPermutation : previouslyGeneratedPermutations) {
      if (isSamePermutation(permutation,generatedPermutation)) {
        previouslyGenerated=true;
        break;
      }
    }
    if (!previouslyGenerated) {
      permutationsToGenerate.add(permutation);
    }
  }
  int numPermutationsCreated=0;
  if (extensionManager != null) {
    ExtensionResultHolder<Integer> result=new ExtensionResultHolder<Integer>();
    ExtensionResultStatusType resultStatusType=extensionManager.getProxy().persistSkuPermutation(product,permutationsToGenerate,result);
    if (ExtensionResultStatusType.HANDLED == resultStatusType) {
      numPermutationsCreated=result.getResult();
    }
  }
  return numPermutationsCreated;
}

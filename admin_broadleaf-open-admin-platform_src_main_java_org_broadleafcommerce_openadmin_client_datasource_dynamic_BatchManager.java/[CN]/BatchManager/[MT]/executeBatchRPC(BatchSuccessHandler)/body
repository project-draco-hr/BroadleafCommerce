{
  BatchOperationType batchOperationType=null;
  List<PersistencePackage> persistencePackages=new ArrayList<PersistencePackage>();
  for (  BatchPackage batchPackage : batchPackages) {
switch (batchPackage.getBatchOperationType()) {
case INSPECT:
      if (batchOperationType == null) {
        batchOperationType=BatchOperationType.INSPECT;
      }
 else       if (batchOperationType != BatchOperationType.INSPECT) {
        throw new IllegalArgumentException("Differing operation types detected in a single batch");
      }
    persistencePackages.add(batchPackage.getPersistencePackage());
  break;
default :
throw new IllegalArgumentException("Operation Type not supported: " + batchPackage.getBatchOperationType());
}
}
BatchPersistencePackage batchPersistencePackage=new BatchPersistencePackage();
batchPersistencePackage.setPersistencePackages(persistencePackages.toArray(new PersistencePackage[persistencePackages.size()]));
AppServices.DYNAMIC_ENTITY.batchInspect(batchPersistencePackage,new AbstractCallback<BatchDynamicResultSet>(){
@Override protected void onOtherException(Throwable exception){
List<BatchPackage> myPackages=new ArrayList<BatchPackage>();
for (BatchPackage batchPackage : batchPackages) {
myPackages.add(batchPackage);
}
batchPackages.clear();
super.onOtherException(exception);
for (BatchPackage batchPackage : myPackages) {
if (batchPackage.getAsyncCallback() != null) {
  batchPackage.getAsyncCallback().onFailure(exception);
  break;
}
}
}
@Override protected void onSecurityException(ApplicationSecurityException exception){
List<BatchPackage> myPackages=new ArrayList<BatchPackage>();
for (BatchPackage batchPackage : batchPackages) {
myPackages.add(batchPackage);
}
batchPackages.clear();
super.onSecurityException(exception);
for (BatchPackage batchPackage : myPackages) {
if (batchPackage.getAsyncCallback() != null) {
  batchPackage.getAsyncCallback().onFailure(exception);
  break;
}
}
}
@Override public void onSuccess(BatchDynamicResultSet result){
List<BatchPackage> myPackages=new ArrayList<BatchPackage>();
for (BatchPackage batchPackage : batchPackages) {
myPackages.add(batchPackage);
}
batchPackages.clear();
super.onSuccess(result);
for (int j=0; j < myPackages.size(); j++) {
BatchPackage batchPackage=myPackages.get(j);
if (batchPackage.getAsyncCallback() != null) {
  batchPackage.getAsyncCallback().onSuccess(result.getDynamicResultSets()[j]);
}
}
if (successHandler != null) {
successHandler.onSuccess();
}
}
}
);
}

{
  try {
    Record tempRecord=new Record();
    for (    String attribute : selectedRecord.getAttributes()) {
      if (attribute.equals("_type")) {
        tempRecord.setAttribute(attribute,selectedRecord.getAttributeAsStringArray(attribute));
      }
 else {
        tempRecord.setAttribute(attribute,selectedRecord.getAttribute(attribute));
      }
    }
    final Map<String,Object> dirtyValues=new HashMap<String,Object>();
    setData(tempRecord,"totalitarianOffer",getDisplay().getRestrictRuleRadio().getValue().equals("YES"),dirtyValues);
    setData(tempRecord,"deliveryType",getDisplay().getDeliveryTypeRadio().getValue(),dirtyValues);
    if (getDisplay().getDeliveryTypeRadio().getValue().equals("CODE")) {
      setData(tempRecord,"offerCode.offerCode",getDisplay().getCodeField().getValue().toString().trim(),dirtyValues);
    }
    setData(tempRecord,"qualifyingItemSubTotal",getDisplay().getQualifyingItemSubTotal().getValue().toString().trim(),dirtyValues);
    final String type=getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().getField("type").getValue().toString();
    extractCustomerData(tempRecord,dirtyValues);
    extractOrderData(tempRecord,type,dirtyValues);
    extractQualifierRuleType(tempRecord,dirtyValues);
    extractTargetItemData(tempRecord,type,dirtyValues);
    extractTargetRuleType(tempRecord,dirtyValues);
    extractFulfillmentGroupData(tempRecord,type,dirtyValues);
    for (    FormItem formItem : getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().getFields()) {
      setData(tempRecord,formItem.getName(),formItem.getValue(),dirtyValues);
    }
    extractQualifierData(tempRecord,type,true,dirtyValues);
    DSRequest requestProperties=new DSRequest();
    requestProperties.setAttribute("dirtyValues",dirtyValues);
    if (getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().validate() && getDisplay().getQualifyingItemSubTotalForm().validate()) {
      getDisplay().getDynamicFormDisplay().getFormOnlyDisplay().getForm().getDataSource().updateData(tempRecord,new DSCallback(){
        public void execute(        DSResponse response,        Object rawData,        DSRequest request){
          try {
            extractQualifierData(selectedRecord,type,false,dirtyValues);
            getDisplay().getDynamicFormDisplay().getSaveButton().disable();
            getDisplay().getDynamicFormDisplay().getRefreshButton().disable();
          }
 catch (          IncompatibleMVELTranslationException e) {
            SC.warn(e.getMessage());
            java.util.logging.Logger.getLogger(getClass().toString()).log(Level.SEVERE,e.getMessage(),e);
          }
        }
      }
,requestProperties);
    }
  }
 catch (  IncompatibleMVELTranslationException e) {
    SC.warn(e.getMessage());
    java.util.logging.Logger.getLogger(getClass().toString()).log(Level.SEVERE,e.getMessage(),e);
    ;
  }
}

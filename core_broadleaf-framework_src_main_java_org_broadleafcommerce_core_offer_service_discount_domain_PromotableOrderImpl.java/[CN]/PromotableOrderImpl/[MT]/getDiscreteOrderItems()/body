{
  if (discreteOrderItems == null) {
    discreteOrderItems=new ArrayList<PromotableOrderItem>();
    OrderItemVisitor visitor=new OrderItemVisitorAdapter(){
      @Override public void visit(      BundleOrderItem bundleOrderItem) throws PricingException {
        for (        DiscreteOrderItem discreteOrderItem : bundleOrderItem.getDiscreteOrderItems()) {
          addDiscreteItem(discreteOrderItem);
        }
      }
      @Override public void visit(      DiscreteOrderItem discreteOrderItem) throws PricingException {
        addDiscreteItem(discreteOrderItem);
      }
      @Override public void visit(      DynamicPriceDiscreteOrderItem dynamicPriceDiscreteOrderItem) throws PricingException {
        addDiscreteItem(dynamicPriceDiscreteOrderItem);
      }
      @Override public void visit(      GiftWrapOrderItem giftWrapOrderItem) throws PricingException {
        addDiscreteItem(giftWrapOrderItem);
      }
      private void addDiscreteItem(      DiscreteOrderItem discreteOrderItem){
        PromotableOrderItem item=itemFactory.createPromotableOrderItem(discreteOrderItem,PromotableOrderImpl.this);
        item.computeAdjustmentPrice();
        discreteOrderItems.add(item);
      }
    }
;
    List<OrderItem> basicOrderItems=new ArrayList<OrderItem>();
    basicOrderItems.addAll(delegate.getOrderItems());
    Iterator<OrderItem> itr=basicOrderItems.iterator();
    while (itr.hasNext()) {
      OrderItem temp=itr.next();
      if (temp instanceof BundleOrderItem) {
        itr.remove();
      }
    }
    for (    BundleOrderItemSplitContainer container : bundleSplitItems) {
      if (container.getKey().shouldSumItems()) {
        basicOrderItems.addAll(container.getSplitItems());
      }
    }
    try {
      for (      OrderItem temp : basicOrderItems) {
        temp.accept(visitor);
      }
    }
 catch (    PricingException e) {
      throw new RuntimeException(e);
    }
  }
  return discreteOrderItems;
}

{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,StaticAsset.class.getName(),getMergedProperties());
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,StaticAsset.class.getName());
    PersistentEntityCriteria countCriteria=ctoConverter.convert(new CriteriaTransferObjectCountWrapper(cto).wrap(),StaticAsset.class.getName());
    Criteria criteria=dynamicEntityDao.getCriteria(queryCriteria,StaticAsset.class);
    Criteria count=dynamicEntityDao.getCriteria(countCriteria,StaticAsset.class);
    SandBox sandBox;
    if (persistencePackage.getCustomCriteria().length > 1 && "prodOnly".equals(persistencePackage.getCustomCriteria()[1])) {
      sandBox=null;
    }
 else {
      sandBox=getSandBox();
    }
    List<StaticAsset> items=staticAssetService.findAssets(sandBox,criteria);
    Long totalRecords=staticAssetService.countAssets(sandBox,count);
    List<Serializable> convertedList=new ArrayList<Serializable>(items.size());
    convertedList.addAll(items);
    Entity[] assetEntities=helper.getRecords(getMergedProperties(),convertedList);
    for (    Entity entity : assetEntities) {
      entity=addImageRecords(entity);
      if ("true".equals(entity.findProperty("lockedFlag").getValue())) {
        Property property=new Property();
        property.setName("picture");
        property.setValue("[ISOMORPHIC]/../admin/images/lock_page.png");
        entity.addProperty(property);
      }
    }
    return new DynamicResultSet(assetEntities,totalRecords.intValue());
  }
 catch (  Exception e) {
    LOG.error("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

{
  Object lockObject=putLock(order.getId());
  if (lockObject != null) {
    throw new CheckoutException("This order is already in the process of being submitted, unable to checkout order -- id: " + order.getId(),new CheckoutSeed(order,new HashMap<String,Object>()));
  }
  if (hasOrderBeenCompleted(order)) {
    throw new CheckoutException("This order has already been submitted, unable to checkout order -- id: " + order.getId(),new CheckoutSeed(order,new HashMap<String,Object>()));
  }
  CheckoutSeed seed=null;
  try {
    order=orderService.save(order,false);
    seed=new CheckoutSeed(order,new HashMap<String,Object>());
    ProcessContext<CheckoutSeed> context=(ProcessContext<CheckoutSeed>)checkoutWorkflow.doActivities(seed);
    order=orderService.save(seed.getOrder(),false);
    order.getOrderMessages().addAll(((ActivityMessages)context).getActivityMessages());
    seed.setOrder(order);
    return seed;
  }
 catch (  PricingException e) {
    throw new CheckoutException("Unable to checkout order -- id: " + order.getId(),e,seed);
  }
catch (  WorkflowException e) {
    throw new CheckoutException("Unable to checkout order -- id: " + order.getId(),e.getRootCause(),seed);
  }
catch (  RequiredAttributeNotProvidedException e) {
    throw new CheckoutException("Unable to checkout order -- id: " + order.getId(),e.getCause(),seed);
  }
 finally {
    removeLock(order.getId());
  }
}

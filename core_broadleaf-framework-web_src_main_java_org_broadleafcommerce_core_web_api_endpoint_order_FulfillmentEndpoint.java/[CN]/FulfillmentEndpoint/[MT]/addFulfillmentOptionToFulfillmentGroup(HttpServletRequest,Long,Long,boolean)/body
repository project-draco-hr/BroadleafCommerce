{
  FulfillmentOption option=fulfillmentOptionService.readFulfillmentOptionById(fulfillmentOptionId);
  if (option == null) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Fulfillment option with id " + fulfillmentOptionId + " could not be found").build());
  }
  Order cart=CartState.getCart();
  if (cart != null) {
    boolean found=false;
    List<FulfillmentGroup> groups=cart.getFulfillmentGroups();
    if (groups != null && !groups.isEmpty()) {
      for (      FulfillmentGroup group : groups) {
        if (group.getId().equals(fulfillmentGroupId)) {
          group.setFulfillmentOption(option);
          found=true;
          break;
        }
      }
    }
    try {
      if (found) {
        cart=orderService.save(cart,priceOrder);
        for (        FulfillmentGroup fg : groups) {
          if (fg.getId().equals(fulfillmentGroupId)) {
            FulfillmentGroupWrapper fulfillmentGroupWrapper=(FulfillmentGroupWrapper)context.getBean(FulfillmentGroupWrapper.class.getName());
            fulfillmentGroupWrapper.wrapDetails(fg,request);
            return fulfillmentGroupWrapper;
          }
        }
      }
 else {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Could not find a fulfillment group with id " + fulfillmentGroupId).build());
      }
    }
 catch (    PricingException e) {
      throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occured pricing the cart.").build());
    }
  }
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Cart could not be found").build());
}

{
  FulfillmentOption option=fulfillmentOptionService.readFulfillmentOptionById(fulfillmentOptionId);
  if (option == null) {
    throw BroadleafWebServicesException.build(Response.Status.NOT_FOUND.getStatusCode()).addMessage(BroadleafWebServicesException.FULFILLMENT_OPTION_NOT_FOUND,fulfillmentOptionId);
  }
  Order cart=CartState.getCart();
  if (cart != null) {
    boolean found=false;
    List<FulfillmentGroup> groups=cart.getFulfillmentGroups();
    if (groups != null && !groups.isEmpty()) {
      for (      FulfillmentGroup group : groups) {
        if (group.getId().equals(fulfillmentGroupId)) {
          group.setFulfillmentOption(option);
          found=true;
          break;
        }
      }
    }
    try {
      if (found) {
        cart=orderService.save(cart,priceOrder);
        for (        FulfillmentGroup fg : groups) {
          if (fg.getId().equals(fulfillmentGroupId)) {
            FulfillmentGroupWrapper fulfillmentGroupWrapper=(FulfillmentGroupWrapper)context.getBean(FulfillmentGroupWrapper.class.getName());
            fulfillmentGroupWrapper.wrapDetails(fg,request);
            return fulfillmentGroupWrapper;
          }
        }
      }
 else {
        throw BroadleafWebServicesException.build(Response.Status.NOT_FOUND.getStatusCode()).addMessage(BroadleafWebServicesException.FULFILLMENT_GROUP_NOT_FOUND,fulfillmentGroupId);
      }
    }
 catch (    PricingException e) {
      throw BroadleafWebServicesException.build(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),null,null,e).addMessage(BroadleafWebServicesException.CART_PRICING_ERROR);
    }
  }
  throw BroadleafWebServicesException.build(Response.Status.NOT_FOUND.getStatusCode()).addMessage(BroadleafWebServicesException.CART_NOT_FOUND);
}

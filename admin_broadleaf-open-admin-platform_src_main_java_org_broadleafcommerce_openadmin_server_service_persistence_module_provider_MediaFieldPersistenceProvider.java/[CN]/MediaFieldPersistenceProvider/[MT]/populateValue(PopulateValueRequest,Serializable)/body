{
  if (!canHandlePersistence(populateValueRequest,instance)) {
    return FieldProviderResponse.NOT_HANDLED;
  }
  boolean dirty=false;
  try {
    setNonDisplayableValues(populateValueRequest);
    Class<?> valueType=null;
    if (!populateValueRequest.getProperty().getName().contains(FieldManager.MAPFIELDSEPARATOR)) {
      valueType=populateValueRequest.getReturnType();
    }
 else {
      String valueClassName=populateValueRequest.getMetadata().getMapFieldValueClass();
      if (valueClassName != null) {
        valueType=Class.forName(valueClassName);
      }
      if (valueType == null) {
        valueType=populateValueRequest.getReturnType();
      }
    }
    if (valueType == null) {
      throw new IllegalAccessException("Unable to determine the valueType for the rule field (" + populateValueRequest.getProperty().getName() + ")");
    }
    if (Media.class.isAssignableFrom(valueType)) {
      Media newMedia=convertJsonToMedia(populateValueRequest.getProperty().getUnHtmlEncodedValue());
      Media media;
      try {
        media=(Media)populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
      }
 catch (      FieldNotAvailableException e) {
        throw new IllegalArgumentException(e);
      }
      populateValueRequest.getProperty().setOriginalValue(convertMediaToJson(media));
      boolean persist=false;
      if (media == null) {
        media=(Media)valueType.newInstance();
        persist=true;
      }
      Map description=BeanUtils.describe(media);
      for (      Object temp : description.keySet()) {
        String property=(String)temp;
        String[] ignoredProperties=sandBoxHelper.getSandBoxDiscriminatorFieldList();
        ignoredProperties=(String[])ArrayUtils.add(ignoredProperties,"id");
        Arrays.sort(ignoredProperties);
        if (Arrays.binarySearch(ignoredProperties,property) < 0) {
          String prop1=String.valueOf(description.get(property));
          String prop2=String.valueOf(BeanUtils.getProperty(newMedia,property));
          if (!prop1.equals(prop2)) {
            dirty=true;
            break;
          }
        }
      }
      if (dirty) {
        updateMediaFields(media,newMedia);
        if (persist) {
          populateValueRequest.getPersistenceManager().getDynamicEntityDao().persist(media);
        }
        populateValueRequest.getFieldManager().setFieldValue(instance,populateValueRequest.getProperty().getName(),media);
      }
    }
 else {
      throw new UnsupportedOperationException("MediaFields only work with Media types.");
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
  populateValueRequest.getProperty().setIsDirty(dirty);
  return FieldProviderResponse.HANDLED;
}

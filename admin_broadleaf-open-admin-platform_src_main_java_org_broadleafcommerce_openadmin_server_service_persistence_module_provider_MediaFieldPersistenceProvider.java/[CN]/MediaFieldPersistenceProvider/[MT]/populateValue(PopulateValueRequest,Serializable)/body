{
  if (!canHandlePersistence(populateValueRequest,instance)) {
    return FieldProviderResponse.NOT_HANDLED;
  }
  FieldProviderResponse response=FieldProviderResponse.HANDLED;
  boolean dirty=false;
  try {
    setNonDisplayableValues(populateValueRequest);
    Class<?> startingValueType=null;
    if (!populateValueRequest.getProperty().getName().contains(FieldManager.MAPFIELDSEPARATOR)) {
      startingValueType=populateValueRequest.getReturnType();
    }
 else {
      String valueClassName=populateValueRequest.getMetadata().getMapFieldValueClass();
      if (valueClassName != null) {
        startingValueType=Class.forName(valueClassName);
      }
      if (startingValueType == null) {
        startingValueType=populateValueRequest.getReturnType();
      }
    }
    if (startingValueType == null) {
      throw new IllegalAccessException("Unable to determine the valueType for the rule field (" + populateValueRequest.getProperty().getName() + ")");
    }
 else     if (Media.class.equals(startingValueType)) {
      startingValueType=MediaImpl.class;
    }
    Class<?> valueType=startingValueType;
    if (!StringUtils.isEmpty(populateValueRequest.getMetadata().getToOneTargetProperty())) {
      java.lang.reflect.Field nestedField=FieldManager.getSingleField(valueType,populateValueRequest.getMetadata().getToOneTargetProperty());
      ManyToOne manyToOne=nestedField.getAnnotation(ManyToOne.class);
      if (manyToOne != null && !manyToOne.targetEntity().getName().equals(void.class.getName())) {
        valueType=manyToOne.targetEntity();
      }
 else {
        OneToOne oneToOne=nestedField.getAnnotation(OneToOne.class);
        if (oneToOne != null && !oneToOne.targetEntity().getName().equals(void.class.getName())) {
          valueType=oneToOne.targetEntity();
        }
      }
    }
    if (Media.class.isAssignableFrom(valueType)) {
      Media newMedia=convertJsonToMedia(populateValueRequest.getProperty().getUnHtmlEncodedValue());
      boolean persist=false;
      Object parent;
      Media media;
      try {
        parent=populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
        if (parent == null) {
          parent=startingValueType.newInstance();
          if (!startingValueType.equals(valueType)) {
            Object parentsParent=instance;
            String parentsParentName=populateValueRequest.getProperty().getName();
            if (parentsParentName.contains(".")) {
              parentsParent=populateValueRequest.getFieldManager().getFieldValue(instance,parentsParentName.substring(0,parentsParentName.lastIndexOf(".")));
            }
            populateValueRequest.getFieldManager().setFieldValue(parent,populateValueRequest.getMetadata().getToOneParentProperty(),parentsParent);
            populateValueRequest.getFieldManager().setFieldValue(parent,populateValueRequest.getMetadata().getMapKeyValueProperty(),parentsParentName.substring(parentsParentName.indexOf(FieldManager.MAPFIELDSEPARATOR) + FieldManager.MAPFIELDSEPARATOR.length(),parentsParentName.length()));
            populateValueRequest.getFieldManager().setFieldValue(parent,populateValueRequest.getMetadata().getToOneTargetProperty(),valueType.newInstance());
          }
          populateValueRequest.getFieldManager().setFieldValue(instance,populateValueRequest.getProperty().getName(),parent);
          parent=populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
          persist=true;
        }
        if (!StringUtils.isEmpty(populateValueRequest.getMetadata().getToOneTargetProperty())) {
          media=(Media)populateValueRequest.getFieldManager().getFieldValue(parent,populateValueRequest.getMetadata().getToOneTargetProperty());
        }
 else {
          media=(Media)parent;
        }
      }
 catch (      FieldNotAvailableException e) {
        throw new IllegalArgumentException(e);
      }
      populateValueRequest.getProperty().setOriginalValue(convertMediaToJson(media));
      Map description=BeanUtils.describe(media);
      for (      Object temp : description.keySet()) {
        String property=(String)temp;
        String[] ignoredProperties=sandBoxHelper.getSandBoxDiscriminatorFieldList();
        ignoredProperties=(String[])ArrayUtils.add(ignoredProperties,"id");
        Arrays.sort(ignoredProperties);
        if (Arrays.binarySearch(ignoredProperties,property) < 0) {
          String prop1=String.valueOf(description.get(property));
          String prop2=String.valueOf(BeanUtils.getProperty(newMedia,property));
          if (!prop1.equals(prop2)) {
            dirty=true;
            break;
          }
        }
      }
      if (dirty) {
        if (!persist) {
          parent=populateValueRequest.getPersistenceManager().getDynamicEntityDao().merge(parent);
          if (!StringUtils.isEmpty(populateValueRequest.getMetadata().getToOneTargetProperty())) {
            media=(Media)populateValueRequest.getFieldManager().getFieldValue(parent,populateValueRequest.getMetadata().getToOneTargetProperty());
          }
 else {
            media=(Media)parent;
          }
        }
        updateMediaFields(media,newMedia);
        if (persist) {
          populateValueRequest.getPersistenceManager().getDynamicEntityDao().persist(parent);
        }
        response=FieldProviderResponse.HANDLED_BREAK;
      }
    }
 else {
      throw new UnsupportedOperationException("MediaFields only work with Media types.");
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
  populateValueRequest.getProperty().setIsDirty(dirty);
  return response;
}

{
  super.bind();
  parentCategoriesPresenter.bind();
  productOptionsPresenter.bind();
  skusPresenter.bind();
  bundleItemsPresenter.bind();
  getDisplay().getGenerateSkusButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (getDisplay().getProductOptionsDisplay().getGrid().getTotalRows() <= 0) {
        SC.say(BLCMain.getMessageManager().getString("skuGenerationInvalid"));
      }
 else {
        SC.confirm(BLCMain.getMessageManager().getString("generateSkusConfirm"),new BooleanCallback(){
          @Override public void execute(          Boolean value){
            if (value) {
              Long productId=Long.parseLong(getDisplay().getListDisplay().getGrid().getSelectedRecord().getAttribute("id"));
              AppServices.CATALOG.generateSkusFromProduct(productId,new AsyncCallback<Integer>(){
                @Override public void onSuccess(                Integer result){
                  getDisplay().getSkusDisplay().getGrid().invalidateCache();
                  SC.say(result + " " + BLCMain.getMessageManager().getString("skuGenerationSuccess"));
                }
                @Override public void onFailure(                Throwable caught){
                  SC.say(BLCMain.getMessageManager().getString("skuGenerationFail"));
                }
              }
);
            }
 else {
              SC.say(BLCMain.getMessageManager().getString("noSkusGenerated"));
            }
          }
        }
);
      }
    }
  }
);
  getDisplay().getCloneProductButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      final Long productId=Long.parseLong(getDisplay().getListDisplay().getGrid().getSelectedRecord().getAttribute("id"));
      final String productName=getDisplay().getListDisplay().getGrid().getSelectedRecord().getAttribute("defaultSku.name");
      AppServices.CATALOG.cloneProduct(productId,new AsyncCallback<Boolean>(){
        @Override public void onFailure(        Throwable caught){
          SC.say("There was an error when cloning product " + productName);
        }
        @Override public void onSuccess(        Boolean result){
          if (result) {
            getDisplay().getListDisplay().getGrid().invalidateCache();
            SC.say(productName + " has been cloned successfully");
          }
 else {
            SC.say("There was an error when cloning product " + productName);
          }
        }
      }
);
    }
  }
);
  getDisplay().getExportProductsButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      AppServices.EXPORT.getExporters(AdminExporterType.PRODUCT.toString(),new AsyncCallback<List<AdminExporterDTO>>(){
        @Override public void onSuccess(        final List<AdminExporterDTO> result){
          if (result == null || result.size() == 0) {
            SC.say(BLCMain.getMessageManager().getString("noProductExporters"));
          }
 else {
            ExportListSelectionDialog exportSelectionDialog=new ExportListSelectionDialog();
            exportSelectionDialog.search(BLCMain.getMessageManager().getString("selectExporterTitle"),result);
          }
        }
        @Override public void onFailure(        Throwable caught){
        }
      }
);
    }
  }
);
  extendedFetchDataHandlerRegistration=display.getListDisplay().getGrid().addFetchDataHandler(new FetchDataHandler(){
    @Override public void onFilterData(    FetchDataEvent event){
      ((OneToOneProductSkuDisplay)display).getCloneProductButton().disable();
    }
  }
);
}

{
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("productDS",new OneToOneProductSkuDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource top){
      setupDisplayItems(top);
      ((ListGridDataSource)top).setupGridFields(new String[]{},new Boolean[]{});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("categorySearch",new CategoryListDataSourceFactory(),new OperationTypes(OperationType.BASIC,OperationType.BASIC,OperationType.ADORNEDTARGETLIST,OperationType.BASIC,OperationType.BASIC),new Object[]{},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      ListGridDataSource categorySearchDataSource=(ListGridDataSource)result;
      EntitySearchDialog categorySearchView=new EntitySearchDialog(categorySearchDataSource);
      library.put("categorySearchView",categorySearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("oneToOneProductSearchDS",new ProductListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      final ListGridDataSource productSearchDataSource=(ListGridDataSource)result;
      productSearchView=new EntitySearchDialog(productSearchDataSource);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("parentCategoriesDS",new ParentCategoryListDataSourceFactory(),new OperationTypes(OperationType.ADORNEDTARGETLIST,OperationType.ADORNEDTARGETLIST,OperationType.ADORNEDTARGETLIST,OperationType.ADORNEDTARGETLIST,OperationType.BASIC),new Object[]{},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      parentCategoriesPresenter=new SimpleSearchListPresenter("",getDisplay().getAllCategoriesDisplay(),(EntitySearchDialog)library.get("categorySearchView"),BLCMain.getMessageManager().getString("categorySearchPrompt"));
      parentCategoriesPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","urlKey"},new Boolean[]{false,false});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("productOptionSearchDS",new ProductOptionListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      EntitySearchDialog productOptionSearchView=new EntitySearchDialog((ListGridDataSource)result,true);
      library.put("productOptionSearchView",productOptionSearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("productOptionValuesDS",new ProductOptionValueDataSourceFactory(),new NullAsyncCallbackAdapter()));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("productOptionsDS",new ProductOptionDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      productOptionsPresenter=new AssociatedProductOptionPresenterBasic(getDisplay().getProductOptionsDisplay(),(EntitySearchDialog)library.get("productOptionSearchView"),BLCMain.getMessageManager().getString("productOptionSearchPrompt"));
      productOptionsPresenter.setDataSource((ListGridDataSource)result,new String[]{"label","type","required"},new Boolean[]{true,true,true});
      productOptionsPresenter.setExpansionDataSource((ListGridDataSource)getPresenterSequenceSetupManager().getDataSource("productOptionValuesDS"),new String[]{"displayOrder","attributeValue","priceAdjustment"},new Boolean[]{false,false,false});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("skuLocaleDS",new LocaleDataSourceFactory(org.broadleafcommerce.openadmin.client.datasource.CeilingEntities.LOCALE),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource top){
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("skusDS",new ProductSkusDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      skusPresenter=new SkusPresenter(getDisplay().getSkusDisplay(),"Add Sku",null,false,true,false);
      skusPresenter.setDataSource((ListGridDataSource)result,new String[]{},new Boolean[]{});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("skuSearchDS",new BundleSkuSearchDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      ListGridDataSource skuSearchDataSource=(ListGridDataSource)result;
      skuSearchDataSource.resetPermanentFieldVisibility("name","retailPrice","salePrice");
      skuSearchView=new EntitySearchDialog(skuSearchDataSource,true);
      skuSearchView.setWidth(800);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("bundleSkusDS",new SkuBundleItemsDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      bundleItemsPresenter=new EditableAdornedTargetListPresenter("",getDisplay().getBundleItemsDisplay(),skuSearchView,new String[]{EntityImplementations.PRODUCT_BUNDLE},BLCMain.getMessageManager().getString("skuSelect"),BLCMain.getMessageManager().getString("editBundleItem"),new String[]{"quantity","itemSalePrice"});
      bundleItemsPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","quantity","itemSalePrice"},new Boolean[]{false,false,false});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("staticAssetTreeDS",new StaticAssetsTileGridDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource dataSource){
      TileGridDataSource staticAssetTreeDS=(TileGridDataSource)dataSource;
      final AssetSearchDialog dialog=new AssetSearchDialog(staticAssetTreeDS);
      HashMap<String,Object> initialValues=new HashMap<String,Object>(10);
      initialValues.put("operation","add");
      initialValues.put("customCriteria","assetListUi");
      initialValues.put("ceilingEntityFullyQualifiedClassname",CeilingEntities.STATICASSETS);
      initialValues.put("_type",CeilingEntities.STATICASSETS);
      initialValues.put("csrfToken",BLCMain.csrfToken);
      dialog.setInitialValues(initialValues);
      library.put("staticAssetDialog",dialog);
    }
  }
));
}

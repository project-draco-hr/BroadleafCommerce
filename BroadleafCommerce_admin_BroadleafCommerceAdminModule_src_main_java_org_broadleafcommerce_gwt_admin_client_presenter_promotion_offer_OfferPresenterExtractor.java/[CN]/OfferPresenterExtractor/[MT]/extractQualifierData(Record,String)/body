{
  if ((getDisplay().getBogoRadio().getValue().equals("YES") && type.equals("ORDER_ITEM")) || getDisplay().getItemRuleRadio().equals("ITEM_RULE") && !type.equals("ORDER_ITEM")) {
    for (    final ItemBuilderDisplay builder : getDisplay().getItemBuilderViews()) {
      if (builder.getDirty()) {
        Integer quantity=(Integer)builder.getItemQuantity().getValue();
        String mvel;
        if (builder.getIncompatibleMVEL()) {
          mvel=builder.getRawItemTextArea().getValueAsString();
        }
 else {
          mvel=TRANSLATOR.createMVEL(builder.getItemFilterBuilder().getCriteria(),FilterType.ORDER_ITEM,builder.getItemFilterBuilder().getDataSource());
        }
        if (builder.getRecord() != null) {
          builder.getRecord().setAttribute("requiresQuantity",quantity);
          builder.getRecord().setAttribute("orderItemMatchRule",mvel);
          presenter.offerItemCriteriaDataSource.updateData(builder.getRecord(),new DSCallback(){
            public void execute(            DSResponse response,            Object rawData,            DSRequest request){
              builder.setDirty(false);
            }
          }
);
        }
 else {
          final Record temp=new Record();
          temp.setAttribute("requiresQuantity",quantity);
          temp.setAttribute("orderItemMatchRule",mvel);
          temp.setAttribute(OfferItemCriteriaListDataSourceFactory.foreignKeyName,presenter.entityDataSource.getPrimaryKeyValue(selectedRecord));
          presenter.offerItemCriteriaDataSource.addData(temp,new DSCallback(){
            public void execute(            DSResponse response,            Object rawData,            DSRequest request){
              builder.setDirty(false);
              builder.setRecord(temp);
            }
          }
);
        }
      }
    }
  }
 else {
    for (    final ItemBuilderDisplay builder : getDisplay().getItemBuilderViews()) {
      removeItemQualifer(builder);
    }
  }
}

{
  CheckoutSeed seed=processContext.getSeedData();
  if (paymentConfigurationServiceProvider == null) {
    throw new RollbackFailureException("There is no rollback service configured for the payment gateway configuration, cannot rollback unconfirmed" + " payments");
  }
  Map<OrderPayment,PaymentTransaction> rollbackResponseTransactions=new HashMap<OrderPayment,PaymentTransaction>();
  Collection<PaymentTransaction> transactions=(Collection<PaymentTransaction>)stateConfiguration.get(ValidateAndConfirmPaymentActivity.CONFIRMED_TRANSACTIONS);
  for (  PaymentTransaction tx : transactions) {
    PaymentRequestDTO rollbackRequest=transactionToPaymentRequestDTOService.translatePaymentTransaction(tx.getAmount(),tx);
    PaymentGatewayConfigurationService cfg=paymentConfigurationServiceProvider.getGatewayConfigurationService(tx.getOrderPayment().getGatewayType());
    try {
      PaymentResponseDTO responseDTO=null;
      if (PaymentTransactionType.AUTHORIZE.equals(tx.getType())) {
        if (cfg.getRollbackService() != null) {
          responseDTO=cfg.getRollbackService().rollbackAuthorize(rollbackRequest);
        }
      }
 else       if (PaymentTransactionType.AUTHORIZE_AND_CAPTURE.equals(tx.getType())) {
        if (cfg.getRollbackService() != null) {
          responseDTO=cfg.getRollbackService().rollbackAuthorizeAndCapture(rollbackRequest);
        }
      }
 else {
        LOG.warn("The transaction with id " + tx.getId() + " will NOT be rolled back as it is not an AUTHORIZE or AUTHORIZE_AND_CAPTURE transaction but is"+ " of type "+ tx.getType()+ ". If you need to roll back transactions of this type then provide a customized rollback handler for"+ " confirming transactions.");
      }
      if (responseDTO != null) {
        PaymentTransaction transaction=orderPaymentService.createTransaction();
        transaction.setAmount(responseDTO.getAmount());
        transaction.setRawResponse(responseDTO.getRawResponse());
        transaction.setSuccess(responseDTO.isSuccessful());
        transaction.setType(responseDTO.getPaymentTransactionType());
        transaction.setParentTransaction(tx);
        transaction.setOrderPayment(tx.getOrderPayment());
        transaction.setAdditionalFields(responseDTO.getResponseMap());
        rollbackResponseTransactions.put(tx.getOrderPayment(),transaction);
        if (!responseDTO.isSuccessful()) {
          LOG.fatal("Unable to rollback transaction with id " + tx.getId() + ". The call was unsuccessful with"+ " raw response: "+ responseDTO.getRawResponse());
        }
      }
    }
 catch (    PaymentException e) {
      throw new RollbackFailureException("The transaction with id " + tx.getId() + " encountered and exception when it was attempted to roll back"+ " its confirmation",e);
    }
  }
  Order order=seed.getOrder();
  List<OrderPayment> paymentsToInvalidate=new ArrayList<OrderPayment>();
  boolean rollbackFailure=false;
  for (  OrderPayment payment : order.getPayments()) {
    if (rollbackResponseTransactions.containsKey(payment)) {
      PaymentTransaction rollbackTX=rollbackResponseTransactions.get(payment);
      payment.addTransaction(rollbackTX);
      payment=orderPaymentService.save(payment);
      paymentsToInvalidate.add(payment);
      if (!rollbackTX.getSuccess()) {
        rollbackFailure=true;
      }
    }
  }
  if (rollbackFailure) {
    throw new RollbackFailureException("The ConfirmPaymentsRollbackHandler encountered and exception when it " + "attempted to roll back a transaction on one of the payments. Please see LOG for details.");
  }
 else {
    for (    OrderPayment payment : paymentsToInvalidate) {
      order.getPayments().remove(payment);
      paymentGatewayCheckoutService.markPaymentAsInvalid(payment.getId());
    }
    try {
      orderService.save(order,false);
    }
 catch (    PricingException e) {
      throw new RollbackFailureException("Unable to save the order with invalidated payments.");
    }
  }
}

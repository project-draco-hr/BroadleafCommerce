{
  CustomerPayment customerPayment=customerPaymentService.create();
  customerPayment.setCustomer(customer);
  customerPayment.setBillingAddress(orderPayment.getBillingAddress());
  customerPayment.setPaymentGatewayType(orderPayment.getGatewayType());
  String cardType=null;
  String expDate=null;
  String lastFour=null;
  String token=null;
  for (  PaymentTransaction paymentTransaction : orderPayment.getTransactions()) {
    if (cardType == null) {
      cardType=paymentTransaction.getAdditionalFields().get(PaymentAdditionalFieldType.CARD_TYPE.getType());
    }
    if (expDate == null) {
      expDate=paymentTransaction.getAdditionalFields().get(PaymentAdditionalFieldType.EXP_DATE.getType());
    }
    if (lastFour == null) {
      lastFour=paymentTransaction.getAdditionalFields().get(PaymentAdditionalFieldType.LAST_FOUR.getType());
    }
    if (token == null) {
      token=paymentTransaction.getAdditionalFields().get(PaymentAdditionalFieldType.TOKEN.getType());
    }
  }
  Calendar calendar=new GregorianCalendar();
  if (expDate != null) {
    String[] expDateArray=expDate.split("/");
    calendar.set(Integer.parseInt(expDateArray[1]),Integer.parseInt(expDateArray[0]),0);
    calendar.add(Calendar.MONTH,1);
    calendar.set(Calendar.DAY_OF_MONTH,1);
    calendar.set(Calendar.MILLISECOND,0);
    calendar.set(Calendar.HOUR_OF_DAY,0);
    calendar.set(Calendar.MINUTE,0);
    calendar.set(Calendar.SECOND,0);
    Date date=calendar.getTime();
    customerPayment.setExpirationDate(date);
  }
  customerPayment.setCardType(cardType);
  customerPayment.setLastFour(lastFour);
  customerPayment.setPaymentToken(token);
  orderPayment.setCustomerPayment(customerPayment);
  return this.save(orderPayment).getCustomerPayment();
}

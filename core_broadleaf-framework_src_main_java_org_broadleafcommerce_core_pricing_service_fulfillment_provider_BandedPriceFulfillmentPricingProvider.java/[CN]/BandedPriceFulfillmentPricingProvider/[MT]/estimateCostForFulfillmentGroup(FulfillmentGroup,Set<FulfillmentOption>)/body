{
  FulfillmentEstimationResponse res=new FulfillmentEstimationResponse();
  HashMap<BandedPriceFulfillmentOption,Money> shippingPrices=new HashMap<BandedPriceFulfillmentOption,Money>();
  res.setFulfillmentOptionPrices(shippingPrices);
  for (  FulfillmentOption option : options) {
    if (canCalculateCostForFulfillmentGroup(fulfillmentGroup,option)) {
      BandedPriceFulfillmentOption bandedPriceFulfillmentOption=(BandedPriceFulfillmentOption)option;
      List<FulfillmentPriceBand> bands=bandedPriceFulfillmentOption.getBands();
      if (bands == null || bands.isEmpty()) {
        throw new IllegalStateException("There were no Fulfillment Price Bands configred for a BandedPriceFulfillmentOption with ID: " + bandedPriceFulfillmentOption.getId());
      }
      BigDecimal retailTotal=BigDecimal.ZERO;
      BigDecimal flatTotal=BigDecimal.ZERO;
      for (      FulfillmentGroupItem fulfillmentGroupItem : fulfillmentGroup.getFulfillmentGroupItems()) {
        boolean addToRetailTotal=true;
        if (option.getUseFlatRates()) {
          Sku sku=null;
          if (fulfillmentGroupItem.getOrderItem() instanceof DiscreteOrderItem) {
            sku=((DiscreteOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
          }
 else           if (fulfillmentGroupItem.getOrderItem() instanceof BundleOrderItem) {
            sku=((BundleOrderItem)fulfillmentGroupItem.getOrderItem()).getSku();
          }
          if (sku != null) {
            BigDecimal rate=sku.getFulfillmentFlatRates().get(option);
            if (rate != null) {
              addToRetailTotal=false;
              flatTotal=flatTotal.add(rate);
            }
          }
        }
        if (addToRetailTotal) {
          BigDecimal price=(fulfillmentGroupItem.getRetailPrice() != null) ? fulfillmentGroupItem.getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity())) : null;
          if (price == null) {
            price=fulfillmentGroupItem.getOrderItem().getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
          }
          retailTotal=retailTotal.add(price);
        }
      }
      BigDecimal lowestFulfillmentAmount=BigDecimal.ZERO;
      BigDecimal lowestFulfillmentBandRetailMinimum=BigDecimal.ZERO;
      for (      FulfillmentPriceBand band : bands) {
        BigDecimal bandRetailPriceMinimumAmount=band.getRetailPriceMinimumAmount();
        if (retailTotal.compareTo(bandRetailPriceMinimumAmount) >= 0) {
          FulfillmentBandResultAmountType resultAmountType=band.getResultAmountType();
          BigDecimal bandFulfillmentPrice=null;
          if (FulfillmentBandResultAmountType.RATE.equals(resultAmountType)) {
            bandFulfillmentPrice=band.getResultAmount();
          }
 else           if (FulfillmentBandResultAmountType.PERCENTAGE.equals(resultAmountType)) {
            bandFulfillmentPrice=retailTotal.multiply(band.getResultAmount());
          }
 else {
            LOG.warn("Unknown FulfillmentBandResultAmountType: " + resultAmountType.getType() + " Should be RATE or PERCENTAGE. Ignoring.");
          }
          if (bandFulfillmentPrice != null) {
            if (lowestFulfillmentBandRetailMinimum.equals(bandRetailPriceMinimumAmount)) {
              if (bandFulfillmentPrice.compareTo(lowestFulfillmentAmount) <= 0) {
                lowestFulfillmentAmount=bandFulfillmentPrice;
                lowestFulfillmentBandRetailMinimum=bandRetailPriceMinimumAmount;
              }
            }
 else             if (bandRetailPriceMinimumAmount.compareTo(lowestFulfillmentBandRetailMinimum) > 0) {
              lowestFulfillmentAmount=bandFulfillmentPrice;
              lowestFulfillmentBandRetailMinimum=bandRetailPriceMinimumAmount;
            }
          }
        }
      }
      lowestFulfillmentAmount=lowestFulfillmentAmount.add(flatTotal);
      shippingPrices.put(bandedPriceFulfillmentOption,new Money(lowestFulfillmentAmount));
    }
  }
  return res;
}

{
  Answer answer=new Answer();
  Answer2 answer2=new Answer2();
  EasyMock.expect(offerDaoMock.createCandidateItemOffer()).andAnswer(answer).times(2);
  EasyMock.expect(offerDaoMock.createOrderItemAdjustment()).andAnswer(answer2).times(7);
  replay();
  PromotableOrder order=dataProvider.createBasicOrder();
  Offer offer1=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer1.setId(1L);
  offer1.getTargetItemCriteria().iterator().next().setQuantity(2);
  offer1.setCombinableWithOtherOffers(false);
  Offer offer2=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer2.setId(2L);
  List<PromotableCandidateItemOffer> qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,offer1);
  assertTrue(qualifiedOffers.size() == 1 && qualifiedOffers.get(0).getOffer().equals(offer1) && qualifiedOffers.get(0).getCandidateQualifiersMap().size() == 1);
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,offer2);
  assertTrue(qualifiedOffers.size() == 2 && qualifiedOffers.get(1).getOffer().equals(offer2) && qualifiedOffers.get(1).getCandidateQualifiersMap().size() == 1);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(0));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 1);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(1));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 1);
  order.removeAllCandidateOfferAdjustments();
  offer1.setCombinableWithOtherOffers(true);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(0));
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(1));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 2);
  order.removeAllCandidateOfferAdjustments();
  offer1.setCombinableWithOtherOffers(false);
  offer1.setApplyDiscountToSalePrice(false);
  order.getDiscountableOrderItems().get(1).getOrderItem().setSalePrice(new Money(10D));
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(0));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 0);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(1));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 1);
  order.removeAllCandidateItemOfferAdjustments();
  offer1.setCombinableWithOtherOffers(true);
  order.getDiscountableOrderItems().get(1).getOrderItem().setSalePrice(null);
  offer2.setCombinableWithOtherOffers(false);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(0));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 1);
  itemProcessor.applyAdjustments(order,qualifiedOffers.get(1));
  assertTrue(checkOrderItemOfferAppliedCount(order) == 2);
  verify();
}

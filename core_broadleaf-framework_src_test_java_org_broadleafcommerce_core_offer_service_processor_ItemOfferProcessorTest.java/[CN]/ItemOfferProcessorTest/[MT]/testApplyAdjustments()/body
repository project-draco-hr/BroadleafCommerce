{
  EasyMock.expect(offerDaoMock.createOrderItemPriceDetailAdjustment()).andAnswer(OfferDataItemProvider.getCreateOrderItemPriceDetailAdjustmentAnswer()).anyTimes();
  EasyMock.expect(fgServiceMock.addItemToFulfillmentGroup(EasyMock.isA(FulfillmentGroupItemRequest.class),EasyMock.eq(false))).andAnswer(OfferDataItemProvider.getAddItemToFulfillmentGroupAnswer()).anyTimes();
  EasyMock.expect(orderServiceMock.removeItem(EasyMock.isA(Long.class),EasyMock.isA(Long.class),EasyMock.eq(false))).andAnswer(OfferDataItemProvider.getRemoveItemFromOrderAnswer()).anyTimes();
  EasyMock.expect(orderServiceMock.save(EasyMock.isA(Order.class),EasyMock.isA(Boolean.class))).andAnswer(OfferDataItemProvider.getSaveOrderAnswer()).anyTimes();
  EasyMock.expect(orderServiceMock.getAutomaticallyMergeLikeItems()).andReturn(true).anyTimes();
  EasyMock.expect(orderItemServiceMock.saveOrderItem(EasyMock.isA(OrderItem.class))).andAnswer(OfferDataItemProvider.getSaveOrderItemAnswer()).anyTimes();
  EasyMock.expect(fgItemDaoMock.save(EasyMock.isA(FulfillmentGroupItem.class))).andAnswer(OfferDataItemProvider.getSaveFulfillmentGroupItemAnswer()).anyTimes();
  EasyMock.expect(multishipOptionServiceMock.findOrderMultishipOptions(EasyMock.isA(Long.class))).andAnswer(new IAnswer<List<OrderMultishipOption>>(){
    @Override public List<OrderMultishipOption> answer() throws Throwable {
      return new ArrayList<OrderMultishipOption>();
    }
  }
).anyTimes();
  multishipOptionServiceMock.deleteAllOrderMultishipOptions(EasyMock.isA(Order.class));
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(fgServiceMock.collapseToOneFulfillmentGroup(EasyMock.isA(Order.class),EasyMock.eq(false))).andAnswer(OfferDataItemProvider.getSameOrderAnswer()).anyTimes();
  EasyMock.expect(fgItemDaoMock.create()).andAnswer(OfferDataItemProvider.getCreateFulfillmentGroupItemAnswer()).anyTimes();
  fgItemDaoMock.delete(EasyMock.isA(FulfillmentGroupItem.class));
  EasyMock.expectLastCall().anyTimes();
  replay();
  PromotableOrder order=dataProvider.createBasicOrder();
  Offer offer1=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer1.setId(1L);
  offer1.getTargetItemCriteria().iterator().next().setQuantity(2);
  offer1.setCombinableWithOtherOffers(false);
  Offer offer2=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer2.setId(2L);
  List<Offer> offerListWithOneOffer=new ArrayList<Offer>();
  offerListWithOneOffer.add(offer1);
  List<Offer> offerListWithTwoOffers=new ArrayList<Offer>();
  offerListWithTwoOffers.add(offer1);
  offerListWithTwoOffers.add(offer2);
  List<PromotableCandidateItemOffer> qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  offerService.applyOffersToOrder(offerListWithOneOffer,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 1);
  order=dataProvider.createBasicOrder();
  offerService.applyOffersToOrder(offerListWithTwoOffers,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 1);
  offer1.setCombinableWithOtherOffers(true);
  order=dataProvider.createBasicOrder();
  offerService.applyOffersToOrder(offerListWithTwoOffers,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 2);
  offer1.setCombinableWithOtherOffers(false);
  offer1.setApplyDiscountToSalePrice(false);
  order=dataProvider.createBasicOrder();
  order.getOrder().getOrderItems().get(1).setSalePrice(new Money(10D));
  offerService.applyOffersToOrder(offerListWithOneOffer,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 0);
  offerService.applyOffersToOrder(offerListWithTwoOffers,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 1);
  offer1.setCombinableWithOtherOffers(true);
  order.getOrder().getOrderItems().get(1).setSalePrice(null);
  offer2.setCombinableWithOtherOffers(false);
  offerService.applyOffersToOrder(offerListWithOneOffer,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 1);
  offerService.applyOffersToOrder(offerListWithTwoOffers,order.getOrder());
  assertTrue(checkOrderItemOfferAppliedCount(order.getOrder()) == 1);
  verify();
}

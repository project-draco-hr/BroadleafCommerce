{
  Answer answer=new Answer();
  EasyMock.expect(offerDaoMock.createCandidateItemOffer()).andAnswer(answer).times(3);
  replay();
  PromotableOrder order=dataProvider.createBasicOrder();
  List<PromotableCandidateItemOffer> qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  Offer offer1=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer1.setId(1L);
  Offer offer2=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer2.setId(2L);
  offer2.getTargetItemCriteria().iterator().next().setQuantity(4);
  offer2.getQualifyingItemCriteria().clear();
  offer2.setOfferItemTargetRuleType(OfferItemRestrictionRuleType.TARGET);
  Offer offer3=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,offer1);
  assertTrue(qualifiedOffers.size() == 1 && qualifiedOffers.get(0).getOffer().equals(offer1) && qualifiedOffers.get(0).getCandidateQualifiersMap().size() == 1);
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,offer2);
  assertTrue(qualifiedOffers.size() == 2 && qualifiedOffers.get(1).getOffer().equals(offer2) && qualifiedOffers.get(1).getCandidateQualifiersMap().size() == 0);
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,offer3);
  assertTrue(qualifiedOffers.size() == 3 && qualifiedOffers.get(2).getOffer().equals(offer3) && qualifiedOffers.get(2).getCandidateQualifiersMap().size() == 1);
  itemProcessor.applyItemQualifiersAndTargets(qualifiedOffers.get(1),order);
  int qualCount=0;
  int targetCount=0;
  for (  PromotableOrderItemPriceDetail detail : order.getAllPromotableOrderItemPriceDetails()) {
    for (    PromotionDiscount discount : detail.getPromotionDiscounts()) {
      targetCount+=discount.getQuantity();
    }
    for (    PromotionQualifier qual : detail.getPromotionQualifiers()) {
      qualCount+=qual.getQuantity();
    }
  }
  assertTrue(qualCount == 0 && targetCount == 4);
  assertTrue(order.getAllPromotableOrderItemPriceDetails().size() == 3);
  itemProcessor.applyItemQualifiersAndTargets(qualifiedOffers.get(0),order);
  qualCount=0;
  targetCount=0;
  for (  PromotableOrderItemPriceDetail detail : order.getAllPromotableOrderItemPriceDetails()) {
    for (    PromotionDiscount discount : detail.getPromotionDiscounts()) {
      targetCount+=discount.getQuantity();
    }
    for (    PromotionQualifier qual : detail.getPromotionQualifiers()) {
      qualCount+=qual.getQuantity();
    }
  }
  assertTrue(qualCount == 1 && targetCount == 5);
  assertTrue(order.getAllPromotableOrderItemPriceDetails().size() == 2);
  itemProcessor.applyItemQualifiersAndTargets(qualifiedOffers.get(2),order);
  qualCount=0;
  targetCount=0;
  for (  PromotableOrderItemPriceDetail detail : order.getAllPromotableOrderItemPriceDetails()) {
    for (    PromotionDiscount discount : detail.getPromotionDiscounts()) {
      targetCount+=discount.getQuantity();
    }
    for (    PromotionQualifier qual : detail.getPromotionQualifiers()) {
      qualCount+=qual.getQuantity();
    }
  }
  int promoCount=0;
  for (  PromotableOrderItemPriceDetail detail : order.getAllPromotableOrderItemPriceDetails()) {
    promoCount+=detail.getPromotionDiscounts().size();
  }
  assertTrue(qualCount == 1 && targetCount == 5);
  assertTrue(order.getAllPromotableOrderItemPriceDetails().size() == 2);
  assertTrue(promoCount == 4);
  verify();
}

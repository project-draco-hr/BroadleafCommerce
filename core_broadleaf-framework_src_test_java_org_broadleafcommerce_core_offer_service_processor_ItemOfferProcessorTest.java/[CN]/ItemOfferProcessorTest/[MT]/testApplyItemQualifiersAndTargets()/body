{
  replay();
  List<PromotableCandidateItemOffer> qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  Offer offer1=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer1.setId(1L);
  Offer offer2=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer2.setId(2L);
  OfferTargetCriteriaXref targetXref=offer2.getTargetItemCriteriaXref().iterator().next();
  targetXref.getOfferItemCriteria().setQuantity(4);
  offer2.getQualifyingItemCriteriaXref().clear();
  offer2.setOfferItemTargetRuleType(OfferItemRestrictionRuleType.TARGET);
  Offer offer3=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  PromotableOrder promotableOrder=dataProvider.createBasicPromotableOrder();
  itemProcessor.filterItemLevelOffer(promotableOrder,qualifiedOffers,offer1);
  assertTrue(qualifiedOffers.size() == 1 && qualifiedOffers.get(0).getOffer().equals(offer1) && qualifiedOffers.get(0).getCandidateQualifiersMap().size() == 1);
  itemProcessor.filterItemLevelOffer(promotableOrder,qualifiedOffers,offer2);
  assertTrue(qualifiedOffers.size() == 2 && qualifiedOffers.get(1).getOffer().equals(offer2) && qualifiedOffers.get(1).getCandidateQualifiersMap().size() == 0);
  itemProcessor.filterItemLevelOffer(promotableOrder,qualifiedOffers,offer3);
  assertTrue(qualifiedOffers.size() == 3 && qualifiedOffers.get(2).getOffer().equals(offer3) && qualifiedOffers.get(2).getCandidateQualifiersMap().size() == 1);
  Order order=dataProvider.createBasicOrder();
  List<Offer> offerList=new ArrayList<Offer>();
  offerList.add(offer2);
  offerService.applyAndSaveOffersToOrder(offerList,order);
  assertTrue(checkOrderItemOfferAppliedQuantity(order,offer2) == 4);
  assertTrue(countPriceDetails(order) == 3);
  order=dataProvider.createBasicOrder();
  offerList.add(offer1);
  offerService.applyAndSaveOffersToOrder(offerList,order);
  assertTrue(checkOrderItemOfferAppliedQuantity(order,offer2) == 4);
  assertTrue(countPriceDetails(order) == 3);
  order=dataProvider.createBasicOrder();
  offerList.add(offer3);
  offer3.setPriority(-1);
  offerService.applyAndSaveOffersToOrder(offerList,order);
  assertTrue(checkOrderItemOfferAppliedQuantity(order,offer3) == 2);
  assertTrue(countPriceDetails(order) == 4);
  verify();
}

{
  replay();
  Order order=dataProvider.createBasicOrder();
  Offer offer1=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  offer1.setId(1L);
  List<Offer> offers=new ArrayList<Offer>();
  offers.add(offer1);
  List<PromotableCandidateItemOffer> qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  order.updatePrices();
  offerService.applyAndSaveOffersToOrder(offers,order);
  assertTrue(order.getTotalAdjustmentsValue().getAmount().doubleValue() > 0);
  order=dataProvider.createBasicOrder();
  qualifiedOffers=new ArrayList<PromotableCandidateItemOffer>();
  offer1.setApplyDiscountToSalePrice(false);
  ((DiscreteOrderItem)order.getOrderItems().get(0)).getSku().setSalePrice(new Money(1D));
  ((DiscreteOrderItem)order.getOrderItems().get(1)).getSku().setSalePrice(new Money(1D));
  order.updatePrices();
  offerService.applyAndSaveOffersToOrder(offers,order);
  assertTrue(order.getTotalAdjustmentsValue().getAmount().doubleValue() == 0);
  verify();
}

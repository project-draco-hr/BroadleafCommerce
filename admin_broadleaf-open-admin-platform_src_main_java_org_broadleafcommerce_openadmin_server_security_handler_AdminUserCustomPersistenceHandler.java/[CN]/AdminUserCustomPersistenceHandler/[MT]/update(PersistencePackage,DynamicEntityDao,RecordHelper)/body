{
  Entity entity=persistencePackage.getEntity();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> adminProperties=helper.getSimpleMergedProperties(AdminUser.class.getName(),persistencePerspective);
    Object primaryKey=helper.getPrimaryKey(entity,adminProperties);
    AdminUser adminInstance=(AdminUser)dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),primaryKey);
    dynamicEntityDao.detach(adminInstance);
    Entity errorEntity=validateLegalUsernameAndEmail(entity,adminInstance,false);
    if (errorEntity != null) {
      return errorEntity;
    }
    String passwordBefore=adminInstance.getPassword();
    adminInstance.setPassword(null);
    adminInstance=(AdminUser)helper.createPopulatedInstance(adminInstance,entity,adminProperties,false);
    Property passwordProperty=entity.getPMap().get("password");
    if (passwordProperty != null) {
      if (StringUtils.isNotEmpty(passwordProperty.getValue())) {
        adminInstance.setUnencodedPassword(passwordProperty.getValue());
        adminInstance.setPassword(null);
      }
 else {
        adminInstance.setPassword(passwordBefore);
      }
    }
    if (!adminRemoteSecurityService.getPersistentAdminUser().getId().equals(adminInstance.getId())) {
      adminRemoteSecurityService.securityCheck(persistencePackage,EntityOperationType.UPDATE);
    }
    adminInstance=adminSecurityService.saveAdminUser(adminInstance);
    Entity adminEntity=helper.getRecord(adminProperties,adminInstance,null,null);
    return adminEntity;
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to update entity for " + entity.getType()[0],e);
  }
}

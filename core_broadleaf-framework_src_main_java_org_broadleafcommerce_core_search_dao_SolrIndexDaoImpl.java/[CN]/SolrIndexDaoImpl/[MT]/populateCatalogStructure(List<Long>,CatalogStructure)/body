{
  Map<Long,Set<Long>> parentCategoriesByProduct=new HashMap<Long,Set<Long>>();
  Map<Long,Set<Long>> parentCategoriesByCategory=new HashMap<Long,Set<Long>>();
  Long[] products=productIds.toArray(new Long[productIds.size()]);
  int batchSize=800;
  int count=0;
  int pos=0;
  while (pos < products.length) {
    int remaining=products.length - pos;
    int mySize=remaining > batchSize ? batchSize : remaining;
    Long[] temp=new Long[mySize];
    System.arraycopy(products,pos,temp,0,mySize);
    TypedQuery<ParentCategoryByProduct> query=em.createNamedQuery("BC_READ_PARENT_CATEGORY_IDS_BY_PRODUCTS",ParentCategoryByProduct.class);
    query.setParameter("productIds",Arrays.asList(temp));
    List<ParentCategoryByProduct> results=query.getResultList();
    for (    ParentCategoryByProduct item : results) {
      if (!catalogStructure.getParentCategoriesByProduct().containsKey(item.getProduct())) {
        if (!parentCategoriesByProduct.containsKey(item.getProduct())) {
          parentCategoriesByProduct.put(item.getProduct(),new HashSet<Long>());
        }
        parentCategoriesByProduct.get(item.getProduct()).add(item.getParent());
      }
    }
    for (    Map.Entry<Long,Set<Long>> entry : parentCategoriesByProduct.entrySet()) {
      for (      Long categoryId : entry.getValue()) {
        if (!catalogStructure.getParentCategoriesByCategory().containsKey(categoryId)) {
          Set<Long> hierarchy=new HashSet<Long>();
          parentCategoriesByCategory.put(categoryId,hierarchy);
        }
        if (!catalogStructure.getProductsByCategory().containsKey(categoryId)) {
          catalogStructure.getProductsByCategory().put(categoryId,readProductIdsByCategory(categoryId));
        }
      }
    }
    count++;
    pos=(count * batchSize) < products.length ? (count * batchSize) : products.length;
  }
  readFullCategoryHierarchy(parentCategoriesByCategory);
  catalogStructure.getParentCategoriesByProduct().putAll(parentCategoriesByProduct);
  catalogStructure.getParentCategoriesByCategory().putAll(parentCategoriesByCategory);
}

{
  JoinStructure joinTable=(JoinStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINSTRUCTURE);
  Entity entity=super.buildEntity(record,request);
  entity.setType(new String[]{joinTable.getJoinStructureEntityClassname()});
  List<Property> properties=new ArrayList<Property>();
{
    Property property=new Property();
    property.setName(joinTable.getLinkedObjectPath() + "." + joinTable.getLinkedIdProperty());
    property.setValue(dataSource.stripDuplicateAllowSpecialCharacters(getLinkedValue()));
    properties.add(property);
  }
{
    Property property=new Property();
    property.setName(joinTable.getTargetObjectPath() + "." + joinTable.getTargetIdProperty());
    String id=dataSource.stripDuplicateAllowSpecialCharacters(dataSource.getPrimaryKeyValue(record));
    if (id == null || id.equals("")) {
      id=dataSource.stripDuplicateAllowSpecialCharacters(record.getAttribute("backup_id"));
    }
    property.setValue(id);
    properties.add(property);
  }
  if (joinTable.getSortField() != null) {
    Property property=new Property();
    property.setName(joinTable.getSortField());
    property.setValue(record.getAttribute(joinTable.getSortField()));
    properties.add(property);
  }
  Property[] props=new Property[properties.size() + entity.getProperties().length];
  for (int j=0; j < properties.size(); j++) {
    props[j]=properties.get(j);
    props[j].setIsDirty(true);
  }
  int count=properties.size();
  for (int j=0; j < entity.getProperties().length; j++) {
    props[count]=entity.getProperties()[j];
    props[count].setIsDirty(true);
    count++;
  }
  entity.setProperties(props);
  return entity;
}

{
  List<OrderMultishipOption> multishipOptions=orderMultishipOptionService.findOrderMultishipOptions(order.getId());
  Map<Long,Integer> fgItemQuantityMap=new HashMap<Long,Integer>();
  Map<String,FulfillmentGroup> multishipGroups=new HashMap<String,FulfillmentGroup>();
  for (  FulfillmentGroup fg : order.getFulfillmentGroups()) {
    if (!isShippable(fg.getType())) {
      continue;
    }
    String key=getKey(fg.getAddress(),fg.getFulfillmentOption(),fg.getType());
    multishipGroups.put(key,fg);
    for (    FulfillmentGroupItem fgi : fg.getFulfillmentGroupItems()) {
      fgItemQuantityMap.put(fgi.getId(),fgi.getQuantity());
    }
  }
  for (  OrderMultishipOption option : multishipOptions) {
    String key=getKey(option.getAddress(),option.getFulfillmentOption(),((DiscreteOrderItem)option.getOrderItem()).getSku().getFulfillmentType());
    FulfillmentGroup fg=multishipGroups.get(key);
    if (fg == null) {
      FulfillmentGroupRequest fgr=new FulfillmentGroupRequest();
      fgr.setOrder(order);
      if (option.getAddress() != null) {
        fgr.setAddress(option.getAddress());
      }
      if (option.getFulfillmentOption() != null) {
        fgr.setOption(option.getFulfillmentOption());
      }
      fgr.setFulfillmentType(((DiscreteOrderItem)option.getOrderItem()).getSku().getFulfillmentType());
      fg=addFulfillmentGroupToOrder(fgr,false);
      fg=save(fg);
      order.getFulfillmentGroups().add(fg);
    }
    FulfillmentGroupItem fulfillmentGroupItem=null;
    for (    FulfillmentGroupItem fgi : fg.getFulfillmentGroupItems()) {
      if (fgi.getOrderItem().getId().equals(option.getOrderItem().getId())) {
        fulfillmentGroupItem=fgi;
      }
    }
    if (fulfillmentGroupItem == null) {
      fulfillmentGroupItem=fulfillmentGroupItemDao.create();
      fulfillmentGroupItem.setFulfillmentGroup(fg);
      fulfillmentGroupItem.setOrderItem(option.getOrderItem());
      fulfillmentGroupItem.setQuantity(1);
      fulfillmentGroupItem=fulfillmentGroupItemDao.save(fulfillmentGroupItem);
      fg.getFulfillmentGroupItems().add(fulfillmentGroupItem);
    }
 else {
      if (fulfillmentGroupItem.getId() != null) {
        Integer qty=fgItemQuantityMap.get(fulfillmentGroupItem.getId());
        if (qty == null || qty == 0) {
          fulfillmentGroupItem.setQuantity(fulfillmentGroupItem.getQuantity() + 1);
        }
 else {
          qty-=1;
          fgItemQuantityMap.put(fulfillmentGroupItem.getId(),qty);
        }
      }
 else {
        fulfillmentGroupItem.setQuantity(fulfillmentGroupItem.getQuantity() + 1);
      }
    }
    multishipGroups.put(key,fg);
  }
  for (  Entry<Long,Integer> entry : fgItemQuantityMap.entrySet()) {
    if (entry.getValue() > 0) {
      FulfillmentGroupItem fgi=fulfillmentGroupItemDao.readFulfillmentGroupItemById(entry.getKey());
      if (fgi.getQuantity() == entry.getValue()) {
        FulfillmentGroup fg=fgi.getFulfillmentGroup();
        fg.getFulfillmentGroupItems().remove(fgi);
        fulfillmentGroupItemDao.delete(fgi);
        if (fg.getFulfillmentGroupItems().size() == 0) {
          order.getFulfillmentGroups().remove(fg);
          fulfillmentGroupDao.delete(fg);
        }
      }
 else {
        fgi.setQuantity(fgi.getQuantity() - entry.getValue());
        fulfillmentGroupItemDao.save(fgi);
      }
    }
  }
  return orderService.save(order,priceOrder);
}

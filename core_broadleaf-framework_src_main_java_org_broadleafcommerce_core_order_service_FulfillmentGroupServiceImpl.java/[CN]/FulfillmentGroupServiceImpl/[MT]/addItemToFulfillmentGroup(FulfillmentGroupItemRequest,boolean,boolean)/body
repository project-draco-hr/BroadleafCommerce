{
  if (priceOrder && !save) {
    throw new IllegalArgumentException("Pricing requires a save");
  }
  Order order=fulfillmentGroupItemRequest.getOrder();
  OrderItem item=fulfillmentGroupItemRequest.getOrderItem();
  FulfillmentGroup fulfillmentGroup=fulfillmentGroupItemRequest.getFulfillmentGroup();
  if (order == null) {
    if (item.getOrder() != null) {
      order=item.getOrder();
    }
 else {
      throw new IllegalArgumentException("Order must not be null");
    }
  }
  for (  FulfillmentGroup fg : order.getFulfillmentGroups()) {
    Iterator<FulfillmentGroupItem> itr=fg.getFulfillmentGroupItems().iterator();
    while (itr.hasNext()) {
      FulfillmentGroupItem fgItem=itr.next();
      if (fgItem.getOrderItem().equals(item)) {
        itr.remove();
        fulfillmentGroupItemDao.delete(fgItem);
      }
    }
  }
  if (fulfillmentGroup == null) {
    fulfillmentGroup=fulfillmentGroupDao.create();
    FulfillmentGroupRequest fgRequest=new FulfillmentGroupRequest();
    fgRequest.setOrder(order);
    fulfillmentGroup=addFulfillmentGroupToOrder(fgRequest,false);
    fulfillmentGroup=save(fulfillmentGroup);
    order.getFulfillmentGroups().add(fulfillmentGroup);
  }
  FulfillmentGroupItem fgi=createFulfillmentGroupItemFromOrderItem(item,fulfillmentGroup,fulfillmentGroupItemRequest.getQuantity());
  if (save) {
    fgi=fulfillmentGroupItemDao.save(fgi);
  }
  fulfillmentGroup.addFulfillmentGroupItem(fgi);
  if (save) {
    order=orderService.save(order,priceOrder);
  }
  return fulfillmentGroup;
}

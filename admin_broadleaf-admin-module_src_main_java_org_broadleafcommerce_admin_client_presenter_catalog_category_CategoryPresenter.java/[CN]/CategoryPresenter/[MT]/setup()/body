{
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("categoryTreeDS",new CategoryTreeDataSourceFactory(),null,new Object[]{rootId,rootName},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource top){
      setupDisplayItems(top);
      ((TreeGridDataSource)top).setupGridFields(new String[]{},new Boolean[]{},"250","100");
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("categorySearchDS",new CategorySearchDataSourceFactory(),new OperationTypes(OperationType.ENTITY,OperationType.ENTITY,OperationType.JOINSTRUCTURE,OperationType.ENTITY,OperationType.ENTITY),new Object[]{},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      ListGridDataSource categorySearchDataSource=(ListGridDataSource)result;
      categorySearchDataSource.resetPermanentFieldVisibility("name","urlKey","activeStartDate","activeEndDate");
      EntitySearchDialog categorySearchView=new EntitySearchDialog(categorySearchDataSource);
      library.put("categorySearchView",categorySearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("allChildCategoriesDS",new CategoryListDataSourceFactory(),new OperationTypes(OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.ENTITY),new Object[]{},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      allChildCategoriesPresenter=new AllChildCategoriesPresenter(CategoryPresenter.this,getDisplay().getAllCategoriesDisplay(),(EntitySearchDialog)library.get("categorySearchView"),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("categorySearchTitle"));
      allChildCategoriesPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","urlKey"},new Boolean[]{false,false});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("orphanedCategoriesDS",new OrphanedCategoryListDataSourceFactory(),null,new Object[]{rootId},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      getDisplay().getOrphanedCategoryGrid().setDataSource(result);
      ((ListGridDataSource)result).setAssociatedGrid(getDisplay().getOrphanedCategoryGrid());
      ((ListGridDataSource)result).setupGridFields(new String[]{"name","urlKey"});
      Criteria myCriteria=new Criteria();
      myCriteria.addCriteria(OrphanedCategoryListDataSourceFactory.foreignKeyName,"0");
      getDisplay().getOrphanedCategoryGrid().fetchData(myCriteria);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("productSearchDS",new ProductListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      ListGridDataSource productSearchDataSource=(ListGridDataSource)result;
      productSearchDataSource.resetPermanentFieldVisibility("defaultSku.name","defaultSku.description","model","manufacturer","defaultSku.activeStartDate","defaultSku.activeEndDate");
      EntitySearchDialog productSearchView=new EntitySearchDialog(productSearchDataSource);
      library.put("productSearchView",productSearchView);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("featuredProductsDS",new FeaturedProductListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      featuredPresenter=new EditableJoinStructurePresenter(getDisplay().getFeaturedDisplay(),(EntitySearchDialog)library.get("productSearchView"),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("productSearchTitle"),BLCMain.getMessageManager().getString("setPromotionMessageTitle"),"promotionMessage");
      featuredPresenter.setDataSource((ListGridDataSource)result,new String[]{"defaultSku.name","promotionMessage"},new Boolean[]{false,true});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("allChildProductsDS",new AllProductsDataSourceFactory(),new OperationTypes(OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.JOINSTRUCTURE,OperationType.ENTITY),new Object[]{},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      childProductsPresenter=new SimpleSearchJoinStructurePresenter(getDisplay().getAllProductsDisplay(),(EntitySearchDialog)library.get("productSearchView"),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("productSearchPrompt"));
      childProductsPresenter.setDataSource((ListGridDataSource)result,new String[]{"defaultSku.name","model","manufacturer"},new Boolean[]{false,false,false});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("mediaMapDS",new MediaMapDataSourceFactory(this),null,new Object[]{getMediaMapKeys()},new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      Map<String,Object> initialValues=new HashMap<String,Object>(2);
      initialValues.put("name",BLCMain.getMessageManager().getString("mediaNameDefault"));
      initialValues.put("label",BLCMain.getMessageManager().getString("mediaLabelDefault"));
      mediaPresenter=new MapStructurePresenter(getDisplay().getMediaDisplay(),getMediaEntityView(),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("newMediaTitle"),initialValues);
      mediaPresenter.setDataSource((ListGridDataSource)result,new String[]{"key","url","title","altText","tags"},new Boolean[]{true,true,true,true,true});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("staticAssetTreeDS",new StaticAssetsTileGridDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource dataSource){
      TileGridDataSource staticAssetTreeDS=(TileGridDataSource)dataSource;
      final AssetSearchDialog dialog=new AssetSearchDialog(staticAssetTreeDS);
      HashMap<String,Object> initialValues=new HashMap<String,Object>(10);
      initialValues.put("operation","add");
      initialValues.put("customCriteria","assetListUi");
      initialValues.put("ceilingEntityFullyQualifiedClassname",CeilingEntities.STATICASSETS);
      initialValues.put("_type",CeilingEntities.STATICASSETS);
      initialValues.put("csrfToken",BLCMain.csrfToken);
      dialog.setInitialValues(initialValues);
      getPresenterSequenceSetupManager().getDataSource("mediaMapDS").getFormItemCallbackHandlerManager().addFormItemCallback("url",new FormItemCallback(){
        @Override public void execute(        final FormItem formItem){
          dialog.search("Asset Search",new TileGridItemSelectedHandler(){
            @Override public void onSearchItemSelected(            TileGridItemSelected event){
              String staticAssetFullUrl=BLCMain.assetServerUrlPrefix + event.getRecord().getAttribute("fullUrl");
              formItem.setValue(staticAssetFullUrl);
              getMediaEntityView().updateMedia(staticAssetFullUrl);
            }
          }
);
        }
      }
);
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("categoryCrossSaleProductsDS",new CategoryCrossSaleProductListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      crossSalePresenter=new EditableJoinStructurePresenter(getDisplay().getCrossSaleDisplay(),(EntitySearchDialog)library.get("productSearchView"),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("productSearchTitle"),BLCMain.getMessageManager().getString("setPromotionMessageTitle"),"promotionMessage");
      crossSalePresenter.setDataSource((ListGridDataSource)result,new String[]{"name","promotionMessage"},new Boolean[]{false,true});
    }
  }
));
  getPresenterSequenceSetupManager().addOrReplaceItem(new PresenterSetupItem("categoryUpSaleProductsDS",new CategoryUpSaleProductListDataSourceFactory(),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource result){
      upSalePresenter=new EditableJoinStructurePresenter(getDisplay().getUpSaleDisplay(),(EntitySearchDialog)library.get("productSearchView"),new String[]{EntityImplementations.CATEGORY},BLCMain.getMessageManager().getString("productSearchTitle"),BLCMain.getMessageManager().getString("setPromotionMessageTitle"),"promotionMessage");
      upSalePresenter.setDataSource((ListGridDataSource)result,new String[]{"name","promotionMessage"},new Boolean[]{false,true});
    }
  }
));
}

{
  List<DiscreteOrderItem> itemsToRemove=new ArrayList<DiscreteOrderItem>();
  Map<String,OrderItem> gatheredItem=new HashMap<String,OrderItem>();
  for (  OrderItem orderItem : order.getOrderItems()) {
    if (orderItem instanceof BundleOrderItem) {
      for (      DiscreteOrderItem discreteOrderItem : ((BundleOrderItem)orderItem).getDiscreteOrderItems()) {
        gatherOrderLinkedDiscreteOrderItem(itemsToRemove,gatheredItem,discreteOrderItem,String.valueOf(orderItem.getId()));
      }
    }
 else {
      gatherOrderLinkedDiscreteOrderItem(itemsToRemove,gatheredItem,(DiscreteOrderItem)orderItem,null);
    }
  }
  for (  OrderItem orderItem : gatheredItem.values()) {
    orderItemService.saveOrderItem(orderItem);
  }
  for (  DiscreteOrderItem orderItem : itemsToRemove) {
    if (orderItem.getBundleOrderItem() == null) {
      try {
        orderService.removeItem(order.getId(),orderItem.getId(),false);
      }
 catch (      RemoveFromCartException e) {
        throw new PricingException("Could not remove item",e);
      }
    }
 else {
      BundleOrderItem bundleOrderItem=orderItem.getBundleOrderItem();
      fulfillmentGroupService.removeOrderItemFromFullfillmentGroups(order,orderItem);
      bundleOrderItem.getDiscreteOrderItems().remove(orderItem);
      orderItem.setBundleOrderItem(null);
      orderItemService.saveOrderItem(bundleOrderItem);
    }
  }
  return order;
}

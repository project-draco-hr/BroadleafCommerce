{
  BandedPriceFulfillmentOption bandedPriceFulfillmentOption=(BandedPriceFulfillmentOption)option;
  List<FulfillmentPriceBand> bands=bandedPriceFulfillmentOption.getBands();
  if (bands == null || bands.isEmpty()) {
    throw new IllegalStateException("There were no Fulfillment Price Bands configred for a BandedPriceFulfillmentOption with ID: " + bandedPriceFulfillmentOption.getId());
  }
  FulfillmentEstimationResponse res=new FulfillmentEstimationResponse();
  HashMap<BandedPriceFulfillmentOption,Money> shippingPrices=new HashMap<BandedPriceFulfillmentOption,Money>();
  res.setFulfillmentOptionPrices(shippingPrices);
  BigDecimal retailTotal=new BigDecimal(0D);
  for (  FulfillmentGroupItem fulfillmentGroupItem : fulfillmentGroup.getFulfillmentGroupItems()) {
    BigDecimal price=(fulfillmentGroupItem.getRetailPrice() != null) ? fulfillmentGroupItem.getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity())) : null;
    if (price == null) {
      price=fulfillmentGroupItem.getOrderItem().getRetailPrice().getAmount().multiply(BigDecimal.valueOf(fulfillmentGroupItem.getQuantity()));
    }
    retailTotal=retailTotal.add(price);
  }
  BigDecimal fulfillmentAmount=new BigDecimal(0D);
  for (  FulfillmentPriceBand band : bands) {
    BigDecimal bandRetailPriceMinimumAmount=band.getRetailPriceMinimumAmount();
    if (retailTotal.compareTo(bandRetailPriceMinimumAmount) >= 0) {
      FulfillmentBandResultAmountType resultAmountType=band.getResultAmountType();
      if (FulfillmentBandResultAmountType.RATE.equals(resultAmountType)) {
        if (band.getResultAmount().compareTo(fulfillmentAmount) <= 0) {
          fulfillmentAmount=band.getResultAmount();
        }
      }
 else       if (FulfillmentBandResultAmountType.PERCENTAGE.equals(resultAmountType)) {
        BigDecimal resultAmount=retailTotal.multiply(band.getResultAmount());
        if (resultAmount.compareTo(fulfillmentAmount) <= 0) {
          fulfillmentAmount=resultAmount;
        }
      }
 else {
        LOG.warn("Unknown FulfillmentBandResultAmountType: " + resultAmountType.getType() + " Should be RATE or PERCENTAGE. Ignoring.");
      }
    }
  }
  shippingPrices.put(bandedPriceFulfillmentOption,new Money(fulfillmentAmount));
  return res;
}

{
  try {
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Offer.class);
    Map<String,FieldMetadata> offerProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePerspective,dynamicEntityDao,entityClasses);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,Offer.class.getName(),offerProperties);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,Offer.class.getName());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Offer.class);
    Entity[] entities=helper.getRecords(offerProperties,records,null,null);
    PersistencePerspective offerCodePersistencePerspective=new PersistencePerspective(null,new String[]{},new ForeignKey[]{new ForeignKey("offer",EntityImplementations.OFFER,null)});
    Class<?>[] offerCodeEntityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(OfferCode.class);
    Map<String,FieldMetadata> offerCodeMergedProperties=helper.getSimpleMergedProperties(OfferCode.class.getName(),offerCodePersistencePerspective,dynamicEntityDao,offerCodeEntityClasses);
    for (    Entity record : entities) {
      CriteriaTransferObject offerCodeCto=new CriteriaTransferObject();
      FilterAndSortCriteria filterCriteria=offerCodeCto.get("offer");
      filterCriteria.setFilterValue(record.findProperty("id").getValue());
      BaseCtoConverter offerCodeCtoConverter=helper.getCtoConverter(offerCodePersistencePerspective,offerCodeCto,OfferCode.class.getName(),offerCodeMergedProperties);
      PersistentEntityCriteria offerCodeQueryCriteria=offerCodeCtoConverter.convert(offerCodeCto,OfferCode.class.getName());
      List<Serializable> offerCodes=dynamicEntityDao.query(offerCodeQueryCriteria,OfferCode.class);
      Entity[] offerCodeEntities=helper.getRecords(offerCodeMergedProperties,offerCodes,null,null);
      if (offerCodeEntities.length > 0) {
        Entity temp=new Entity();
        temp.setType(offerCodeEntities[0].getType());
        temp.setProperties(new Property[]{offerCodeEntities[0].findProperty("offerCode"),offerCodeEntities[0].findProperty("id")});
        record.mergeProperties("offerCode",temp);
      }
    }
    int totalRecords=helper.getTotalRecords(ceilingEntityFullyQualifiedClassname,cto,ctoConverter);
    DynamicResultSet response=new DynamicResultSet(null,entities,totalRecords);
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to retrieve inspection results for " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

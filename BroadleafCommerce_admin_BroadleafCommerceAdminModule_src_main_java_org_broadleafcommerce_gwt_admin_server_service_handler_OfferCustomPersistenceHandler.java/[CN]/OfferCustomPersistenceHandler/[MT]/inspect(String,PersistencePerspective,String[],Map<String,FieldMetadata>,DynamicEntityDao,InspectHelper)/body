{
  try {
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Offer.class);
    Map<String,FieldMetadata> mergedProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePerspective,dynamicEntityDao,entityClasses);
    allMergedProperties.put(MergedPropertyType.PRIMARY,mergedProperties);
    PersistencePerspective offerCodePersistencePerspective=new PersistencePerspective(null,new String[]{},new ForeignKey[]{new ForeignKey("offer",EntityImplementations.OFFER,null)});
    Class<?>[] offerCodeEntityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(OfferCode.class);
    Map<String,FieldMetadata> offerCodeMergedProperties=helper.getSimpleMergedProperties(OfferCode.class.getName(),offerCodePersistencePerspective,dynamicEntityDao,offerCodeEntityClasses);
    FieldMetadata metadata=offerCodeMergedProperties.get("offerCode");
    metadata.getPresentationAttributes().setHidden(true);
    mergedProperties.put("offerCode.offerCode",metadata);
    FieldMetadata metadata2=offerCodeMergedProperties.get("id");
    metadata2.getPresentationAttributes().setHidden(true);
    mergedProperties.put("offerCode.id",metadata2);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    DynamicResultSet results=new DynamicResultSet(mergedMetadata,null,null);
    return results;
  }
 catch (  Exception e) {
    LOG.error("Unable to retrieve inspection results for " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to retrieve inspection results for " + ceilingEntityFullyQualifiedClassname,e);
  }
}

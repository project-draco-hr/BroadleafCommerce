{
  OfferDataItemProvider dataProvider=new OfferDataItemProvider();
  offer=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))").get(0);
  CandidateItemOfferImpl candidate=new CandidateItemOfferImpl();
  Category category1=new CategoryImpl();
  category1.setName("test1");
  category1.setId(1L);
  Product product1=new ProductImpl();
  Sku sku1=new SkuImpl();
  sku1.setName("test1");
  sku1.setDiscountable(true);
  sku1.setRetailPrice(new Money(19.99D));
  product1.setDefaultSku(sku1);
  CategoryProductXref xref1=new CategoryProductXrefImpl();
  xref1.setProduct(product1);
  xref1.setCategory(category1);
  category1.getAllProductXrefs().add(xref1);
  Category category2=new CategoryImpl();
  category2.setName("test2");
  category2.setId(2L);
  Product product2=new ProductImpl();
  Sku sku2=new SkuImpl();
  sku2.setName("test2");
  sku2.setDiscountable(true);
  sku2.setRetailPrice(new Money(29.99D));
  product2.setDefaultSku(sku2);
  CategoryProductXref xref2=new CategoryProductXrefImpl();
  xref2.setProduct(product2);
  xref2.setCategory(category2);
  category2.getAllProductXrefs().add(xref2);
  DiscreteOrderItemImpl orderItem1=new DiscreteOrderItemImpl();
  orderItem1.setCategory(category1);
  orderItem1.setName("test1");
  orderItem1.setOrderItemType(OrderItemType.DISCRETE);
  orderItem1.setProduct(product1);
  orderItem1.setQuantity(2);
  orderItem1.setSku(sku1);
  orderItem1.setRetailPrice(new Money(19.99D));
  orderItem1.setPrice(new Money(19.99D));
  Order order=new OrderImpl();
  orderItem1.setOrder(order);
  promotableOrderItem=new PromotableOrderItemImpl(orderItem1,null,new PromotableItemFactoryImpl());
  List<PromotableOrderItem> items=new ArrayList<PromotableOrderItem>();
  items.add(promotableOrderItem);
  promotableCandidate=new PromotableCandidateItemOfferImpl(candidate);
  promotableCandidate.getCandidateTargets().addAll(items);
  promotableCandidate.setOffer(offer);
}

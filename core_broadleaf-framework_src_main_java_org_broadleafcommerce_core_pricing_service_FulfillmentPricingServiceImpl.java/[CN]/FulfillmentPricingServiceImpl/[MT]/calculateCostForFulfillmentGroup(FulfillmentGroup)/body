{
  if (fulfillmentGroup.getFulfillmentOption() == null) {
    fulfillmentGroup.setRetailShippingPrice(new Money(0D));
    fulfillmentGroup.setShippingPrice(new Money(0D));
    fulfillmentGroup.setSaleShippingPrice(new Money(0D));
    return fulfillmentGroup;
  }
  List<FulfillmentGroupFee> fulfillmentFees=new ArrayList<FulfillmentGroupFee>();
  for (  FulfillmentGroupItem item : fulfillmentGroup.getFulfillmentGroupItems()) {
    List<SkuFee> fees=null;
    if (item.getOrderItem() instanceof BundleOrderItem) {
      fees=((BundleOrderItem)item.getOrderItem()).getSku().getFees();
    }
 else     if (item.getOrderItem() instanceof DiscreteOrderItem) {
      fees=((DiscreteOrderItem)item.getOrderItem()).getSku().getFees();
    }
    if (fees != null) {
      for (      SkuFee fee : fees) {
        if (SkuFeeType.FULFILLMENT.equals(fee.getFeeType())) {
          FulfillmentGroupFee fulfillmentFee=fulfillmentGroupService.createFulfillmentGroupFee();
          fulfillmentFee.setName(fee.getName());
          fulfillmentFee.setTaxable(fee.getTaxable());
          fulfillmentFee.setAmount(fee.getAmount());
          fulfillmentFees.add(fulfillmentFee);
        }
      }
    }
  }
  if (fulfillmentFees.size() > 0) {
    fulfillmentGroup.setFulfillmentGroupFees(fulfillmentFees);
    fulfillmentGroup=fulfillmentGroupService.save(fulfillmentGroup);
  }
  for (  FulfillmentPricingProvider processor : providers) {
    if (processor.canCalculateCostForFulfillmentGroup(fulfillmentGroup,fulfillmentGroup.getFulfillmentOption())) {
      return processor.calculateCostForFulfillmentGroup(fulfillmentGroup);
    }
  }
  throw new ShippingPriceException("No valid processor was found to calculate the FulfillmentGroup cost with " + "FulfillmentOption id: " + fulfillmentGroup.getFulfillmentOption().getId() + " and name: "+ fulfillmentGroup.getFulfillmentOption().getName());
}

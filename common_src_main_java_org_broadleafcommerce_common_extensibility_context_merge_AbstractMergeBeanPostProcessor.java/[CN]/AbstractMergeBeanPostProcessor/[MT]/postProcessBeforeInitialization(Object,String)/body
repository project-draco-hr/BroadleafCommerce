{
  if (beanName.equals(targetRef)) {
    Object mergeCollection=applicationContext.getBean(collectionRef);
    if (bean instanceof ListFactoryBean || bean instanceof List) {
      try {
        List mergeList=(List)mergeCollection;
        List sourceList;
        if (bean instanceof ListFactoryBean) {
          Field field=ListFactoryBean.class.getDeclaredField("sourceList");
          field.setAccessible(true);
          sourceList=(List)field.get(bean);
        }
 else {
          sourceList=(List)bean;
        }
switch (placement) {
case APPEND:
          sourceList.addAll(mergeList);
        break;
case PREPEND:
      sourceList.addAll(0,mergeList);
    break;
case SPECIFIC:
  sourceList.addAll(position,mergeList);
break;
}
}
 catch (Exception e) {
throw new BeanCreationException(e.getMessage());
}
}
 else if (bean instanceof SetFactoryBean || bean instanceof Set) {
try {
Set mergeSet=(Set)mergeCollection;
Set sourceSet;
if (bean instanceof Set) {
Field field=SetFactoryBean.class.getDeclaredField("sourceSet");
field.setAccessible(true);
sourceSet=(Set)field.get(bean);
}
 else {
sourceSet=(Set)bean;
}
List tempList=new ArrayList(sourceSet);
switch (placement) {
case APPEND:
tempList.addAll(mergeSet);
break;
case PREPEND:
tempList.addAll(0,mergeSet);
break;
case SPECIFIC:
tempList.addAll(position,mergeSet);
break;
}
sourceSet.clear();
sourceSet.addAll(tempList);
}
 catch (Exception e) {
throw new BeanCreationException(e.getMessage());
}
}
 else if (bean instanceof MapFactoryBean || bean instanceof Map) {
try {
Map mergeMap=(Map)mergeCollection;
Map sourceMap;
if (bean instanceof MapFactoryBean) {
Field field=MapFactoryBean.class.getDeclaredField("sourceMap");
field.setAccessible(true);
sourceMap=(Map)field.get(bean);
}
 else {
sourceMap=(Map)bean;
}
LinkedHashMap tempMap=new LinkedHashMap();
switch (placement) {
case APPEND:
tempMap.putAll(sourceMap);
tempMap.putAll(mergeMap);
break;
case PREPEND:
tempMap.putAll(mergeMap);
tempMap.putAll(sourceMap);
break;
case SPECIFIC:
boolean added=false;
int j=0;
for (Object key : sourceMap.keySet()) {
if (j == position) {
tempMap.putAll(mergeMap);
added=true;
}
tempMap.put(key,sourceMap.get(key));
j++;
}
if (!added) {
tempMap.putAll(mergeMap);
}
break;
}
sourceMap.clear();
sourceMap.putAll(tempMap);
}
 catch (Exception e) {
throw new BeanCreationException(e.getMessage());
}
}
 else {
throw new IllegalArgumentException("Bean (" + beanName + ") is specified as a merge target, "+ "but is not"+ " of type ListFactoryBean, SetFactoryBean or MapFactoryBean");
}
}
return bean;
}

{
  FieldManager fieldManager=getFieldManager();
  try {
    for (    Entry<String,FieldMetadata> entry : mergedProperties.entrySet()) {
      String property=entry.getKey();
      BasicFieldMetadata metadata=(BasicFieldMetadata)entry.getValue();
      if (Class.forName(metadata.getInheritedFromType()).isAssignableFrom(entity.getClass()) || entity.getClass().isAssignableFrom(Class.forName(metadata.getInheritedFromType()))) {
        boolean proceed=true;
        if (property.contains(".")) {
          StringTokenizer tokens=new StringTokenizer(property,".");
          Object testObject=entity;
          while (tokens.hasMoreTokens()) {
            String token=tokens.nextToken();
            if (tokens.hasMoreTokens()) {
              try {
                testObject=fieldManager.getFieldValue(testObject,token);
              }
 catch (              FieldNotAvailableException e) {
                proceed=false;
                break;
              }
              if (testObject == null) {
                Property propertyItem=new Property();
                propertyItem.setName(property);
                if (props.contains(propertyItem)) {
                  proceed=false;
                  break;
                }
                propertyItem.setValue(null);
                props.add(propertyItem);
                proceed=false;
                break;
              }
            }
          }
        }
        if (!proceed) {
          continue;
        }
        boolean isFieldAccessible=true;
        Object value=null;
        try {
          value=fieldManager.getFieldValue(entity,property);
        }
 catch (        FieldNotAvailableException e) {
          isFieldAccessible=false;
        }
        checkField: {
          if (isFieldAccessible) {
            Property propertyItem=new Property();
            propertyItem.setName(property);
            if (props.contains(propertyItem)) {
              continue;
            }
            props.add(propertyItem);
            String displayVal=null;
            boolean handled=false;
            for (            FieldPersistenceProvider fieldPersistenceProvider : fieldPersistenceProviders) {
              FieldProviderResponse response=fieldPersistenceProvider.extractValue(new ExtractValueRequest(props,fieldManager,metadata,value,displayVal,persistenceManager,this,entity),propertyItem);
              if (FieldProviderResponse.NOT_HANDLED != response) {
                handled=true;
              }
              if (FieldProviderResponse.HANDLED_BREAK == response) {
                break;
              }
            }
            if (!handled) {
              defaultFieldPersistenceProvider.extractValue(new ExtractValueRequest(props,fieldManager,metadata,value,displayVal,persistenceManager,this,entity),propertyItem);
            }
            break checkField;
          }
          try {
            String strVal=null;
            Method method;
            try {
              String temp="get" + property.substring(0,1).toUpperCase() + property.substring(1,property.length());
              method=entity.getClass().getMethod(temp,new Class[]{});
            }
 catch (            NoSuchMethodException e) {
              method=entity.getClass().getMethod(property,new Class[]{});
            }
            value=method.invoke(entity,new String[]{});
            Property propertyItem=new Property();
            propertyItem.setName(property);
            if (props.contains(propertyItem)) {
              continue;
            }
            props.add(propertyItem);
            if (value == null) {
              strVal=null;
            }
 else {
              if (Date.class.isAssignableFrom(value.getClass())) {
                strVal=dateFormat.format((Date)value);
              }
 else               if (Timestamp.class.isAssignableFrom(value.getClass())) {
                strVal=dateFormat.format(new Date(((Timestamp)value).getTime()));
              }
 else               if (Calendar.class.isAssignableFrom(value.getClass())) {
                strVal=dateFormat.format(((Calendar)value).getTime());
              }
 else               if (Double.class.isAssignableFrom(value.getClass())) {
                strVal=decimalFormat.format(value);
              }
 else               if (BigDecimal.class.isAssignableFrom(value.getClass())) {
                strVal=decimalFormat.format(((BigDecimal)value).doubleValue());
              }
 else {
                strVal=value.toString();
              }
            }
            propertyItem.setValue(strVal);
          }
 catch (          NoSuchMethodException e) {
            LOG.debug("Unable to find a specified property in the entity: " + property);
          }
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    throw new PersistenceException(e);
  }
catch (  IllegalAccessException e) {
    throw new PersistenceException(e);
  }
catch (  InvocationTargetException e) {
    throw new PersistenceException(e);
  }
}

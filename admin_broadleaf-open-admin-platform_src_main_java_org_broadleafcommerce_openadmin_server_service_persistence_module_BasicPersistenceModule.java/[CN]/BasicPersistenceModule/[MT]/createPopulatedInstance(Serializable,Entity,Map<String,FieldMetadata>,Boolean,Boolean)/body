{
  final Map<String,FieldMetadata> mergedProperties=filterOutCollectionMetadata(unfilteredProperties);
  FieldManager fieldManager=getFieldManager();
  boolean handled=false;
  for (  FieldPersistenceProvider fieldPersistenceProvider : fieldPersistenceProviders) {
    FieldProviderResponse response=fieldPersistenceProvider.filterProperties(new AddFilterPropertiesRequest(entity),unfilteredProperties);
    if (FieldProviderResponse.NOT_HANDLED != response) {
      handled=true;
    }
    if (FieldProviderResponse.HANDLED_BREAK == response) {
      break;
    }
  }
  if (!handled) {
    defaultFieldPersistenceProvider.filterProperties(new AddFilterPropertiesRequest(entity),unfilteredProperties);
  }
  Property[] sortedProperties=entity.getProperties();
  Arrays.sort(sortedProperties,new Comparator<Property>(){
    @Override public int compare(    Property o1,    Property o2){
      BasicFieldMetadata mo1=(BasicFieldMetadata)mergedProperties.get(o1.getName());
      BasicFieldMetadata mo2=(BasicFieldMetadata)mergedProperties.get(o2.getName());
      boolean isLate1=mo1 != null && mo1.getFieldType() != null && mo1.getName() != null && (SupportedFieldType.RULE_SIMPLE == mo1.getFieldType() || SupportedFieldType.RULE_WITH_QUANTITY == mo1.getFieldType() || SupportedFieldType.MEDIA == mo1.getFieldType() || o1.getName().contains(FieldManager.MAPFIELDSEPARATOR));
      boolean isLate2=mo2 != null && mo2.getFieldType() != null && mo2.getName() != null && (SupportedFieldType.RULE_SIMPLE == mo2.getFieldType() || SupportedFieldType.RULE_WITH_QUANTITY == mo2.getFieldType() || SupportedFieldType.MEDIA == mo2.getFieldType() || o2.getName().contains(FieldManager.MAPFIELDSEPARATOR));
      if (isLate1 && !isLate2) {
        return 1;
      }
 else       if (!isLate1 && isLate2) {
        return -1;
      }
      return 0;
    }
  }
);
  Session session=getPersistenceManager().getDynamicEntityDao().getStandardEntityManager().unwrap(Session.class);
  FlushMode originalFlushMode=session.getFlushMode();
  try {
    session.setFlushMode(FlushMode.MANUAL);
    ParentEntityPersistenceException entityPersistenceException=null;
    for (    Property property : sortedProperties) {
      BasicFieldMetadata metadata=(BasicFieldMetadata)mergedProperties.get(property.getName());
      Class<?> returnType;
      if (!property.getName().contains(FieldManager.MAPFIELDSEPARATOR) && !property.getName().startsWith("__")) {
        Field field=fieldManager.getField(instance.getClass(),property.getName());
        if (field == null) {
          LOG.debug("Unable to find a bean property for the reported property: " + property.getName() + ". Ignoring property.");
          continue;
        }
        returnType=field.getType();
      }
 else {
        if (metadata == null) {
          LOG.debug("Unable to find a metadata property for the reported property: " + property.getName() + ". Ignoring property.");
          continue;
        }
        returnType=getMapFieldType(instance,fieldManager,property);
        if (returnType == null) {
          returnType=getBasicBroadleafType(metadata.getFieldType());
        }
      }
      if (returnType == null) {
        throw new IllegalAccessException("Unable to determine the value type for the property (" + property.getName() + ")");
      }
      String value=property.getValue();
      if (metadata != null) {
        Boolean mutable=metadata.getMutable();
        Boolean readOnly=metadata.getReadOnly();
        if (metadata.getFieldType().equals(SupportedFieldType.BOOLEAN)) {
          if (value == null) {
            value="false";
          }
        }
        if ((mutable == null || mutable) && (readOnly == null || !readOnly)) {
          if (value != null) {
            handled=false;
            PopulateValueRequest request=new PopulateValueRequest(setId,fieldManager,property,metadata,returnType,value,persistenceManager,this);
            boolean attemptToPopulate=true;
            for (            PopulateValueRequestValidator validator : populateValidators) {
              PropertyValidationResult validationResult=validator.validate(request,instance);
              if (!validationResult.isValid()) {
                entity.addValidationError(property.getName(),validationResult.getErrorMessage());
                attemptToPopulate=false;
              }
            }
            if (attemptToPopulate) {
              try {
                for (                FieldPersistenceProvider fieldPersistenceProvider : fieldPersistenceProviders) {
                  FieldProviderResponse response=fieldPersistenceProvider.populateValue(request,instance);
                  if (FieldProviderResponse.NOT_HANDLED != response) {
                    handled=true;
                  }
                  if (FieldProviderResponse.HANDLED_BREAK == response) {
                    break;
                  }
                }
                if (!handled) {
                  defaultFieldPersistenceProvider.populateValue(new PopulateValueRequest(setId,fieldManager,property,metadata,returnType,value,persistenceManager,this),instance);
                }
              }
 catch (              PersistenceException e) {
                if (e instanceof ParentEntityPersistenceException) {
                  entityPersistenceException=(ParentEntityPersistenceException)e;
                  cleanupFailedPersistenceAttempt(instance);
                  break;
                }
                throw e;
              }
            }
          }
 else {
            try {
              if (fieldManager.getFieldValue(instance,property.getName()) != null && (metadata.getFieldType() != SupportedFieldType.ID || setId) && metadata.getFieldType() != SupportedFieldType.PASSWORD) {
                if (fieldManager.getFieldValue(instance,property.getName()) != null) {
                  property.setIsDirty(true);
                }
                fieldManager.setFieldValue(instance,property.getName(),null);
              }
            }
 catch (            FieldNotAvailableException e) {
              throw new IllegalArgumentException(e);
            }
          }
        }
      }
    }
    validate(entity,instance,mergedProperties,validateUnsubmittedProperties);
    if (entity.isValidationFailure()) {
      if (persistenceManager.getDynamicEntityDao().getStandardEntityManager().contains(instance)) {
        persistenceManager.getDynamicEntityDao().refresh(instance);
      }
      List<Serializable> entityList=new ArrayList<Serializable>(1);
      entityList.add(instance);
      Entity invalid=getRecords(mergedProperties,entityList,null,null)[0];
      invalid.setPropertyValidationErrors(entity.getPropertyValidationErrors());
      invalid.overridePropertyValues(entity);
      StringBuilder sb=new StringBuilder();
      for (      Map.Entry<String,List<String>> entry : invalid.getPropertyValidationErrors().entrySet()) {
        Iterator<String> itr=entry.getValue().iterator();
        while (itr.hasNext()) {
          sb.append(entry.getKey());
          sb.append(" : ");
          sb.append(itr.next());
          if (itr.hasNext()) {
            sb.append(" / ");
          }
        }
      }
      throw new ValidationException(invalid,"The entity has failed validation - " + sb.toString());
    }
 else     if (entityPersistenceException != null) {
      throw ExceptionHelper.refineException(entityPersistenceException.getCause());
    }
 else {
      fieldManager.persistMiddleEntities();
    }
  }
 catch (  IllegalAccessException e) {
    throw new PersistenceException(e);
  }
catch (  InstantiationException e) {
    throw new PersistenceException(e);
  }
 finally {
    session.setFlushMode(originalFlushMode);
  }
  return instance;
}

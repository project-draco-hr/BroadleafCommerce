{
  EntityResult entityResult=new EntityResult();
  Entity entity=persistencePackage.getEntity();
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
  if (foreignKey != null && !foreignKey.getMutable()) {
    throw new SecurityServiceException("Entity not mutable");
  }
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(persistencePackage.getCeilingEntityFullyQualifiedClassname());
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(persistencePackage.getCeilingEntityFullyQualifiedClassname(),entities,foreignKey,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    if (primaryKey == null) {
      primaryKey=getPrimaryKey(entity,mergedProperties);
    }
    Serializable instance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(entity.getType()[0]),primaryKey);
    Assert.isTrue(instance != null,"Entity not found");
    if (!entity.isValidationFailure()) {
      if (foreignKey != null && foreignKey.getSortField() != null && entity.findProperty(foreignKey.getSortField()) != null && entity.findProperty(foreignKey.getSortField()).getValue() != null) {
        Integer requestedSequence=Integer.valueOf(entity.findProperty(foreignKey.getSortField()).getValue());
        Integer previousSequence=new BigDecimal(String.valueOf(getFieldManager().getFieldValue(instance,foreignKey.getSortField()))).intValue();
        final String idPropertyName=getIdPropertyName(mergedProperties);
        final Object pKey=primaryKey;
        instance=createPopulatedInstance(instance,entity,mergedProperties,false,persistencePackage.isValidateUnsubmittedProperties());
        if (!previousSequence.equals(requestedSequence)) {
          Serializable manyToField=(Serializable)getFieldManager().getFieldValue(instance,foreignKey.getManyToField());
          List<Serializable> records=(List<Serializable>)getFieldManager().getFieldValue(manyToField,foreignKey.getOriginatingField());
          Serializable myRecord=(Serializable)CollectionUtils.find(records,new TypedPredicate<Serializable>(){
            @Override public boolean eval(            Serializable record){
              try {
                return (pKey.equals(getFieldManager().getFieldValue(record,idPropertyName)));
              }
 catch (              IllegalAccessException e) {
                return false;
              }
catch (              FieldNotAvailableException e) {
                return false;
              }
            }
          }
);
          records.remove(myRecord);
          if (CollectionUtils.isEmpty(records)) {
            records.add(myRecord);
          }
 else {
            records.add(requestedSequence - 1,myRecord);
          }
          int index=1;
          Class<?> type=getFieldManager().getField(myRecord.getClass(),foreignKey.getSortField()).getType();
          boolean isBigDecimal=BigDecimal.class.isAssignableFrom(type);
          for (          Serializable record : records) {
            getFieldManager().setFieldValue(record,foreignKey.getSortField(),isBigDecimal ? new BigDecimal(index) : Long.valueOf(index));
            index++;
          }
        }
      }
 else {
        instance=createPopulatedInstance(instance,entity,mergedProperties,false,persistencePackage.isValidateUnsubmittedProperties());
      }
      instance=persistenceManager.getDynamicEntityDao().merge(instance);
      if (includeRealEntity) {
        entityResult.setEntityBackingObject(instance);
      }
      List<Serializable> entityList=new ArrayList<Serializable>(1);
      entityList.add(instance);
      entity=getRecords(mergedProperties,entityList,null,null)[0];
      entityResult.setEntity(entity);
      return entityResult;
    }
 else {
      entityResult.setEntity(entity);
      return entityResult;
    }
  }
 catch (  Exception e) {
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

{
  EntityResult entityResult=new EntityResult();
  Entity entity=persistencePackage.getEntity();
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
  if (foreignKey != null && !foreignKey.getMutable()) {
    throw new SecurityServiceException("Entity not mutable");
  }
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(persistencePackage.getCeilingEntityFullyQualifiedClassname());
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(persistencePackage.getCeilingEntityFullyQualifiedClassname(),entities,foreignKey,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    if (primaryKey == null) {
      primaryKey=getPrimaryKey(entity,mergedProperties);
    }
    Serializable instance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(entity.getType()[0]),primaryKey);
    Assert.isTrue(instance != null,"Entity not found");
    if (!entity.isValidationFailure()) {
      if (foreignKey != null && foreignKey.getSortField() != null && entity.findProperty(foreignKey.getSortField()) != null && entity.findProperty(foreignKey.getSortField()).getValue() != null) {
        ExtensionResultHolder<Serializable> result=new ExtensionResultHolder<Serializable>();
        extensionManager.getProxy().rebalanceForUpdate(this,persistencePackage,instance,mergedProperties,primaryKey,result);
        instance=result.getResult();
      }
 else {
        instance=createPopulatedInstance(instance,entity,mergedProperties,false,persistencePackage.isValidateUnsubmittedProperties());
      }
      instance=persistenceManager.getDynamicEntityDao().merge(instance);
      if (includeRealEntity) {
        entityResult.setEntityBackingObject(instance);
      }
      List<Serializable> entityList=new ArrayList<Serializable>(1);
      entityList.add(instance);
      entity=getRecords(mergedProperties,entityList,null,null)[0];
      entityResult.setEntity(entity);
      return entityResult;
    }
 else {
      entityResult.setEntity(entity);
      return entityResult;
    }
  }
 catch (  Exception e) {
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

{
  PersistentEntityCriteria countCriteria=ctoConverter.convert(new CriteriaTransferObjectCountWrapper(cto).wrap(),persistencePackage.getCeilingEntityFullyQualifiedClassname());
  Class<?>[] entities=persistenceManager.getDynamicEntityDao().getAllPolymorphicEntitiesFromCeiling(Class.forName(persistencePackage.getCeilingEntityFullyQualifiedClassname()));
  boolean isArchivable=false;
  for (  Class<?> entity : entities) {
    if (Status.class.isAssignableFrom(entity)) {
      isArchivable=true;
      break;
    }
  }
  if (isArchivable && !persistencePackage.getPersistencePerspective().getShowArchivedFields()) {
    SimpleFilterCriterionProvider criterionProvider=new SimpleFilterCriterionProvider(SimpleFilterCriterionProvider.FilterDataStrategy.NONE,0){
      @Override public Criterion getCriterion(      String targetPropertyName,      Object[] filterObjectValues,      Object[] directValues){
        return Restrictions.or(Restrictions.eq(targetPropertyName,'N'),Restrictions.isNull(targetPropertyName));
      }
    }
;
    FilterCriterion filterCriterion=new FilterCriterion(AssociationPath.ROOT,"archiveStatus.archived",criterionProvider);
    ((NestedPropertyCriteria)countCriteria).add(filterCriterion);
  }
  return persistenceManager.getDynamicEntityDao().count(countCriteria,Class.forName(StringUtils.isEmpty(persistencePackage.getFetchTypeFullyQualifiedClassname()) ? persistencePackage.getCeilingEntityFullyQualifiedClassname() : persistencePackage.getFetchTypeFullyQualifiedClassname()));
}

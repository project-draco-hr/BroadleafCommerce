{
  Entity[] payload;
  int totalRecords;
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
  try {
    if (foreignKey != null && foreignKey.getSortField() != null) {
      FilterAndSortCriteria sortCriteria=cto.get(foreignKey.getSortField());
      sortCriteria.setSortAscending(foreignKey.getSortAscending());
    }
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(persistencePackage,cto);
    List<FilterMapping> filterMappings=getFilterMappings(persistencePerspective,cto,persistencePackage.getFetchTypeFullyQualifiedClassname(),mergedProperties);
    if (CollectionUtils.isNotEmpty(cto.getAdditionalFilterMappings())) {
      filterMappings.addAll(cto.getAdditionalFilterMappings());
    }
    List<Serializable> records=getPersistentRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    payload=getRecords(mergedProperties,records,null,null);
    totalRecords=getTotalRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings);
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to fetch results for " + ceilingEntityFullyQualifiedClassname,e);
  }
  return new DynamicResultSet(null,payload,totalRecords);
}

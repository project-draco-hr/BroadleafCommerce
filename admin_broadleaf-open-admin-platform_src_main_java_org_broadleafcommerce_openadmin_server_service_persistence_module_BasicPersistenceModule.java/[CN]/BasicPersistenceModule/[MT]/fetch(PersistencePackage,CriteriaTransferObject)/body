{
  Entity[] payload;
  int totalRecords;
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  if (StringUtils.isEmpty(persistencePackage.getFetchTypeFullyQualifiedClassname())) {
    persistencePackage.setFetchTypeFullyQualifiedClassname(ceilingEntityFullyQualifiedClassname);
  }
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  try {
    Class<?>[] entities=persistenceManager.getDynamicEntityDao().getAllPolymorphicEntitiesFromCeiling(Class.forName(ceilingEntityFullyQualifiedClassname));
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    List<FilterMapping> filterMappings=getFilterMappings(persistencePerspective,cto,persistencePackage.getFetchTypeFullyQualifiedClassname(),mergedProperties);
    if (CollectionUtils.isNotEmpty(cto.getAdditionalFilterMappings())) {
      filterMappings.addAll(cto.getAdditionalFilterMappings());
    }
    boolean isArchivable=false;
    for (    Class<?> entity : entities) {
      if (Status.class.isAssignableFrom(entity)) {
        isArchivable=true;
        break;
      }
    }
    if (isArchivable && !persistencePerspective.getShowArchivedFields()) {
      FilterMapping filterMapping=new FilterMapping().withFieldPath(new FieldPath().withTargetProperty("archiveStatus.archived")).withDirectFilterValues(new EmptyFilterValues()).withRestriction(new Restriction().withPredicateProvider(new PredicateProvider<Character,Character>(){
        @Override public Predicate buildPredicate(        CriteriaBuilder builder,        FieldPathBuilder fieldPathBuilder,        From root,        String ceilingEntity,        String fullPropertyName,        Path<Character> explicitPath,        List<Character> directValues){
          return builder.or(builder.equal(explicitPath,'N'),builder.isNull(explicitPath));
        }
      }
));
      filterMappings.add(filterMapping);
    }
    List<Serializable> records=getPersistentRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    payload=getRecords(mergedProperties,records,null,null);
    totalRecords=getTotalRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings);
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to fetch results for " + ceilingEntityFullyQualifiedClassname,e);
  }
  return new DynamicResultSet(null,payload,totalRecords);
}

{
  String specialPath=embeddedCollectionPath.getTargetProperty();
  String[] pieces=specialPath.split("\\.");
  if (pieces.length != 3) {
    throw new CriteriaConversionException(String.format("Expected to find a target property of format [embedded field].[collection field].[property] for the embedded collection path (%s)",specialPath),embeddedCollectionPath);
  }
  String expression=specialPath.substring(0,specialPath.lastIndexOf("."));
  TypedQueryBuilder builder;
  try {
    builder=new TypedQueryBuilder(Class.forName(collectionClass),"specialEntity").addJoin(new TQJoin("specialEntity." + expression,"embeddedCollection"));
  }
 catch (  Exception e) {
    throw ExceptionHelper.refineException(e);
  }
  for (  TQRestriction restriction : buildSpecialRestrictions(expression,filterMappings)) {
    builder=builder.addRestriction(restriction);
  }
  for (  TQRestriction restriction : buildStandardRestrictions(embeddedCollectionPath,filterMappings)) {
    builder=builder.addRestriction(restriction);
  }
  for (  FilterMapping mapping : filterMappings) {
    if (mapping.getSortDirection() != null) {
      String mappingProperty=mapping.getFieldPath() == null ? null : mapping.getFieldPath().getTargetProperty();
      if (StringUtils.isEmpty(mappingProperty)) {
        mappingProperty=mapping.getFullPropertyName();
      }
      builder=builder.addOrder(new TQOrder("specialEntity." + mappingProperty,SortDirection.ASCENDING == mapping.getSortDirection()));
    }
  }
  return builder;
}

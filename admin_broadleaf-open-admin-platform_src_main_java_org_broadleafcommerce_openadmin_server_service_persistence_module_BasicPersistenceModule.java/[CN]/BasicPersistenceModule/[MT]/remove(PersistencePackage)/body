{
  Entity entity=persistencePackage.getEntity();
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
  if (foreignKey != null && !foreignKey.getMutable()) {
    throw new SecurityServiceException("Entity not mutable");
  }
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(persistencePackage.getCeilingEntityFullyQualifiedClassname());
    Map<String,FieldMetadata> mergedUnfilteredProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(persistencePackage.getCeilingEntityFullyQualifiedClassname(),entities,foreignKey,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    Map<String,FieldMetadata> mergedProperties=filterOutCollectionMetadata(mergedUnfilteredProperties);
    Object primaryKey=getPrimaryKey(entity,mergedProperties);
    Serializable instance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(entity.getType()[0]),primaryKey);
    Assert.isTrue(instance != null,"Entity not found");
switch (persistencePerspective.getOperationTypes().getRemoveType()) {
case NONDESTRUCTIVEREMOVE:
      FieldManager fieldManager=getFieldManager();
    FieldMetadata md=mergedUnfilteredProperties.get(foreignKey.getManyToField());
  Object foreignKeyValue=entity.getPMap().get(foreignKey.getManyToField()).getValue();
try {
  foreignKeyValue=Long.valueOf((String)foreignKeyValue);
}
 catch (NumberFormatException e) {
  LOG.warn("Foreign primary key is not of type Long, assuming String for remove lookup");
}
Serializable foreignInstance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(foreignKey.getForeignKeyClass()),foreignKeyValue);
Collection collection=(Collection)fieldManager.getFieldValue(foreignInstance,foreignKey.getOriginatingField());
collection.remove(instance);
break;
case BASIC:
persistenceManager.getDynamicEntityDao().remove(instance);
break;
}
}
 catch (Exception e) {
throw new ServiceException("Problem removing entity : " + e.getMessage(),e);
}
}

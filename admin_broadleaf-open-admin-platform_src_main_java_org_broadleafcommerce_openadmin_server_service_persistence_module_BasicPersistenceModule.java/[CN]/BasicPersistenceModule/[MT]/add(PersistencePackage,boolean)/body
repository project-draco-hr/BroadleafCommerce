{
  EntityResult entityResult=new EntityResult();
  Entity entity=persistencePackage.getEntity();
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
  if (foreignKey != null && !foreignKey.getMutable()) {
    throw new SecurityServiceException("Entity not mutable");
  }
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(persistencePackage.getCeilingEntityFullyQualifiedClassname());
    Map<String,FieldMetadata> mergedUnfilteredProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(persistencePackage.getCeilingEntityFullyQualifiedClassname(),entities,foreignKey,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    Map<String,FieldMetadata> mergedProperties=filterOutCollectionMetadata(mergedUnfilteredProperties);
    String idProperty=null;
    for (    String property : mergedProperties.keySet()) {
      if (((BasicFieldMetadata)mergedProperties.get(property)).getFieldType() == SupportedFieldType.ID) {
        idProperty=property;
        break;
      }
    }
    if (idProperty == null) {
      throw new RuntimeException("Could not find a primary key property in the passed entity with type: " + entity.getType()[0]);
    }
    Object primaryKey=null;
    try {
      primaryKey=getPrimaryKey(entity,mergedProperties);
    }
 catch (    Exception e) {
      LOG.error("Error getting primary key",e);
    }
    if (primaryKey == null) {
      Serializable instance=(Serializable)Class.forName(entity.getType()[0]).newInstance();
      instance=createPopulatedInstance(instance,entity,mergedProperties,false);
      instance=persistenceManager.getDynamicEntityDao().merge(instance);
      if (includeRealEntityObject) {
        entityResult.setEntityBackingObject(instance);
      }
      List<Serializable> entityList=new ArrayList<Serializable>(1);
      entityList.add(instance);
      entity=getRecords(mergedProperties,entityList,null,null)[0];
      entityResult.setEntity(entity);
      return entityResult;
    }
 else {
      return update(persistencePackage,primaryKey,includeRealEntityObject);
    }
  }
 catch (  ServiceException e) {
    LOG.error("Problem adding new entity",e);
    throw e;
  }
catch (  Exception e) {
    LOG.error("Problem adding new entity",e);
    throw new ServiceException("Problem adding new entity : " + e.getMessage(),e);
  }
}

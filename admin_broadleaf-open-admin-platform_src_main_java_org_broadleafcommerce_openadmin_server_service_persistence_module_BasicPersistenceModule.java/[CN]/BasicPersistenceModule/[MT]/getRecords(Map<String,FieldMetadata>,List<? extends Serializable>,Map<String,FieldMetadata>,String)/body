{
  Map<String,FieldMetadata> primaryMergedProperties=filterOutCollectionMetadata(primaryUnfilteredMergedProperties);
  Map<String,FieldMetadata> alternateMergedProperties=filterOutCollectionMetadata(alternateUnfilteredMergedProperties);
  Entity[] entities=new Entity[records.size()];
  int j=0;
  for (  Serializable recordEntity : records) {
    Serializable entity;
    if (pathToTargetObject != null) {
      try {
        entity=(Serializable)getFieldManager().getFieldValue(recordEntity,pathToTargetObject);
      }
 catch (      FieldNotAvailableException e) {
        throw new IllegalArgumentException(e);
      }
    }
 else {
      entity=recordEntity;
    }
    Entity entityItem=new Entity();
    entityItem.setType(new String[]{entity.getClass().getName()});
    entities[j]=entityItem;
    List<Property> props=new ArrayList<Property>(primaryMergedProperties.size());
    extractPropertiesFromPersistentEntity(primaryMergedProperties,entity,props);
    if (alternateMergedProperties != null) {
      extractPropertiesFromPersistentEntity(alternateMergedProperties,recordEntity,props);
    }
    try {
      Property p=new Property();
      p.setName(MAIN_ENTITY_NAME_PROPERTY);
      String mainEntityName=(String)MethodUtils.invokeMethod(entity,"getMainEntityName");
      p.setValue(mainEntityName);
      props.add(p);
    }
 catch (    Exception e) {
      LOG.debug(String.format("Could not execute the getMainEntityName() method for [%s]",entity.getClass().getName()),e);
    }
    Property[] properties=new Property[props.size()];
    properties=props.toArray(properties);
    entityItem.setProperties(properties);
    j++;
  }
  return entities;
}

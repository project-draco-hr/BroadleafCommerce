{
  Map<FulfillmentGroupOfferPotential,List<CandidateFulfillmentGroupOffer>> offerMap=new HashMap<FulfillmentGroupOfferPotential,List<CandidateFulfillmentGroupOffer>>();
  for (  CandidateFulfillmentGroupOffer candidate : qualifiedFGOffers) {
    FulfillmentGroupOfferPotential potential=new FulfillmentGroupOfferPotential();
    potential.setOffer(candidate.getOffer());
    if (offerMap.get(potential) == null) {
      offerMap.put(potential,new ArrayList<CandidateFulfillmentGroupOffer>());
    }
    offerMap.get(potential).add(candidate);
  }
  List<FulfillmentGroupOfferPotential> potentials=new ArrayList<FulfillmentGroupOfferPotential>();
  for (  FulfillmentGroupOfferPotential potential : offerMap.keySet()) {
    for (    CandidateFulfillmentGroupOffer candidate : offerMap.get(potential)) {
      potential.setTotalSavings(potential.getTotalSavings().add(candidate.getDiscountAmount()));
      potential.setPriority(candidate.getPriority());
    }
    potentials.add(potential);
  }
  Collections.sort(potentials,new BeanComparator("totalSavings",Collections.reverseOrder()));
  Collections.sort(potentials,new BeanComparator("priority"));
  boolean fgOfferApplied=false;
  for (  FulfillmentGroupOfferPotential potential : potentials) {
    Offer offer=potential.getOffer();
    if (offer.getTreatAsNewFormat() == null || !offer.getTreatAsNewFormat()) {
      if ((offer.isStackable()) || !fgOfferApplied) {
        boolean alreadyContainsNotCombinableOfferAtAnyLevel=order.isNotCombinableOfferAppliedAtAnyLevel();
        List<CandidateFulfillmentGroupOffer> candidates=offerMap.get(potential);
        for (        CandidateFulfillmentGroupOffer candidate : candidates) {
          applyFulfillmentGroupOffer(candidate);
          fgOfferApplied=true;
        }
        if (!offer.isCombinableWithOtherOffers() || alreadyContainsNotCombinableOfferAtAnyLevel) {
          fgOfferApplied=compareAndAdjustFulfillmentGroupOffers(order,fgOfferApplied);
          if (fgOfferApplied) {
            break;
          }
        }
      }
    }
 else {
      if (!order.containsNotStackableFulfillmentGroupOffer() || !fgOfferApplied) {
        boolean alreadyContainsTotalitarianOffer=order.isTotalitarianOfferApplied();
        List<CandidateFulfillmentGroupOffer> candidates=offerMap.get(potential);
        for (        CandidateFulfillmentGroupOffer candidate : candidates) {
          applyFulfillmentGroupOffer(candidate);
          fgOfferApplied=true;
        }
        if ((offer.isTotalitarianOffer() != null && offer.isTotalitarianOffer()) || alreadyContainsTotalitarianOffer) {
          fgOfferApplied=compareAndAdjustFulfillmentGroupOffers(order,fgOfferApplied);
          if (fgOfferApplied) {
            break;
          }
        }
 else         if (!offer.isCombinableWithOtherOffers()) {
          break;
        }
      }
    }
  }
  return fgOfferApplied;
}

{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    if (cto.get("pageTemplate_Grid").getFilterValues().length > 0) {
      CriteriaTransferObject ctoCopy=new CriteriaTransferObject();
      for (      String prop : cto.getPropertyIdSet()) {
        String propertyId;
        if (prop.equals("pageTemplate_Grid")) {
          propertyId="pageTemplate";
        }
 else {
          propertyId=prop;
        }
        FilterAndSortCriteria criteria=ctoCopy.get(propertyId);
        FilterAndSortCriteria oldCriteria=cto.get(prop);
        criteria.setFilterValue(oldCriteria.getFilterValues()[0]);
        criteria.setIgnoreCase(oldCriteria.getIgnoreCase());
        criteria.setSortAscending(oldCriteria.getIgnoreCase());
      }
      cto=ctoCopy;
    }
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(Page.class.getName(),persistencePerspective);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,Page.class.getName(),originalProps);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,Page.class.getName());
    PersistentEntityCriteria countCriteria=ctoConverter.convert(new CriteriaTransferObjectCountWrapper(cto).wrap(),Page.class.getName());
    Criteria criteria=dynamicEntityDao.getCriteria(queryCriteria,Page.class);
    Criteria count=dynamicEntityDao.getCriteria(countCriteria,Page.class);
    List<Page> pages=pageService.findPages(getSandBox(),criteria);
    Long totalRecords=pageService.countPages(getSandBox(),count);
    List<Serializable> convertedList=new ArrayList<Serializable>();
    convertedList.addAll(pages);
    Entity[] pageEntities=helper.getRecords(originalProps,convertedList);
    for (    Entity entity : pageEntities) {
      if (entity.findProperty("pageTemplate") != null) {
        Property property=new Property();
        property.setName("pageTemplate_Grid");
        property.setValue(entity.findProperty("pageTemplate").getValue());
        entity.addProperty(property);
      }
      if ("true".equals(entity.findProperty("lockedFlag").getValue())) {
        Property property=new Property();
        property.setName("locked");
        property.setValue("[ISOMORPHIC]/../admin/images/lock_page.png");
        entity.addProperty(property);
      }
    }
    for (int j=0; j < pageEntities.length; j++) {
      addRulesToEntity(pages.get(j),pageEntities[j]);
    }
    DynamicResultSet response=new DynamicResultSet(pageEntities,totalRecords.intValue());
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

{
  context.stopProcess();
  CheckoutSeed seed=((CheckoutContext)context).getSeedData();
  if (seed.getUserDefinedFields() != null && seed.getUserDefinedFields().get("BLC_INVENTORY_DECREMENTED") != null) {
    Map<Sku,Integer> inventoryToIncrement=(Map<Sku,Integer>)seed.getUserDefinedFields().get("BLC_INVENTORY_DECREMENTED");
    if (!inventoryToIncrement.isEmpty()) {
      int retryCount=0;
      while (retryCount < maxRetries) {
        try {
          inventoryService.incrementInventory(inventoryToIncrement);
          break;
        }
 catch (        ConcurrentInventoryModificationException ex) {
          retryCount++;
          if (retryCount == maxRetries) {
            LOG.error("After an exception was encountered during checkout, where inventory was decremented. " + maxRetries + " attempts were made to compensate, "+ "but were unsuccessful for order ID: "+ seed.getOrder().getId()+ ". This should be corrected manually!",ex);
          }
        }
catch (        RuntimeException ex) {
          LOG.error("An unexpected error occured in the error handler of the checkout workflow trying to compensate for inventory. This happend for order ID: " + seed.getOrder().getId() + ". This should be corrected manually!",ex);
          break;
        }
      }
    }
  }
  LOG.error("An error occurred during the workflow",th);
  throw new WorkflowException(th);
}

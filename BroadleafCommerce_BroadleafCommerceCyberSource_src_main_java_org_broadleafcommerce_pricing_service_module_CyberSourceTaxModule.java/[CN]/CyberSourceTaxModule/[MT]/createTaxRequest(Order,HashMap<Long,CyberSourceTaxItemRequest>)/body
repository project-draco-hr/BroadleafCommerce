{
  if (order.getPaymentInfos() == null || order.getPaymentInfos().get(0) == null || order.getPaymentInfos().get(0).getAddress() == null) {
    throw new TaxException("The order must have at least one PaymentInfo instance associated with a completed Address in order to calculate tax.");
  }
  CyberSourceTaxRequest taxRequest=new CyberSourceTaxRequest();
  setCurrency(order,taxRequest);
  CyberSourceBillingRequest billingRequest=createBillingRequest(order.getPaymentInfos().get(0));
  taxRequest.setBillingRequest(billingRequest);
  String myNexus=StringUtils.join(nexus.toArray(),",");
  if (StringUtils.isNotEmpty(myNexus))   taxRequest.setNexus(myNexus);
  String myNoNexus=StringUtils.join(nonexus.toArray(),",");
  if (StringUtils.isNotEmpty(myNoNexus))   taxRequest.setNoNexus(myNoNexus);
  taxRequest.setOrderAcceptanceCity(orderAcceptanceCity);
  taxRequest.setOrderAcceptanceCounty(orderAcceptanceCounty);
  taxRequest.setOrderAcceptanceCountry(orderAcceptanceCountry);
  taxRequest.setOrderAcceptanceState(orderAcceptanceState);
  taxRequest.setOrderAcceptancePostalCode(orderAcceptancePostalCode);
  Long idCounter=0L;
  for (  FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
    if (fulfillmentGroup.getAddress().getCountry() != null && !fulfillmentGroup.getAddress().getCountry().getAbbreviation().equalsIgnoreCase("CA") && !fulfillmentGroup.getAddress().getCountry().getAbbreviation().equalsIgnoreCase("US")) {
      throw new TaxException("CyberSource tax calculation only supported for the United States and Canada.");
    }
    for (    FulfillmentGroupItem item : fulfillmentGroup.getFulfillmentGroupItems()) {
      OrderItem orderItem=item.getOrderItem();
      if (orderItem.getTaxablePrice().greaterThan(Money.zero(taxRequest.getCurrency()))) {
        CyberSourceTaxItemRequest itemRequest=new CyberSourceTaxItemRequest();
        itemRequest.setId(idCounter++);
        itemRequest.setNonCyberSourceFulfillmentGroupId(fulfillmentGroup.getId());
        if (DiscreteOrderItem.class.isAssignableFrom(orderItem.getClass())) {
          DiscreteOrderItem discreteItem=(DiscreteOrderItem)orderItem;
          itemRequest.setProductName(discreteItem.getName());
          itemRequest.setProductSKU(discreteItem.getSku().getName());
          itemRequest.setDescription(discreteItem.getSku().getDescription());
        }
 else         if (BundleOrderItem.class.isAssignableFrom(orderItem.getClass())) {
          BundleOrderItem bundleItem=(BundleOrderItem)orderItem;
          itemRequest.setProductName(bundleItem.getName());
          itemRequest.setDescription("Bundled Order Item");
        }
 else {
          itemRequest.setProductName("Other");
          itemRequest.setDescription("Other product type: " + orderItem.getClass().getName());
        }
        itemRequest.setQuantity(1L);
        itemRequest.setNonCyberSourceQuantity(Integer.valueOf(item.getQuantity()).longValue());
        itemRequest.setUnitPrice(orderItem.getTaxablePrice());
        taxRequest.getItemRequests().add(itemRequest);
        requestLibrary.put(itemRequest.getId(),itemRequest);
      }
    }
    for (    FulfillmentGroupFee fulfillmentGroupFee : fulfillmentGroup.getFulfillmentGroupFees()) {
      if (fulfillmentGroupFee.isTaxable() && fulfillmentGroupFee.getAmount().greaterThan(Money.zero(taxRequest.getCurrency()))) {
        CyberSourceTaxItemRequest itemRequest=new CyberSourceTaxItemRequest();
        itemRequest.setId(idCounter++);
        itemRequest.setNonCyberSourceFulfillmentGroupId(fulfillmentGroup.getId());
        itemRequest.setProductName(fulfillmentGroupFee.getName() == null ? "Fee" : fulfillmentGroupFee.getName());
        itemRequest.setDescription(fulfillmentGroupFee.getReportingCode() == null ? "None" : fulfillmentGroupFee.getReportingCode());
        itemRequest.setQuantity(1L);
        itemRequest.setNonCyberSourceQuantity(1L);
        itemRequest.setUnitPrice(fulfillmentGroupFee.getAmount());
        taxRequest.getItemRequests().add(itemRequest);
        requestLibrary.put(itemRequest.getId(),itemRequest);
      }
    }
  }
  return taxRequest;
}

{
  replay();
  PromotableOrder order=dataProvider.createBasicPromotableOrder();
  List<Offer> offers=dataProvider.createFGBasedOfferWithItemCriteria("order.subTotal.getAmount()>20","fulfillmentGroup.address.postalCode==75244",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  OfferQualifyingCriteriaXref xref=offers.get(0).getQualifyingItemCriteriaXref().iterator().next();
  boolean couldApply=fgProcessor.couldOrderItemMeetOfferRequirement(xref.getOfferItemCriteria(),order.getDiscountableOrderItems().get(0));
  assertTrue(couldApply);
  offers=dataProvider.createFGBasedOfferWithItemCriteria("order.subTotal.getAmount()>20","fulfillmentGroup.address.postalCode==75244",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test5\"), MVEL.eval(\"toUpperCase()\",\"test6\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  xref=offers.get(0).getQualifyingItemCriteriaXref().iterator().next();
  couldApply=fgProcessor.couldOrderItemMeetOfferRequirement(xref.getOfferItemCriteria(),order.getDiscountableOrderItems().get(0));
  assertFalse(couldApply);
  verify();
}

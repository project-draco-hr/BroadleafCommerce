{
  Iterator<StructuredContent> structuredContentIterator=structuredContentList.iterator();
  List<StructuredContent> returnList=new ArrayList<StructuredContent>();
  List<StructuredContent> tmpList=new ArrayList<StructuredContent>();
  Integer lastPriority=Integer.MIN_VALUE;
  while (structuredContentIterator.hasNext()) {
    StructuredContent sc=structuredContentIterator.next();
    if (!lastPriority.equals(sc.getPriority())) {
      if (tmpList.size() > 1) {
        Collections.shuffle(tmpList);
      }
      returnList.addAll(tmpList);
      tmpList.clear();
      if (returnList.size() == count) {
        return returnList;
      }
 else       if (returnList.size() > count) {
        return returnList.subList(0,count);
      }
 else {
        if (sc.getDisplayRule() != null && !"".equals(sc.getDisplayRule())) {
          if (executeExpression(sc.getDisplayRule(),ruleDTOs)) {
            tmpList.add(sc);
          }
        }
 else {
          tmpList.add(sc);
        }
      }
    }
 else {
      if (sc.getDisplayRule() != null && !"".equals(sc.getDisplayRule())) {
        if (executeExpression(sc.getDisplayRule(),ruleDTOs)) {
          tmpList.add(sc);
        }
      }
 else {
        tmpList.add(sc);
      }
    }
    lastPriority=sc.getPriority();
  }
  if (tmpList.size() > 1) {
    Collections.shuffle(tmpList);
  }
  returnList.addAll(tmpList);
  if (returnList.size() > count) {
    return returnList.subList(0,count);
  }
  return returnList;
}

{
  mergedProperties=helper.getSimpleMergedProperties(StructuredContent.class.getName(),persistencePerspective,entityClasses);
  FieldMetadata fieldMetadata=new FieldMetadata();
  fieldMetadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
  fieldMetadata.setMutable(true);
  fieldMetadata.setInheritedFromType(StructuredContentImpl.class.getName());
  fieldMetadata.setAvailableToTypes(new String[]{StructuredContentImpl.class.getName()});
  fieldMetadata.setCollection(false);
  fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  PersistencePackage fetchPackage=new PersistencePackage();
  fetchPackage.setCeilingEntityFullyQualifiedClassname(Locale.class.getName());
  PersistencePerspective fetchPerspective=new PersistencePerspective();
  fetchPackage.setPersistencePerspective(fetchPerspective);
  fetchPerspective.setAdditionalForeignKeys(new ForeignKey[]{});
  fetchPerspective.setOperationTypes(new OperationTypes(OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY));
  fetchPerspective.setAdditionalNonPersistentProperties(new String[]{});
  DynamicResultSet resultSet=((PersistenceManager)helper).fetch(fetchPackage,new CriteriaTransferObject());
  String[][] enums=new String[resultSet.getRecords().length][2];
  int j=0;
  for (  Entity entity : resultSet.getRecords()) {
    enums[j][0]=entity.findProperty("id").getValue();
    enums[j][1]=entity.findProperty("friendlyName").getValue();
    j++;
  }
  fieldMetadata.setEnumerationValues(enums);
  FieldPresentationAttributes attributes=new FieldPresentationAttributes();
  fieldMetadata.setPresentationAttributes(attributes);
  attributes.setName("locale");
  attributes.setFriendlyName("Locale");
  attributes.setGroup("Description");
  attributes.setOrder(3);
  attributes.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  attributes.setProminent(true);
  attributes.setBroadleafEnumeration("");
  attributes.setReadOnly(false);
  attributes.setHidden(false);
  attributes.setRequiredOverride(true);
  mergedProperties.put("locale",fieldMetadata);
  FieldMetadata contentTypeFieldMetadata=new FieldMetadata();
  contentTypeFieldMetadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
  contentTypeFieldMetadata.setMutable(true);
  contentTypeFieldMetadata.setInheritedFromType(StructuredContentTypeImpl.class.getName());
  contentTypeFieldMetadata.setAvailableToTypes(new String[]{StructuredContentTypeImpl.class.getName()});
  contentTypeFieldMetadata.setCollection(false);
  contentTypeFieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  PersistencePackage contentTypeFetchPackage=new PersistencePackage();
  contentTypeFetchPackage.setCeilingEntityFullyQualifiedClassname(StructuredContentType.class.getName());
  PersistencePerspective contentTypeFetchPerspective=new PersistencePerspective();
  contentTypeFetchPackage.setPersistencePerspective(contentTypeFetchPerspective);
  contentTypeFetchPerspective.setAdditionalForeignKeys(new ForeignKey[]{});
  contentTypeFetchPerspective.setOperationTypes(new OperationTypes(OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY,OperationType.ENTITY));
  contentTypeFetchPerspective.setAdditionalNonPersistentProperties(new String[]{});
  DynamicResultSet contentTypeResultSet=((PersistenceManager)helper).fetch(contentTypeFetchPackage,new CriteriaTransferObject());
  String[][] contentTypeEnums=new String[contentTypeResultSet.getRecords().length][2];
  int i=0;
  for (  Entity entity : contentTypeResultSet.getRecords()) {
    contentTypeEnums[i][0]=entity.findProperty("id").getValue();
    contentTypeEnums[i][1]=entity.findProperty("name").getValue();
    i++;
  }
  contentTypeFieldMetadata.setEnumerationValues(contentTypeEnums);
  FieldPresentationAttributes contentTypeAttributes=new FieldPresentationAttributes();
  contentTypeFieldMetadata.setPresentationAttributes(contentTypeAttributes);
  contentTypeAttributes.setName("structuredContentTypeGrid");
  contentTypeAttributes.setFriendlyName("Content Type");
  contentTypeAttributes.setGroup("Description");
  contentTypeAttributes.setOrder(2);
  contentTypeAttributes.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  contentTypeAttributes.setProminent(true);
  contentTypeAttributes.setBroadleafEnumeration("");
  contentTypeAttributes.setReadOnly(false);
  contentTypeAttributes.setHidden(false);
  contentTypeAttributes.setRequiredOverride(true);
  contentTypeAttributes.setFormHidden(FormHiddenEnum.HIDDEN);
  mergedProperties.put("structuredContentTypeGrid",contentTypeFieldMetadata);
  FieldMetadata iconMetadata=new FieldMetadata();
  iconMetadata.setFieldType(SupportedFieldType.ARTIFACT);
  iconMetadata.setMutable(true);
  iconMetadata.setInheritedFromType(StructuredContentImpl.class.getName());
  iconMetadata.setAvailableToTypes(new String[]{StructuredContentImpl.class.getName()});
  iconMetadata.setCollection(false);
  iconMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  FieldPresentationAttributes iconAttributes=new FieldPresentationAttributes();
  iconMetadata.setPresentationAttributes(iconAttributes);
  iconAttributes.setName("picture");
  iconAttributes.setFriendlyName(" ");
  iconAttributes.setGroup("Locked Details");
  iconAttributes.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  iconAttributes.setProminent(true);
  iconAttributes.setBroadleafEnumeration("");
  iconAttributes.setReadOnly(false);
  iconAttributes.setHidden(false);
  iconAttributes.setFormHidden(FormHiddenEnum.HIDDEN);
  iconAttributes.setColumnWidth("25");
  iconAttributes.setOrder(0);
  iconAttributes.setRequiredOverride(true);
  mergedProperties.put("locked",iconMetadata);
}

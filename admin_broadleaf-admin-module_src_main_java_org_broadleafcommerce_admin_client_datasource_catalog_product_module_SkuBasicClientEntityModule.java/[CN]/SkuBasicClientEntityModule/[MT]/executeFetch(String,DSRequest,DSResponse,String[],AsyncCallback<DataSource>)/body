{
  if (request.getCriteria() != null && request.getCriteria().getAttribute("blc.fetch.from.cache") != null) {
    super.executeFetch(requestId,request,response,customCriteria,cb);
  }
 else {
    BLCMain.NON_MODAL_PROGRESS.startProgress();
    CriteriaTransferObject cto=getCto(request);
    service.fetch(new PersistencePackage(ceilingEntityFullyQualifiedClassname,fetchTypeFullyQualifiedClassname,null,persistencePerspective,customCriteria,BLCMain.csrfToken),cto,new EntityServiceAsyncCallback<DynamicResultSet>(EntityOperationType.FETCH,requestId,request,response,dataSource){
      @Override public void onSuccess(      DynamicResultSet result){
        super.onSuccess(result);
        TreeNode[] recordList=buildRecords(result,null);
        response.setData(recordList);
        response.setTotalRows(result.getTotalRecords());
        if (result.getTotalRecords() > 0) {
          for (          DataSourceField field : dataSource.getFields()) {
            if (field.getName().startsWith("productOption")) {
              field.setAttribute("formHidden",FormHiddenEnum.HIDDEN);
            }
          }
          if (result.getClassMetaData().getProperties() != null) {
            for (            Property property : result.getClassMetaData().getProperties()) {
              DataSourceField field=((ListGridDataSource)dataSource).getField(property.getName());
              field.setAttribute("formHidden",FormHiddenEnum.VISIBLE);
            }
          }
          List<String> productOptionFields=new ArrayList<String>();
          for (          Entity entity : result.getRecords()) {
            for (            Property property : entity.getProperties()) {
              if (property.getName().startsWith("productOption")) {
                if (!productOptionFields.contains(property.getName())) {
                  productOptionFields.add(property.getName());
                }
              }
            }
          }
          for (          DataSourceField field : dataSource.getFields()) {
            if (field.getName().startsWith("productOption")) {
              if (productOptionFields.contains(field.getName())) {
                ((ListGrid)((ListGridDataSource)dataSource).getAssociatedGrid()).showField(field.getName());
              }
 else {
                ((ListGrid)((ListGridDataSource)dataSource).getAssociatedGrid()).hideField(field.getName());
              }
            }
          }
        }
        if (cb != null) {
          cb.onSuccess(dataSource);
        }
        dataSource.processResponse(requestId,response);
      }
      @Override protected void onSecurityException(      ApplicationSecurityException exception){
        super.onSecurityException(exception);
        if (cb != null) {
          cb.onFailure(exception);
        }
      }
      @Override protected void onOtherException(      Throwable exception){
        super.onOtherException(exception);
        if (cb != null) {
          cb.onFailure(exception);
        }
      }
      @Override protected void onError(      EntityOperationType opType,      String requestId,      DSRequest request,      DSResponse response,      Throwable caught){
        super.onError(opType,requestId,request,response,caught);
        if (cb != null) {
          cb.onFailure(caught);
        }
      }
    }
);
  }
}

{
  EfficientLRUMap<String,String> testMap=new EfficientLRUMap<String,String>(5);
  testMap.put("key1","value1");
  assertTrue("The value for key1 should be value 1","value1".equals(testMap.get("key1")));
  assertTrue("The size() for the map should be 1",1 == testMap.size());
  assertTrue("The type of Map should be ConcurrentHashMap",testMap.getUnderlyingMapClass().equals(ConcurrentHashMap.class));
  testMap.put("key2","value2");
  testMap.put("key3","value3");
  testMap.put("key4","value4");
  testMap.put("key5","value5");
  assertTrue("The value for key5 should be value5","value5".equals(testMap.get("key5")));
  assertTrue("The size() for the map should be 5",5 == testMap.size());
  assertTrue("The type of Map should be ConcurrentHashMap",testMap.getUnderlyingMapClass().equals(ConcurrentHashMap.class));
  testMap.put("key5","value5b");
  assertTrue("The value for key5 should now be value5b","value5b".equals(testMap.get("key5")));
  assertTrue("The size() for the map should be 5",5 == testMap.size());
  assertTrue("The type of Map should be ConcurrentHashMap",testMap.getUnderlyingMapClass().equals(ConcurrentHashMap.class));
  testMap.put("key6","value6");
  assertTrue("The value for key1 should still be value1","value1".equals(testMap.get("key1")));
  assertTrue("The value for key6 should be value6","value6".equals(testMap.get("key6")));
  assertTrue("The size() for the map should be 5 since we are now LRU",5 == testMap.size());
  assertTrue("The type of Map should not be a ConcurrentHashMap.   It should be a synchronized map",!testMap.getUnderlyingMapClass().equals(LRUMap.class));
}

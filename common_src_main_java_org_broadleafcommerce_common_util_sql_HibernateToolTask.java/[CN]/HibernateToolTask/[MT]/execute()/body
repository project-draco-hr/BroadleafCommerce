{
  AntClassLoader loader;
  MergeFileSystemAndClassPathXMLApplicationContext mergeContext;
  try {
    loader=getProject().createClassLoader(classPath);
    ClassLoader classLoader=this.getClass().getClassLoader();
    loader.setParent(classLoader);
    loader.setThreadContextLoader();
    String[] contexts=StandardConfigLocations.retrieveAll(StandardConfigLocations.TESTCONTEXTTYPE);
    String[] otherContexts=new String[classPathApplicationContexts.size()];
    for (int j=0; j < otherContexts.length; j++) {
      otherContexts[j]=classPathApplicationContexts.get(j).getPath();
    }
    contexts=(String[])ArrayUtils.addAll(contexts,otherContexts);
    String[] fileSystemItems=new String[fileSystemApplicationContexts.size()];
    for (int j=0; j < fileSystemItems.length; j++) {
      fileSystemItems[j]=fileSystemApplicationContexts.get(j).getPath();
    }
    mergeContext=new MergeFileSystemAndClassPathXMLApplicationContext(contexts,fileSystemItems);
  }
 catch (  Exception e) {
    throw new BuildException(e,getLocation());
  }
  int count=1;
  ExporterTask generatorTask=null;
  try {
    for (    Object configuration : configurationTasks) {
      JPAConfigurationTask configurationTask=(JPAConfigurationTask)configuration;
      log("Executing Hibernate Tool with a " + configurationTask.getDescription());
      @SuppressWarnings("rawtypes") Iterator iterator=generators.iterator();
      while (iterator.hasNext()) {
        generatorTask=(ExporterTask)iterator.next();
        log(count++ + ". task: " + generatorTask.getName());
        generatorTask.setOutputFileName(configurationTask.getDialect() + "_" + configurationTask.getPersistenceUnit()+ ".sql");
        generatorTask.setDestdir(destDir);
        generatorTask.setConfiguration(configurationTask.createConfiguration(mergeContext));
        generatorTask.execute();
      }
    }
  }
 catch (  RuntimeException re) {
    reportException(re,count,generatorTask);
  }
 finally {
    if (loader != null) {
      loader.resetThreadContextLoader();
      loader.cleanup();
    }
  }
  try {
    if (combinePersistenceUnits) {
      ArrayList<File> combine=new ArrayList<File>();
      for (      Object configuration : configurationTasks) {
        JPAConfigurationTask configurationTask=(JPAConfigurationTask)configuration;
        File[] sqlFiles=destDir.listFiles(new SqlFileFilter());
        for (        File file : sqlFiles) {
          if (file.getName().startsWith(configurationTask.getDialect())) {
            combine.add(file);
          }
        }
        combineFiles(combine);
        combine.clear();
      }
    }
    if (refineFileNames) {
      File[] sqlFiles=destDir.listFiles(new SqlFileFilter());
      for (      File file : sqlFiles) {
        String filename=file.getName();
        String[] starters={"org.hibernate.dialect.","org.broadleafcommerce.profile.util.sql."};
        for (        String starter : starters) {
          if (filename.startsWith(starter)) {
            String newFileName=filename.substring(starter.length(),filename.length());
            file.renameTo(new File(destDir,newFileName));
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new BuildException(e,getLocation());
  }
}

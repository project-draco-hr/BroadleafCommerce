{
  List<CategorySearchFacet> returnCategoryFacets=new ArrayList<CategorySearchFacet>();
  returnCategoryFacets.addAll(getSearchFacets());
  Collections.sort(returnCategoryFacets,facetPositionComparator);
  final Collection<SearchFacet> facets=CollectionUtils.collect(returnCategoryFacets,new Transformer(){
    @Override public Object transform(    Object input){
      return ((CategorySearchFacet)input).getSearchFacet();
    }
  }
);
  List<CategorySearchFacet> parentFacets=null;
  if (defaultParentCategory != null) {
    parentFacets=defaultParentCategory.getCumulativeSearchFacets();
    CollectionUtils.filter(parentFacets,new Predicate(){
      @Override public boolean evaluate(      Object arg){
        CategorySearchFacet csf=(CategorySearchFacet)arg;
        return !getExcludedSearchFacets().contains(csf.getSearchFacet()) && !facets.contains(csf.getSearchFacet());
      }
    }
);
  }
  if (parentFacets != null) {
    returnCategoryFacets.addAll(parentFacets);
  }
  return returnCategoryFacets;
}

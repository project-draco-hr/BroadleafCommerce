{
  CheckoutSeed seed=context.getSeedData();
  List<OrderItem> orderItems=seed.getOrder().getOrderItems();
  HashMap<Sku,Integer> skuInventoryMap=new HashMap<Sku,Integer>();
  for (  OrderItem orderItem : orderItems) {
    if (orderItem instanceof DiscreteOrderItem) {
      Sku sku=((DiscreteOrderItem)orderItem).getSku();
      Integer quantity=skuInventoryMap.get(sku);
      if (quantity == null) {
        quantity=orderItem.getQuantity();
      }
 else {
        quantity+=orderItem.getQuantity();
      }
      skuInventoryMap.put(sku,quantity);
    }
 else     if (orderItem instanceof BundleOrderItem) {
      BundleOrderItem bundleItem=(BundleOrderItem)orderItem;
      skuInventoryMap.put(bundleItem.getSku(),bundleItem.getQuantity());
      List<DiscreteOrderItem> discreteItems=bundleItem.getDiscreteOrderItems();
      for (      DiscreteOrderItem discreteItem : discreteItems) {
        Integer quantity=skuInventoryMap.get(discreteItem.getSku().getId());
        if (quantity == null) {
          quantity=(discreteItem.getQuantity() * bundleItem.getQuantity());
        }
 else {
          quantity+=(discreteItem.getQuantity() * bundleItem.getQuantity());
        }
        skuInventoryMap.put(discreteItem.getSku(),quantity);
      }
    }
  }
  Map<String,Object> rollbackState=new HashMap<String,Object>();
  if (getRollbackHandler() != null && !getAutomaticallyRegisterRollbackHandler()) {
    if (getStateConfiguration() != null && !getStateConfiguration().isEmpty()) {
      rollbackState.putAll(getStateConfiguration());
    }
    ActivityStateManagerImpl.getStateManager().registerState(this,context,getRollbackRegion(),getRollbackHandler(),rollbackState);
  }
  if (!skuInventoryMap.isEmpty()) {
    ExtensionResultStatusType extensionResult=extensionManager.getProxy().decrementInventory(skuInventoryMap,context,rollbackState);
    if (ExtensionResultStatusType.NOT_HANDLED.equals(extensionResult)) {
      inventoryService.decrementInventory(skuInventoryMap);
      if (getRollbackHandler() != null && !getAutomaticallyRegisterRollbackHandler()) {
        rollbackState.put(DecrementInventoryRollbackHandler.ROLLBACK_BLC_INVENTORY_DECREMENTED,skuInventoryMap);
        rollbackState.put(DecrementInventoryRollbackHandler.ROLLBACK_BLC_ORDER_ID,seed.getOrder().getId());
      }
    }
  }
  return context;
}

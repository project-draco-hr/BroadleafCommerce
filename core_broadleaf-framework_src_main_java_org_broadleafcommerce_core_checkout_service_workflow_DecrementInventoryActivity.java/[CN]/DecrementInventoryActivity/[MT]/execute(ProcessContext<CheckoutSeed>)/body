{
  CheckoutSeed seed=context.getSeedData();
  List<OrderItem> orderItems=seed.getOrder().getOrderItems();
  HashMap<Sku,Integer> skuInventoryMap=new HashMap<Sku,Integer>();
  for (  OrderItem orderItem : orderItems) {
    if (orderItem instanceof DiscreteOrderItem) {
      Sku sku=((DiscreteOrderItem)orderItem).getSku();
      Integer quantity=skuInventoryMap.get(sku);
      if (quantity == null) {
        quantity=orderItem.getQuantity();
      }
 else {
        quantity+=orderItem.getQuantity();
      }
      if (InventoryType.CHECK_QUANTITY.equals(sku.getInventoryType())) {
        skuInventoryMap.put(sku,quantity);
      }
    }
 else     if (orderItem instanceof BundleOrderItem) {
      BundleOrderItem bundleItem=(BundleOrderItem)orderItem;
      if (InventoryType.CHECK_QUANTITY.equals(bundleItem.getSku().getInventoryType())) {
        skuInventoryMap.put(bundleItem.getSku(),bundleItem.getQuantity());
      }
      List<DiscreteOrderItem> discreteItems=bundleItem.getDiscreteOrderItems();
      for (      DiscreteOrderItem discreteItem : discreteItems) {
        if (InventoryType.CHECK_QUANTITY.equals(discreteItem.getSku().getInventoryType())) {
          Integer quantity=skuInventoryMap.get(discreteItem.getSku().getId());
          if (quantity == null) {
            quantity=(discreteItem.getQuantity() * bundleItem.getQuantity());
          }
 else {
            quantity+=(discreteItem.getQuantity() * bundleItem.getQuantity());
          }
          skuInventoryMap.put(discreteItem.getSku(),quantity);
        }
      }
    }
  }
  Map<String,Object> rollbackState=new HashMap<String,Object>();
  if (getRollbackHandler() != null && !getAutomaticallyRegisterRollbackHandler()) {
    if (getStateConfiguration() != null && !getStateConfiguration().isEmpty()) {
      rollbackState.putAll(getStateConfiguration());
    }
    ActivityStateManagerImpl.getStateManager().registerState(this,context,getRollbackRegion(),getRollbackHandler(),rollbackState);
  }
  if (!skuInventoryMap.isEmpty()) {
    Map<String,Object> contextualInfo=new HashMap<String,Object>();
    contextualInfo.put(ContextualInventoryService.ORDER_KEY,context.getSeedData().getOrder());
    contextualInfo.put(ContextualInventoryService.ROLLBACK_STATE_KEY,new HashMap<String,Object>());
    inventoryService.decrementInventory(skuInventoryMap,contextualInfo);
    if (getRollbackHandler() != null && !getAutomaticallyRegisterRollbackHandler()) {
      rollbackState.put(DecrementInventoryRollbackHandler.ROLLBACK_BLC_INVENTORY_DECREMENTED,skuInventoryMap);
      rollbackState.put(DecrementInventoryRollbackHandler.ROLLBACK_BLC_ORDER_ID,seed.getOrder().getId());
    }
    rollbackState.putAll((Map<String,Object>)contextualInfo.get(ContextualInventoryService.ROLLBACK_STATE_KEY));
  }
  return context;
}

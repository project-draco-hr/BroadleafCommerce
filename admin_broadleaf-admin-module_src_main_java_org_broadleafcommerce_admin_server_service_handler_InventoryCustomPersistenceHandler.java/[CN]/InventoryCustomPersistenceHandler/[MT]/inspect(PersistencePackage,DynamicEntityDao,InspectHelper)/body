{
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> properties=helper.getSimpleMergedProperties(Inventory.class.getName(),persistencePerspective);
    BasicFieldMetadata fieldMetadata=new BasicFieldMetadata();
    fieldMetadata.setFieldType(SupportedFieldType.INTEGER);
    fieldMetadata.setMutable(true);
    fieldMetadata.setInheritedFromType(Inventory.class.getName());
    fieldMetadata.setAvailableToTypes(new String[]{Inventory.class.getName()});
    fieldMetadata.setForeignKeyCollection(false);
    fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    fieldMetadata.setName(QUANTITY_AVAILABLE_CHANGE_FIELD_NAME);
    fieldMetadata.setFriendlyName("quantityAvailableChange");
    fieldMetadata.setGroup("Quantities");
    fieldMetadata.setOrder(3);
    fieldMetadata.setExplicitFieldType(SupportedFieldType.INTEGER);
    fieldMetadata.setProminent(false);
    fieldMetadata.setBroadleafEnumeration("");
    fieldMetadata.setReadOnly(false);
    fieldMetadata.setVisibility(VisibilityEnum.GRID_HIDDEN);
    fieldMetadata.setExcluded(false);
    properties.put(QUANTITY_AVAILABLE_CHANGE_FIELD_NAME,fieldMetadata);
    BasicFieldMetadata quantityOnHandChangeMetadata=new BasicFieldMetadata();
    quantityOnHandChangeMetadata.setFieldType(SupportedFieldType.INTEGER);
    quantityOnHandChangeMetadata.setMutable(true);
    quantityOnHandChangeMetadata.setInheritedFromType(Inventory.class.getName());
    quantityOnHandChangeMetadata.setAvailableToTypes(new String[]{Inventory.class.getName()});
    quantityOnHandChangeMetadata.setForeignKeyCollection(false);
    quantityOnHandChangeMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    quantityOnHandChangeMetadata.setName(QUANTITY_ON_HAND_CHANGE_FIELD_NAME);
    quantityOnHandChangeMetadata.setFriendlyName("quantityOnHandChange");
    quantityOnHandChangeMetadata.setGroup("Quantities");
    quantityOnHandChangeMetadata.setOrder(4);
    quantityOnHandChangeMetadata.setExplicitFieldType(SupportedFieldType.INTEGER);
    quantityOnHandChangeMetadata.setProminent(false);
    quantityOnHandChangeMetadata.setBroadleafEnumeration("");
    quantityOnHandChangeMetadata.setReadOnly(false);
    quantityOnHandChangeMetadata.setVisibility(VisibilityEnum.GRID_HIDDEN);
    quantityOnHandChangeMetadata.setExcluded(false);
    properties.put(QUANTITY_ON_HAND_CHANGE_FIELD_NAME,quantityOnHandChangeMetadata);
    allMergedProperties.put(MergedPropertyType.PRIMARY,properties);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Inventory.class);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    return new DynamicResultSet(mergedMetadata,null,null);
  }
 catch (  Exception e) {
    String className=persistencePackage.getCeilingEntityFullyQualifiedClassname();
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + className,e);
    LOG.error("Unable to retrieve inspection results for " + className,ex);
    throw ex;
  }
}

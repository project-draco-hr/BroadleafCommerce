{
  Entity entity=persistencePackage.getEntity();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> adminProperties=helper.getSimpleMergedProperties(Inventory.class.getName(),persistencePerspective);
    Object primaryKey=helper.getPrimaryKey(entity,adminProperties);
    Inventory adminInstance=(Inventory)dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),primaryKey);
    adminInstance=(Inventory)helper.createPopulatedInstance(adminInstance,entity,adminProperties,false);
    Integer quantityAvailableChange=0;
    Integer quantityAvailableOnHandChange=0;
    Property[] properties=entity.getProperties();
    for (    Property property : properties) {
      if (QUANTITY_AVAILABLE_CHANGE_FIELD_NAME.equals(property.getName())) {
        quantityAvailableChange=NumberUtils.toInt(property.getValue());
      }
 else       if (QUANTITY_ON_HAND_CHANGE_FIELD_NAME.equals(property.getName())) {
        quantityAvailableOnHandChange=NumberUtils.toInt(property.getValue());
      }
    }
    adminInstance.setQuantityAvailable(adminInstance.getQuantityAvailable() + quantityAvailableChange);
    adminInstance.setQuantityOnHand(adminInstance.getQuantityOnHand() + quantityAvailableOnHandChange);
    if (adminInstance.getQuantityAvailable() < 0) {
      entity.setValidationFailure(true);
      entity.addValidationError(QUANTITY_AVAILABLE_CHANGE_FIELD_NAME,"quantityAvailableIsNegative");
      return entity;
    }
 else     if (adminInstance.getQuantityOnHand() < 0) {
      entity.setValidationFailure(true);
      entity.addValidationError(QUANTITY_ON_HAND_CHANGE_FIELD_NAME,"quantityOnHandIsNegative");
      return entity;
    }
    int retryCount=0;
    while (retryCount < MAX_RETRIES) {
      try {
        inventoryService.save(adminInstance);
        break;
      }
 catch (      ConcurrentInventoryModificationException ex) {
        retryCount++;
        if (retryCount == MAX_RETRIES) {
          throw new ServiceException("Unable to update the inventory due to too many users" + "concurrently updating this inventory. Please try again.");
        }
      }
    }
    return helper.getRecord(adminProperties,adminInstance,null,null);
  }
 catch (  Exception e) {
    LOG.error("Unable to update entity for " + entity.getType()[0],e);
    throw new ServiceException("Unable to update entity for " + entity.getType()[0],e);
  }
}

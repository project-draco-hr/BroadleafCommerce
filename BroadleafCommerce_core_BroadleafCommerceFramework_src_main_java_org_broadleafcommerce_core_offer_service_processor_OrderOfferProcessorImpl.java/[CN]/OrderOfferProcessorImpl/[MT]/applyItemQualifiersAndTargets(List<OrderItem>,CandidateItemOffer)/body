{
  Offer promotion=itemOffer.getOffer();
  OrderItemPriceComparator priceComparator=new OrderItemPriceComparator(promotion);
  boolean matchFound=false;
  do {
    boolean atLeastOneCriteriaMatched=false;
    for (    OfferItemCriteria itemCriteria : itemOffer.getCandidateQualifiersMap().keySet()) {
      List<OrderItem> chargeableItems=itemOffer.getCandidateQualifiersMap().get(itemCriteria);
      Collections.sort(chargeableItems,priceComparator);
      int extraQualifiersNeeded=itemCriteria.getRequiresQuantity() - itemCriteria.getReceiveQuantity();
      int receiveQtyNeeded=itemCriteria.getReceiveQuantity();
      for (      OrderItem chargeableItem : chargeableItems) {
        if (extraQualifiersNeeded > 0) {
          int itemQtyAvailableToBeUsedAsQualifier=chargeableItem.getQuantityAvailableToBeUsedAsQualifier(promotion);
          if (itemQtyAvailableToBeUsedAsQualifier > 0) {
            int qtyToMarkAsQualifier=Math.min(extraQualifiersNeeded,itemQtyAvailableToBeUsedAsQualifier);
            extraQualifiersNeeded=extraQualifiersNeeded - qtyToMarkAsQualifier;
            atLeastOneCriteriaMatched=true;
            chargeableItem.addPromotionQualifier(itemOffer,itemCriteria,qtyToMarkAsQualifier);
          }
        }
        if (receiveQtyNeeded > 0) {
          int itemQtyAvailableToBeUsedAsTarget=chargeableItem.getQuantityAvailableToBeUsedAsTarget(promotion);
          if (itemQtyAvailableToBeUsedAsTarget > 0) {
            int qtyToMarkAsTarget=Math.min(receiveQtyNeeded,itemQtyAvailableToBeUsedAsTarget);
            receiveQtyNeeded=receiveQtyNeeded - qtyToMarkAsTarget;
            atLeastOneCriteriaMatched=true;
            chargeableItem.addPromotionDiscount(itemOffer,itemCriteria,qtyToMarkAsTarget);
          }
        }
        if (receiveQtyNeeded == 0 && extraQualifiersNeeded == 0) {
          break;
        }
      }
      if (receiveQtyNeeded != 0 && extraQualifiersNeeded != 0) {
        clearAllNonFinalizedQuantities(chargeableItems);
        atLeastOneCriteriaMatched=false;
        break;
      }
    }
    if (atLeastOneCriteriaMatched) {
      matchFound=true;
      finalizeQuantities(discreteOrderItems);
    }
  }
 while (matchFound);
  Iterator<OrderItem> chargeableItemsIterator=discreteOrderItems.iterator();
  List<OrderItem> splitChargeableItems=new ArrayList<OrderItem>();
  while (chargeableItemsIterator.hasNext()) {
    OrderItem chargeableItem=chargeableItemsIterator.next();
    List<OrderItem> splitItems=chargeableItem.split();
    if (splitItems != null && splitItems.size() > 0) {
      chargeableItemsIterator.remove();
      splitChargeableItems.addAll(splitItems);
    }
  }
  discreteOrderItems.addAll(splitChargeableItems);
}

{
  boolean orderOffersApplied=false;
  Iterator<CandidateOrderOffer> orderOfferIterator=orderOffers.iterator();
  while (orderOfferIterator.hasNext()) {
    CandidateOrderOffer orderOffer=orderOfferIterator.next();
    if (orderOffer.getOffer().getTreatAsNewFormat() == null || !orderOffer.getOffer().getTreatAsNewFormat()) {
      if ((orderOffer.getOffer().isStackable()) || !order.isHasOrderAdjustments()) {
        boolean alreadyContainsNotCombinableOfferAtAnyLevel=order.isNotCombinableOfferAppliedAtAnyLevel();
        applyOrderOffer(orderOffer);
        orderOffersApplied=true;
        if (!orderOffer.getOffer().isCombinableWithOtherOffers() || alreadyContainsNotCombinableOfferAtAnyLevel) {
          orderOffersApplied=compareAndAdjustOrderAndItemOffers(order,orderOffersApplied);
          if (orderOffersApplied) {
            break;
          }
 else {
            orderOfferIterator.remove();
          }
        }
      }
    }
 else {
      if (!order.containsNotStackableOrderOffer() || !order.isHasOrderAdjustments()) {
        boolean alreadyContainsTotalitarianOffer=order.isTotalitarianOfferApplied();
        applyOrderOffer(orderOffer);
        orderOffersApplied=true;
        if ((orderOffer.getOffer().isTotalitarianOffer() != null && orderOffer.getOffer().isTotalitarianOffer()) || alreadyContainsTotalitarianOffer) {
          orderOffersApplied=compareAndAdjustOrderAndItemOffers(order,orderOffersApplied);
          if (orderOffersApplied) {
            break;
          }
 else {
            orderOfferIterator.remove();
          }
        }
 else         if (!orderOffer.getOffer().isCombinableWithOtherOffers()) {
          break;
        }
      }
    }
  }
  return orderOffersApplied;
}

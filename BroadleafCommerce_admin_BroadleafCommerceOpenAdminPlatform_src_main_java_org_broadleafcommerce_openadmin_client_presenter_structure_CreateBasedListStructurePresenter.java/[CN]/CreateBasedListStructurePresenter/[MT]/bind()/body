{
  display.getGrid().addDataArrivedHandler(new DataArrivedHandler(){
    public void onDataArrived(    DataArrivedEvent event){
      display.getRemoveButton().disable();
    }
  }
);
  display.getGrid().addEditCompleteHandler(new EditCompleteHandler(){
    public void onEditComplete(    EditCompleteEvent event){
      display.getGrid().deselectAllRecords();
      setStartState();
    }
  }
);
  display.getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    public void onSelectionChanged(    SelectionEvent event){
      if (event.getState()) {
        display.getRemoveButton().enable();
      }
 else {
        display.getRemoveButton().disable();
      }
    }
  }
);
  display.getRemoveButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        display.getGrid().removeData(display.getGrid().getSelectedRecord(),new DSCallback(){
          public void execute(          DSResponse response,          Object rawData,          DSRequest request){
            display.getRemoveButton().disable();
          }
        }
);
      }
    }
  }
);
  display.getAddButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        DynamicEntityDataSource ds=(DynamicEntityDataSource)display.getGrid().getDataSource();
        ForeignKey foreignKey=(ForeignKey)ds.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
        initialValues.put(foreignKey.getManyToField(),abstractDynamicDataSource.getPrimaryKeyValue(associatedRecord));
        String[] type=new String[]{((DynamicEntityDataSource)display.getGrid().getDataSource()).getDefaultNewEntityFullyQualifiedClassname()};
        initialValues.put("_type",type);
        BLCMain.ENTITY_ADD.editNewRecord(editDialogTitle,ds,initialValues,null,null,null,null);
      }
    }
  }
);
}

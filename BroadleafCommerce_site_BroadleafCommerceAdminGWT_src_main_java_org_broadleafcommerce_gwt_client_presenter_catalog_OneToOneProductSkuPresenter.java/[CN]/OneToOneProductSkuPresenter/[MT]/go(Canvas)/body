{
  Main.NON_MODAL_PROGRESS.startProgress();
  if (loaded) {
    OneToOneProductSkuPresenter.super.go(container);
    return;
  }
  OneToOneProductSkuDataSourceFactory.createDataSource("productDS",new AsyncCallbackAdapter(){
    public void onSuccess(    DataSource top){
      setupDisplayItems(top);
      ((ListGridDataSource)top).setupGridFields(new String[]{},new Boolean[]{});
      OperationTypes operationTypes=new OperationTypes(OperationType.ENTITY,OperationType.ENTITY,OperationType.JOINSTRUCTURE,OperationType.ENTITY,OperationType.ENTITY);
      CategoryListDataSourceFactory.createDataSource("categorySearch",operationTypes,new AsyncCallbackAdapter(){
        public void onSuccess(        DataSource result){
          ListGridDataSource categorySearchDataSource=(ListGridDataSource)result;
          categorySearchDataSource.resetFieldVisibility("name","urlKey","activeStartDate","activeEndDate");
          EntitySearchDialog categorySearchView=new EntitySearchDialog(categorySearchDataSource);
          ((DynamicEntityDataSource)((OneToOneProductSkuDisplay)getDisplay()).getListDisplay().getGrid().getDataSource()).getFormItemCallbackHandlerManager().addSearchFormItemCallback("defaultCategory",categorySearchView,"Category Search",((OneToOneProductSkuDisplay)getDisplay()).getListDisplay().getGrid(),((OneToOneProductSkuDisplay)getDisplay()).getDynamicFormDisplay());
          ProductListDataSourceFactory.createDataSource("oneToOneProductSearchDS",new AsyncCallbackAdapter(){
            public void onSuccess(            DataSource result){
              final ListGridDataSource productSearchDataSource=(ListGridDataSource)result;
              productSearchDataSource.resetFieldVisibility("name","description","model","manufacturer","activeStartDate","activeEndDate");
              productSearchView=new EntitySearchDialog(productSearchDataSource);
              CrossSaleProductListDataSourceFactory.createDataSource("crossSaleProductsDS",new AsyncCallbackAdapter(){
                public void onSuccess(                DataSource result){
                  crossSalePresenter=new EditableJoinStructurePresenter(((OneToOneProductSkuDisplay)getDisplay()).getCrossSaleDisplay(),productSearchView,"Product Search","Set Promotion Message","promotionMessage");
                  crossSalePresenter.setDataSource((ListGridDataSource)result,new String[]{"name","promotionMessage"},new Boolean[]{false,true});
                  UpSaleProductListDataSourceFactory.createDataSource("upSaleProductsDS",new AsyncCallbackAdapter(){
                    public void onSuccess(                    DataSource result){
                      upSalePresenter=new EditableJoinStructurePresenter(((OneToOneProductSkuDisplay)getDisplay()).getUpSaleDisplay(),productSearchView,"Product Search","Set Promotion Message","promotionMessage");
                      upSalePresenter.setDataSource((ListGridDataSource)result,new String[]{"name","promotionMessage"},new Boolean[]{false,true});
                      ProductMediaMapDataSourceFactory.createDataSource("productMediaMapDS",getMediaMapKeys(),((OneToOneProductSkuDisplay)getDisplay()).getMediaDisplay().getGrid(),new AsyncCallbackAdapter(){
                        public void onSuccess(                        DataSource result){
                          Map<String,Object> initialValues=new HashMap<String,Object>();
                          initialValues.put("name","Untitled");
                          initialValues.put("label","untitled");
                          mediaPresenter=new MapStructurePresenter(((OneToOneProductSkuDisplay)getDisplay()).getMediaDisplay(),getMediaEntityView(),"Add New Media",initialValues);
                          mediaPresenter.setDataSource((ListGridDataSource)result,new String[]{"key","name","url","label"},new Boolean[]{true,true,true,true});
                          ProductAttributeDataSourceFactory.createDataSource("productAttributeDS",new AsyncCallbackAdapter(){
                            public void onSuccess(                            DataSource result){
                              Map<String,Object> initialValues=new HashMap<String,Object>();
                              initialValues.put("name","Untitled");
                              productAttributePresenter=new CreateBasedListStructurePresenter(((OneToOneProductSkuDisplay)getDisplay()).getAttributesDisplay(),"Add New Attribute",initialValues);
                              productAttributePresenter.setDataSource((ListGridDataSource)result,new String[]{"name","value","searchable"},new Boolean[]{true,true,true});
                              ParentCategoryListDataSourceFactory.createDataSource("parentCategoriesDS",new AsyncCallbackAdapter(){
                                public void onSuccess(                                DataSource result){
                                  parentCategoriesPresenter=new AllParentCategoriesPresenter(((OneToOneProductSkuDisplay)getDisplay()).getAllCategoriesDisplay());
                                  ((AllParentCategoriesPresenter)parentCategoriesPresenter).setDataSource((ListGridDataSource)result,new String[]{"name","urlKey"},new Boolean[]{false,false});
                                  OneToOneProductSkuPresenter.super.go(container);
                                  Main.NON_MODAL_PROGRESS.stopProgress();
                                }
                              }
);
                            }
                          }
);
                        }
                      }
);
                    }
                  }
);
                }
              }
);
            }
          }
);
        }
      }
);
    }
  }
);
}

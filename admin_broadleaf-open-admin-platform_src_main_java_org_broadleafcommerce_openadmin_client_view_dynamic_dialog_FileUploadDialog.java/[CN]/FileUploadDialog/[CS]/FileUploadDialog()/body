{
  setIsModal(true);
  setShowModalMask(true);
  setShowMinimizeButton(false);
  setAutoSize(true);
  setCanDragResize(true);
  setOverflow(Overflow.HIDDEN);
  VStack stack=new VStack();
  stack.setWidth(630);
  stack.setHeight(300);
  dynamicForm=new DynamicForm();
  dynamicForm.setEncoding(Encoding.MULTIPART);
  dynamicForm.setTarget("hidden_frame");
  dynamicForm.setPadding(10);
  dynamicForm.setHeight100();
  stack.addMember(dynamicForm);
  cancelButton=new IButton("Cancel");
  cancelButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      hide();
    }
  }
);
  saveButton=new IButton("Upload");
  saveButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (dynamicForm.validate()) {
        String callbackName=JavaScriptMethodHelper.registerCallbackFunction(new JavaScriptMethodCallback(){
          public void execute(          String jsObj){
            try {
              JSONObject entityJs=JSONParser.parse(jsObj).isObject();
              JSONValue errorJs=entityJs.get("error");
              if (errorJs != null) {
                SC.warn(errorJs.isString().stringValue());
                java.util.logging.Logger.getLogger(getClass().toString()).warning(errorJs.isString().stringValue());
                ;
              }
 else {
                Entity entity=new Entity();
                String type=entityJs.get("type").isString().stringValue();
                entity.setType(new String[]{type});
                JSONArray propArrayJs=entityJs.get("properties").isArray();
                int length=propArrayJs.size();
                Property[] props=new Property[length];
                for (int j=0; j <= length - 1; j++) {
                  JSONObject propJs=propArrayJs.get(j).isObject();
                  Property property=new Property();
                  property.setName(propJs.get("name").isString().stringValue());
                  property.setValue(propJs.get("value").isString().stringValue());
                  props[j]=property;
                }
                entity.setProperties(props);
                DataSourceModule module=((DynamicEntityDataSource)dynamicForm.getDataSource()).getCompatibleModule(OperationType.ENTITY);
                Record record=module.buildRecord(entity,false);
                if (handler != null) {
                  handler.onItemEdited(new ItemEdited((ListGridRecord)record,dynamicForm.getDataSource()));
                }
              }
            }
 catch (            Exception e) {
              SC.warn(e.getMessage());
              java.util.logging.Logger.getLogger(getClass().toString()).log(Level.SEVERE,e.getMessage(),e);
            }
 finally {
              uploadProgressWindow.stopProgress();
              Timer timer=new Timer(){
                public void run(){
                  uploadProgressWindow.finalizeProgress();
                  hide();
                }
              }
;
              timer.schedule(500);
            }
          }
        }
);
        ((UploadStatusProgress)uploadProgressWindow.getProgressBar()).setCallbackName(callbackName);
        uploadProgressWindow.startProgress();
        dynamicForm.setAction("cms.upload.service?callbackName=" + callbackName);
        dynamicForm.getField("callbackName").setValue(callbackName);
        dynamicForm.submitForm();
        saveButton.disable();
        cancelButton.disable();
      }
    }
  }
);
  VLayout vLayout=new VLayout();
  vLayout.setAlign(VerticalAlignment.BOTTOM);
  HLayout hLayout=new HLayout(10);
  hLayout.setAlign(Alignment.CENTER);
  hLayout.addMember(saveButton);
  hLayout.addMember(cancelButton);
  hLayout.setLayoutTopMargin(20);
  hLayout.setLayoutBottomMargin(20);
  vLayout.addMember(hLayout);
  stack.addMember(vLayout);
  addItem(stack);
  NamedFrame frame=new NamedFrame("hidden_frame");
  frame.setWidth("1");
  frame.setHeight("1");
  frame.setVisible(false);
  addItem(frame);
}

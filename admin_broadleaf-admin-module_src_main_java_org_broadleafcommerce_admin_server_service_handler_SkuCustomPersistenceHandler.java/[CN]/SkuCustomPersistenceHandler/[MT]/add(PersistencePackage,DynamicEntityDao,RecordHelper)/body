{
  Entity entity=persistencePackage.getEntity();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Sku adminInstance=(Sku)Class.forName(entity.getType()[0]).newInstance();
    Map<String,FieldMetadata> adminProperties=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    adminInstance=(Sku)helper.createPopulatedInstance(adminInstance,entity,adminProperties,false);
    Entity errorEntity=validateUniqueProductOptionValueCombination(adminInstance.getProduct(),getProductOptionProperties(entity),null);
    if (errorEntity != null) {
      return errorEntity;
    }
    adminInstance=(Sku)dynamicEntityDao.persist(adminInstance);
    associateProductOptionValuesToSku(entity,adminInstance,dynamicEntityDao);
    adminInstance=(Sku)dynamicEntityDao.merge(adminInstance);
    Entity result=helper.getRecord(adminProperties,adminInstance,null,null);
    for (    Property property : getProductOptionProperties(entity)) {
      result.addProperty(property);
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform fetch for entity: " + Sku.class.getName(),e);
  }
}

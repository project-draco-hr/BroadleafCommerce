{
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> properties=null;
    boolean isCache=useCache();
    String key=persistencePackage.getCeilingEntityFullyQualifiedClassname();
    if (persistencePackage.getCustomCriteria() != null && persistencePackage.getCustomCriteria().length > 0) {
      key+=persistencePackage.getCustomCriteria()[0];
    }
    if (isCache) {
      properties=METADATA_CACHE.get(key);
    }
    if (properties == null) {
      properties=helper.getSimpleMergedProperties(SkuImpl.class.getName(),persistencePerspective);
      if (persistencePackage.getCustomCriteria() == null || persistencePackage.getCustomCriteria().length == 0) {
        List<ProductOption> options=catalogService.readAllProductOptions();
        int order=0;
        for (        ProductOption option : options) {
          FieldMetadata md=createIndividualOptionField(option,order);
          if (md != null) {
            properties.put("productOption" + option.getId(),md);
          }
        }
      }
 else {
        try {
          Long productId=Long.parseLong(persistencePackage.getCustomCriteria()[0]);
          Product product=catalogService.findProductById(productId);
          for (          ProductOption option : product.getProductOptions()) {
            FieldMetadata md=createIndividualOptionField(option,0);
            if (md != null) {
              properties.put("productOption" + option.getId(),md);
            }
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      properties.put(CONSOLIDATED_PRODUCT_OPTIONS_FIELD_NAME,createConsolidatedOptionField(SkuImpl.class));
    }
    if (isCache) {
      METADATA_CACHE.put(key,properties);
    }
    allMergedProperties.put(MergedPropertyType.PRIMARY,properties);
    adornedPersistenceModule.setPersistenceManager((PersistenceManager)helper);
    adornedPersistenceModule.updateMergedProperties(persistencePackage,allMergedProperties);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(SkuImpl.class);
    for (    Map.Entry<MergedPropertyType,Map<String,FieldMetadata>> entry : allMergedProperties.entrySet()) {
      filterOutProductMetadata(entry.getValue());
    }
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    DynamicResultSet results=new DynamicResultSet(mergedMetadata,null,null);
    return results;
  }
 catch (  Exception e) {
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    throw ex;
  }
}

{
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> properties=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    List<ProductOption> options=catalogService.readAllProductOptions();
    int order=0;
    for (    ProductOption option : options) {
      BasicFieldMetadata metadata=new BasicFieldMetadata();
      metadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
      metadata.setMutable(true);
      metadata.setInheritedFromType(SkuImpl.class.getName());
      metadata.setAvailableToTypes(new String[]{SkuImpl.class.getName()});
      metadata.setForeignKeyCollection(false);
      metadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
      String[][] optionValues=new String[option.getAllowedValues().size()][2];
      for (int i=0; i < option.getAllowedValues().size(); i++) {
        ProductOptionValue value=option.getAllowedValues().get(i);
        optionValues[i][0]=value.getId().toString();
        optionValues[i][1]=value.getAttributeValue();
      }
      metadata.setEnumerationValues(optionValues);
      metadata.setName(PRODUCT_OPTION_FIELD_PREFIX + option.getId());
      metadata.setFriendlyName(option.getLabel());
      metadata.setGroup("");
      metadata.setOrder(order);
      metadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
      metadata.setProminent(true);
      metadata.setBroadleafEnumeration("");
      metadata.setReadOnly(false);
      metadata.setRequiredOverride(BooleanUtils.isFalse(option.getRequired()));
      properties.put("productOption" + option.getId(),metadata);
    }
    allMergedProperties.put(MergedPropertyType.PRIMARY,properties);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Sku.class);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    DynamicResultSet results=new DynamicResultSet(mergedMetadata,null,null);
    return results;
  }
 catch (  Exception e) {
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    LOG.error("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),ex);
    throw ex;
  }
}

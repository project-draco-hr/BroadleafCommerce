{
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> properties=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    List<ProductOption> options=catalogService.readAllProductOptions();
    int order=0;
    for (    ProductOption option : options) {
      properties.put("productOption" + option.getId(),createIndividualOptionField(option,order));
    }
    properties.put(CONSOLIDATED_PRODUCT_OPTIONS_FIELD_NAME,createConsolidatedOptionField(SkuImpl.class));
    allMergedProperties.put(MergedPropertyType.PRIMARY,properties);
    adornedPersistenceModule.setPersistenceManager((PersistenceManager)helper);
    adornedPersistenceModule.updateMergedProperties(persistencePackage,allMergedProperties);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Sku.class);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    DynamicResultSet results=new DynamicResultSet(mergedMetadata,null,null);
    return results;
  }
 catch (  Exception e) {
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    LOG.error("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),ex);
    throw ex;
  }
}

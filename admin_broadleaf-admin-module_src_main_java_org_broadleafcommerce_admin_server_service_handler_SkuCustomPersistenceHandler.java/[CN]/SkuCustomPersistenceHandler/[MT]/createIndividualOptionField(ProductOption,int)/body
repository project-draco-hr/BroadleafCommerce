{
  BasicFieldMetadata metadata=new BasicFieldMetadata();
  List<ProductOptionValue> allowedValues=option.getAllowedValues();
  if (CollectionUtils.isNotEmpty(allowedValues)) {
    metadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
    metadata.setMutable(true);
    metadata.setInheritedFromType(SkuImpl.class.getName());
    Class<?>[] classes=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(SkuImpl.class);
    metadata.setAvailableToTypes(convertToStrings(classes));
    metadata.setForeignKeyCollection(false);
    metadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    String[][] optionValues=new String[allowedValues.size()][2];
    for (int i=0; i < allowedValues.size(); i++) {
      ProductOptionValue value=option.getAllowedValues().get(i);
      optionValues[i][0]=value.getId().toString();
      optionValues[i][1]=value.getAttributeValue();
    }
    metadata.setEnumerationValues(optionValues);
    metadata.setName(PRODUCT_OPTION_FIELD_PREFIX + option.getId());
    metadata.setFriendlyName(option.getLabel());
    metadata.setGroup("productOption_group");
    metadata.setGroupOrder(-1);
    metadata.setOrder(order);
    metadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
    metadata.setProminent(false);
    metadata.setVisibility(VisibilityEnum.FORM_EXPLICITLY_SHOWN);
    metadata.setBroadleafEnumeration("");
    metadata.setReadOnly(false);
    metadata.setRequiredOverride(BooleanUtils.isFalse(option.getRequired()));
    return metadata;
  }
  return null;
}

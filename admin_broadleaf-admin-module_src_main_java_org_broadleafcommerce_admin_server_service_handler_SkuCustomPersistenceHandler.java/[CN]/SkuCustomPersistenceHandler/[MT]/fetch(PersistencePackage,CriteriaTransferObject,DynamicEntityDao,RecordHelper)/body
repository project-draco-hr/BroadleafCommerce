{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,ceilingEntityFullyQualifiedClassname,originalProps);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,ceilingEntityFullyQualifiedClassname);
    applyProductOptionValueCriteria(queryCriteria,cto,persistencePackage);
    applyAdditionalFetchCriteria(queryCriteria,cto,persistencePackage);
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(persistencePackage.getCeilingEntityFullyQualifiedClassname()));
    List<Sku> result=new ArrayList<Sku>();
    int additionalSkusAdded=0;
    int skusRemoved=0;
    for (    Serializable serialSku : records) {
      Sku sku=(Sku)serialSku;
      if (sku.getProduct().getDefaultSku().getId().equals(sku.getId())) {
        if (CollectionUtils.isNotEmpty(sku.getProduct().getAdditionalSkus())) {
          if (sku.getProduct().getCanSellWithoutOptions()) {
            result.add(sku);
          }
 else {
            skusRemoved++;
          }
        }
 else {
          result.add(sku);
        }
        if (CollectionUtils.isNotEmpty(cto.getPropertyIdSet())) {
          if (CollectionUtils.isNotEmpty(sku.getProduct().getAdditionalSkus())) {
            result.addAll(sku.getProduct().getAdditionalSkus());
            additionalSkusAdded+=sku.getProduct().getAdditionalSkus().size();
          }
        }
      }
 else {
        result.add(sku);
      }
    }
    Entity[] payload=helper.getRecords(originalProps,result);
    int totalRecords=helper.getTotalRecords(persistencePackage,cto,ctoConverter) + additionalSkusAdded - skusRemoved;
    if (result.size() == 0) {
      totalRecords=cto.getFirstResult() - 1;
    }
    ClassMetadata metadata=new ClassMetadata();
    if (cto.get("product").getFilterValues().length > 0) {
      Long productId=Long.parseLong(cto.get("product").getFilterValues()[0]);
      Product product=catalogService.findProductById(productId);
      List<Property> properties=new ArrayList<Property>();
      for (      ProductOption option : product.getProductOptions()) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + option.getId());
        properties.add(optionProperty);
      }
      metadata.setProperties(properties.toArray(new Property[0]));
    }
    for (int i=0; i < result.size(); i++) {
      Sku sku=result.get(i);
      Entity entity=payload[i];
      for (      Property property : entity.getProperties()) {
        if (StringUtils.isEmpty(property.getValue())) {
          String propertyName=property.getName();
          String strValue=SkuCustomPersistenceHandler.getStringValueFromGetter(propertyName,sku,helper);
          property.setValue(strValue);
        }
      }
      List<ProductOptionValue> optionValues=sku.getProductOptionValues();
      for (      ProductOptionValue value : optionValues) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + value.getProductOption().getId());
        optionProperty.setValue(value.getId().toString());
        entity.addProperty(optionProperty);
      }
      if (CollectionUtils.isNotEmpty(optionValues)) {
        entity.addProperty(getConsolidatedOptionProperty(optionValues));
      }
    }
    return new DynamicResultSet(metadata,payload,totalRecords);
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

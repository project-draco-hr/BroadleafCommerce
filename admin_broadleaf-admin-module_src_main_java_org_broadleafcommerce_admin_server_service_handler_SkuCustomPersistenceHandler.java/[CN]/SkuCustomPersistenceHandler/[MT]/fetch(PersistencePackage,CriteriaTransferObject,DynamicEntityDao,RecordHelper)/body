{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,ceilingEntityFullyQualifiedClassname,originalProps);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,ceilingEntityFullyQualifiedClassname);
    applyProductOptionValueCriteria(queryCriteria,cto,persistencePackage);
    applyAdditionalFetchCriteria(queryCriteria,cto,persistencePackage);
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(persistencePackage.getCeilingEntityFullyQualifiedClassname()));
    Entity[] payload=helper.getRecords(originalProps,records);
    int totalRecords=helper.getTotalRecords(persistencePackage,cto,ctoConverter);
    ClassMetadata metadata=new ClassMetadata();
    if (cto.get("product").getFilterValues().length > 0) {
      Long productId=Long.parseLong(cto.get("product").getFilterValues()[0]);
      Product product=catalogService.findProductById(productId);
      List<Property> properties=new ArrayList<Property>();
      for (      ProductOption option : product.getProductOptions()) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + option.getId());
        properties.add(optionProperty);
      }
      metadata.setProperties(properties.toArray(new Property[0]));
    }
    for (int i=0; i < records.size(); i++) {
      Sku sku=(Sku)records.get(i);
      Entity entity=payload[i];
      for (      Property property : entity.getProperties()) {
        if (StringUtils.isEmpty(property.getValue())) {
          String propertyName=property.getName();
          if (propertyName.contains(".")) {
            StringTokenizer tokens=new StringTokenizer(propertyName,".");
            propertyName=tokens.nextToken();
          }
          Object value=PropertyUtils.getProperty(sku,propertyName);
          String strVal;
          if (value == null) {
            strVal=null;
          }
 else {
            if (Date.class.isAssignableFrom(value.getClass())) {
              strVal=helper.getDateFormatter().format((Date)value);
            }
 else             if (Timestamp.class.isAssignableFrom(value.getClass())) {
              strVal=helper.getDateFormatter().format(new Date(((Timestamp)value).getTime()));
            }
 else             if (Calendar.class.isAssignableFrom(value.getClass())) {
              strVal=helper.getDateFormatter().format(((Calendar)value).getTime());
            }
 else             if (Double.class.isAssignableFrom(value.getClass())) {
              strVal=helper.getDecimalFormatter().format(value);
            }
 else             if (BigDecimal.class.isAssignableFrom(value.getClass())) {
              strVal=helper.getDecimalFormatter().format(((BigDecimal)value).doubleValue());
            }
 else {
              strVal=value.toString();
            }
          }
          property.setValue(strVal);
        }
      }
      List<ProductOptionValue> optionValues=sku.getProductOptionValues();
      for (      ProductOptionValue value : optionValues) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + value.getProductOption().getId());
        optionProperty.setValue(value.getId().toString());
        entity.addProperty(optionProperty);
      }
    }
    return new DynamicResultSet(metadata,payload,totalRecords);
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

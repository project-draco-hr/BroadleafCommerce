{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    List<FilterMapping> filterMappings=helper.getFilterMappings(persistencePerspective,cto,ceilingEntityFullyQualifiedClassname,originalProps,skuRestrictionFactory);
    applyProductOptionValueCriteria(filterMappings,cto,persistencePackage,null);
    applyAdditionalFetchCriteria(filterMappings,cto,persistencePackage);
    List<Serializable> records=helper.getPersistentRecords(persistencePackage.getCeilingEntityFullyQualifiedClassname(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    Entity[] payload=helper.getRecords(originalProps,records);
    int totalRecords=helper.getTotalRecords(persistencePackage.getCeilingEntityFullyQualifiedClassname(),filterMappings);
    ClassMetadata metadata=new ClassMetadata();
    if (cto.get("product").getFilterValues().size() > 0) {
      Long productId=Long.parseLong(cto.get("product").getFilterValues().get(0));
      Product product=catalogService.findProductById(productId);
      List<Property> properties=new ArrayList<Property>();
      for (      ProductOption option : product.getProductOptions()) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + option.getId());
        properties.add(optionProperty);
      }
      metadata.setProperties(properties.toArray(new Property[0]));
    }
    for (int i=0; i < records.size(); i++) {
      Sku sku=(Sku)records.get(i);
      Entity entity=payload[i];
      List<ProductOptionValue> optionValues=sku.getProductOptionValues();
      for (      ProductOptionValue value : optionValues) {
        Property optionProperty=new Property();
        optionProperty.setName(PRODUCT_OPTION_FIELD_PREFIX + value.getProductOption().getId());
        optionProperty.setValue(value.getId().toString());
        entity.addProperty(optionProperty);
      }
      if (CollectionUtils.isNotEmpty(optionValues)) {
        entity.addProperty(getConsolidatedOptionProperty(optionValues));
      }
 else {
        entity.addProperty(getBlankConsolidatedOptionProperty());
      }
    }
    return new DynamicResultSet(metadata,payload,totalRecords);
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

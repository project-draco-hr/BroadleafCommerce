{
  CartOperationRequest request=context.getSeedData();
  OrderItemRequestDTO orderItemRequestDTO=request.getItemRequest();
  if (orderItemRequestDTO.getQuantity() == null || orderItemRequestDTO.getQuantity() == 0) {
    context.stopProcess();
    return null;
  }
  if (orderItemRequestDTO.getQuantity() < 0) {
    throw new IllegalArgumentException("Quantity cannot be negative");
  }
  if (request.getOrder() == null) {
    throw new IllegalArgumentException("Order is required when adding item to order");
  }
  Product product=null;
  if (orderItemRequestDTO.getProductId() != null) {
    product=catalogService.findProductById(orderItemRequestDTO.getProductId());
    if (product == null) {
      throw new IllegalArgumentException("Product was specified but no matching product was found for productId " + orderItemRequestDTO.getProductId());
    }
  }
  Sku sku=determineSku(product,orderItemRequestDTO.getSkuId(),orderItemRequestDTO.getItemAttributes());
  if (sku == null && !(orderItemRequestDTO instanceof NonDiscreteOrderItemRequestDTO)) {
    StringBuilder sb=new StringBuilder();
    for (    Entry<String,String> entry : orderItemRequestDTO.getItemAttributes().entrySet()) {
      sb.append(entry.toString());
    }
    throw new IllegalArgumentException("Could not find SKU for :" + " productId: " + (product == null ? "null" : product.getId()) + " skuId: "+ orderItemRequestDTO.getSkuId()+ " attributes: "+ sb.toString());
  }
 else   if (sku == null) {
    NonDiscreteOrderItemRequestDTO ndr=(NonDiscreteOrderItemRequestDTO)orderItemRequestDTO;
    if (StringUtils.isBlank(ndr.getItemName())) {
      throw new IllegalArgumentException("Item name is required for non discrete order item add requests");
    }
    if (ndr.getOverrideRetailPrice() == null && ndr.getOverrideSalePrice() == null) {
      throw new IllegalArgumentException("At least one override price is required for non discrete order item add requests");
    }
  }
 else   if (!sku.isActive()) {
    throw new IllegalArgumentException("The requested skuId of " + sku.getId() + " is no longer active");
  }
 else {
    request.getItemRequest().setSkuId(sku.getId());
  }
  if (!(orderItemRequestDTO instanceof NonDiscreteOrderItemRequestDTO) && request.getOrder().getCurrency() != null && sku.getCurrency() != null && !request.getOrder().getCurrency().equals(sku.getCurrency())) {
    throw new IllegalArgumentException("Cannot have items with differing currencies in one cart");
  }
  return context;
}

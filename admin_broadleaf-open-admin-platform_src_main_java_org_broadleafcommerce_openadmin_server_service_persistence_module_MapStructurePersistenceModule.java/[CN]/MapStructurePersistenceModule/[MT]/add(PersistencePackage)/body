{
  String[] customCriteria=persistencePackage.getCustomCriteria();
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for add types other than BASIC");
  }
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  Entity entity=persistencePackage.getEntity();
  MapStructure mapStructure=(MapStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
  if (!mapStructure.getMutable()) {
    throw new SecurityServiceException("Field not mutable");
  }
  try {
    Map<String,FieldMetadata> ceilingMergedProperties=getSimpleMergedProperties(entity.getType()[0],persistencePerspective);
    String mapKey=entity.findProperty(mapStructure.getKeyPropertyName()).getValue();
    if (StringUtils.isEmpty(mapKey)) {
      entity.addValidationError(mapStructure.getKeyPropertyName(),RequiredPropertyValidator.ERROR_MESSAGE);
      LOG.debug("No key property passed in for map, failing validation");
    }
    if (ceilingMergedProperties.containsKey(mapStructure.getMapProperty() + FieldManager.MAPFIELDSEPARATOR + mapKey)) {
      throw new ServiceException("\"" + mapKey + "\" is a reserved property name.");
    }
    Serializable instance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(entity.getType()[0]),Long.valueOf(entity.findProperty("symbolicId").getValue()));
    Assert.isTrue(instance != null,"Entity not found");
    FieldManager fieldManager=getFieldManager();
    Map map=(Map)fieldManager.getFieldValue(instance,mapStructure.getMapProperty());
    PersistentClass persistentClass=persistenceManager.getDynamicEntityDao().getPersistentClass(mapStructure.getValueClassName());
    Map<String,FieldMetadata> valueUnfilteredMergedProperties;
    if (persistentClass == null) {
      valueUnfilteredMergedProperties=persistenceManager.getDynamicEntityDao().getPropertiesForPrimitiveClass(((SimpleValueMapStructure)mapStructure).getValuePropertyName(),((SimpleValueMapStructure)mapStructure).getValuePropertyFriendlyName(),Class.forName(mapStructure.getValueClassName()),Class.forName(entity.getType()[0]),MergedPropertyType.MAPSTRUCTUREVALUE);
    }
 else {
      valueUnfilteredMergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(mapStructure.getValueClassName(),new Class[]{Class.forName(mapStructure.getValueClassName())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.MAPSTRUCTUREVALUE,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    }
    Map<String,FieldMetadata> valueMergedProperties=filterOutCollectionMetadata(valueUnfilteredMergedProperties);
    if (persistentClass != null) {
      Serializable valueInstance=(Serializable)Class.forName(mapStructure.getValueClassName()).newInstance();
      valueInstance=createPopulatedInstance(valueInstance,entity,valueMergedProperties,false);
      if (valueInstance instanceof ValueAssignable) {
        ((ValueAssignable)valueInstance).setName(entity.findProperty(mapStructure.getKeyPropertyName()).getValue());
      }
      if (mapStructure.getManyToField() != null) {
        fieldManager.setFieldValue(valueInstance,mapStructure.getManyToField(),instance);
      }
      valueInstance=persistenceManager.getDynamicEntityDao().persist(valueInstance);
      map.put(mapKey,valueInstance);
    }
 else {
      String propertyName=((SimpleValueMapStructure)mapStructure).getValuePropertyName();
      String value=entity.findProperty(propertyName).getValue();
      Object convertedPrimitive=convertPrimitiveBasedOnType(propertyName,value,valueMergedProperties);
      map.put(mapKey,convertedPrimitive);
    }
    Entity[] responses=getMapRecords(instance,mapStructure,ceilingMergedProperties,valueMergedProperties,entity.findProperty("symbolicId"));
    for (    Entity response : responses) {
      if (response.findProperty(mapStructure.getKeyPropertyName()).getValue().equals(persistencePackage.getEntity().findProperty(mapStructure.getKeyPropertyName()).getValue())) {
        return response;
      }
    }
    return responses[0];
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

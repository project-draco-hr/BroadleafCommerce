{
  FieldManager fieldManager=getFieldManager();
  Map map=null;
  try {
    map=(Map)fieldManager.getFieldValue(record,mapStructure.getMapProperty());
  }
 catch (  FieldNotAvailableException e) {
    throw new IllegalArgumentException(e);
  }
  Entity[] entities=new Entity[map.size()];
  int j=0;
  for (  Object key : map.keySet()) {
    Entity entityItem=new Entity();
    entityItem.setType(new String[]{record.getClass().getName()});
    entities[j]=entityItem;
    List<Property> props=new ArrayList<Property>();
    Property propertyItem=new Property();
    propertyItem.setName(mapStructure.getKeyPropertyName());
    props.add(propertyItem);
    String strVal;
    if (Date.class.isAssignableFrom(key.getClass())) {
      strVal=dateFormat.format((Date)key);
    }
 else     if (Timestamp.class.isAssignableFrom(key.getClass())) {
      strVal=dateFormat.format(new Date(((Timestamp)key).getTime()));
    }
 else     if (Calendar.class.isAssignableFrom(key.getClass())) {
      strVal=dateFormat.format(((Calendar)key).getTime());
    }
 else     if (Double.class.isAssignableFrom(key.getClass())) {
      strVal=decimalFormat.format((Double)key);
    }
 else     if (BigDecimal.class.isAssignableFrom(key.getClass())) {
      strVal=decimalFormat.format(((BigDecimal)key).doubleValue());
    }
 else {
      strVal=key.toString();
    }
    propertyItem.setValue(strVal);
    PersistentClass persistentClass=persistenceManager.getDynamicEntityDao().getPersistentClass(mapStructure.getValueClassName());
    if (persistentClass == null) {
      Property temp=new Property();
      temp.setName(((SimpleValueMapStructure)mapStructure).getValuePropertyName());
      temp.setValue(String.valueOf(map.get(key)));
      props.add(temp);
    }
 else {
      extractPropertiesFromPersistentEntity(valueMergedProperties,(Serializable)map.get(key),props);
    }
    if (symbolicIdProperty != null) {
      props.add(symbolicIdProperty);
    }
    Property[] properties=new Property[props.size()];
    properties=props.toArray(properties);
    entityItem.setProperties(properties);
    j++;
  }
  return entities;
}

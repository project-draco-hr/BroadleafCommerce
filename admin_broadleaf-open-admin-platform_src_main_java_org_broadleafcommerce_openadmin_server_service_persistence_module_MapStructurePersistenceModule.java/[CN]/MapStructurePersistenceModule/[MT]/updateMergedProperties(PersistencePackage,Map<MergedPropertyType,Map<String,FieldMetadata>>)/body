{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    MapStructure mapStructure=(MapStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
    if (mapStructure != null) {
      PersistentClass persistentClass=persistenceManager.getDynamicEntityDao().getPersistentClass(mapStructure.getKeyClassName());
      Map<String,FieldMetadata> keyMergedProperties;
      if (persistentClass == null) {
        keyMergedProperties=persistenceManager.getDynamicEntityDao().getPropertiesForPrimitiveClass(mapStructure.getKeyPropertyName(),mapStructure.getKeyPropertyFriendlyName(),Class.forName(mapStructure.getKeyClassName()),Class.forName(ceilingEntityFullyQualifiedClassname),MergedPropertyType.MAPSTRUCTUREKEY);
      }
 else {
        keyMergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(mapStructure.getKeyClassName(),new Class[]{Class.forName(mapStructure.getKeyClassName())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.MAPSTRUCTUREKEY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
      }
      allMergedProperties.put(MergedPropertyType.MAPSTRUCTUREKEY,keyMergedProperties);
      persistentClass=persistenceManager.getDynamicEntityDao().getPersistentClass(mapStructure.getValueClassName());
      Map<String,FieldMetadata> valueMergedProperties;
      if (persistentClass == null) {
        valueMergedProperties=persistenceManager.getDynamicEntityDao().getPropertiesForPrimitiveClass(((SimpleValueMapStructure)mapStructure).getValuePropertyName(),((SimpleValueMapStructure)mapStructure).getValuePropertyFriendlyName(),Class.forName(mapStructure.getValueClassName()),Class.forName(ceilingEntityFullyQualifiedClassname),MergedPropertyType.MAPSTRUCTUREVALUE);
      }
 else {
        valueMergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(mapStructure.getValueClassName(),new Class[]{Class.forName(mapStructure.getValueClassName())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.MAPSTRUCTUREVALUE,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
      }
      allMergedProperties.put(MergedPropertyType.MAPSTRUCTUREVALUE,valueMergedProperties);
      Iterator<Map.Entry<String,FieldMetadata>> itr=allMergedProperties.get(MergedPropertyType.PRIMARY).entrySet().iterator();
      while (itr.hasNext()) {
        Map.Entry<String,FieldMetadata> entry=itr.next();
        if (!(entry.getValue() instanceof BasicFieldMetadata) || !SupportedFieldType.ID.equals(((BasicFieldMetadata)entry.getValue()).getFieldType())) {
          itr.remove();
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Problem fetching results for " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to fetch results for " + ceilingEntityFullyQualifiedClassname,e);
  }
}

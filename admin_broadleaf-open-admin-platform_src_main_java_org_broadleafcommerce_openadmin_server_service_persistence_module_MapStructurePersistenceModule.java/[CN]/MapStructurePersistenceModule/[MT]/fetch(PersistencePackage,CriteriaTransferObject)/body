{
  Entity[] payload;
  int totalRecords;
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  if (StringUtils.isEmpty(persistencePackage.getFetchTypeFullyQualifiedClassname())) {
    persistencePackage.setFetchTypeFullyQualifiedClassname(ceilingEntityFullyQualifiedClassname);
  }
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    MapStructure mapStructure=(MapStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
    PersistentClass persistentClass=persistenceManager.getDynamicEntityDao().getPersistentClass(mapStructure.getValueClassName());
    Map<String,FieldMetadata> valueUnfilteredMergedProperties;
    if (persistentClass == null) {
      valueUnfilteredMergedProperties=persistenceManager.getDynamicEntityDao().getPropertiesForPrimitiveClass(((SimpleValueMapStructure)mapStructure).getValuePropertyName(),((SimpleValueMapStructure)mapStructure).getValuePropertyFriendlyName(),Class.forName(mapStructure.getValueClassName()),Class.forName(ceilingEntityFullyQualifiedClassname),MergedPropertyType.MAPSTRUCTUREVALUE);
    }
 else {
      valueUnfilteredMergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(mapStructure.getValueClassName(),new Class[]{Class.forName(mapStructure.getValueClassName())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.MAPSTRUCTUREVALUE,false,new String[]{},new String[]{},null,"");
    }
    Map<String,FieldMetadata> valueMergedProperties=filterOutCollectionMetadata(valueUnfilteredMergedProperties);
    List<FilterMapping> filterMappings=getFilterMappings(persistencePerspective,cto,persistencePackage.getFetchTypeFullyQualifiedClassname(),mergedProperties);
    if (CollectionUtils.isNotEmpty(cto.getAdditionalFilterMappings())) {
      filterMappings.addAll(cto.getAdditionalFilterMappings());
    }
    totalRecords=getTotalRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings);
    if (totalRecords > 1) {
      throw new ServiceException("Queries to retrieve an entity containing a MapStructure must return only 1 entity. Your query returned (" + totalRecords + ") values.");
    }
    List<Serializable> records=getPersistentRecords(persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    Map<String,FieldMetadata> ceilingMergedProperties=getSimpleMergedProperties(ceilingEntityFullyQualifiedClassname,persistencePerspective);
    payload=getMapRecords(records.get(0),mapStructure,ceilingMergedProperties,valueMergedProperties,null);
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to fetch results for " + ceilingEntityFullyQualifiedClassname,e);
  }
  DynamicResultSet results=new DynamicResultSet(null,payload,payload.length);
  return results;
}

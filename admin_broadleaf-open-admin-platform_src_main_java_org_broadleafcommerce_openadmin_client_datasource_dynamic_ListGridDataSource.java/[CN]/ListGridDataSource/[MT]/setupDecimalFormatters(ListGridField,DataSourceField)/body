{
  String fieldType=field.getAttribute("fieldType");
  if (fieldType != null && SupportedFieldType.MONEY.toString().equals(fieldType)) {
    String currencyCodeField=null;
    if (field.getAttribute("currencyCodeField") != null && !field.getAttribute("currencyCodeField").equals("")) {
      currencyCodeField=field.getAttribute("currencyCodeField");
    }
    final String formatCodeField=currencyCodeField;
    gridField.setCellFormatter(new CellFormatter(){
      @Override public String format(      Object value,      ListGridRecord record,      int rowNum,      int colNum){
        if (value == null) {
          return "";
        }
        String formatCodeFieldTemp=formatCodeField;
        if (formatCodeFieldTemp == null) {
          formatCodeFieldTemp=getAttribute("currencyCodeField");
        }
        String currencyCode=null;
        if (formatCodeFieldTemp != null) {
          currencyCode=record.getAttribute(formatCodeFieldTemp);
        }
        if (currencyCode == null) {
          currencyCode=getAttribute("blcCurrencyCode");
        }
        Number formatValue;
        if (value.getClass().getName().equals(String.class.getName())) {
          formatValue=Double.parseDouble((String)value);
        }
 else {
          formatValue=(Number)value;
        }
        try {
          return NumberFormat.getCurrencyFormat(currencyCode).format(formatValue);
        }
 catch (        Exception e) {
          return String.valueOf(value);
        }
      }
    }
);
    gridField.setAttribute("type","localMoneyDecimal");
  }
  if (fieldType != null && SupportedFieldType.DECIMAL.toString().equals(fieldType)) {
    gridField.setAttribute("type","localDecimal");
  }
}

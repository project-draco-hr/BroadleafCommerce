{
  if (fieldNames.length != canEdit.length) {
    throw new IllegalArgumentException("The fieldNames and canEdit array parameters must be of equal length");
  }
  if (fieldNames.length > 0) {
    resetProminenceOnly(fieldNames);
  }
  String[] sortedFieldNames=new String[fieldNames.length];
  for (int j=0; j < fieldNames.length; j++) {
    sortedFieldNames[j]=fieldNames[j];
  }
  Arrays.sort(sortedFieldNames);
  DataSourceField[] fields=getFields();
  ListGridField[] gridFields=new ListGridField[fields.length];
  int j=0;
  List<DataSourceField> prominentFields=new ArrayList<DataSourceField>();
  for (  DataSourceField field : fields) {
    if (field.getAttributeAsBoolean("prominent") && !field.getAttributeAsBoolean("permanentlyHidden")) {
      prominentFields.add(field);
    }
  }
  int availableSlots=fieldNames.length == 0 ? 4 : fieldNames.length;
  for (  DataSourceField field : prominentFields) {
    String columnWidth=field.getAttribute("columnWidth");
    gridFields[j]=new ListGridField(field.getName(),field.getTitle(),j == 0 ? 200 : 150);
    if (FieldType.DATE == field.getType() || FieldType.DATETIME == field.getType()) {
      gridFields[j].setEditorType(new MiniDateRangeItem());
    }
    if (j == 0) {
      if (fieldNames == null || fieldNames.length == 0) {
      }
    }
    gridFields[j].setHidden(false);
    if (columnWidth != null) {
      gridFields[j].setWidth(columnWidth);
    }
 else {
      gridFields[j].setWidth("*");
    }
    int pos=Arrays.binarySearch(sortedFieldNames,field.getName());
    if (pos >= 0) {
      gridFields[j].setCanEdit(canEdit[pos]);
    }
    setupDecimalFormatters(gridFields[j],field);
    j++;
    availableSlots--;
  }
  for (  DataSourceField field : fields) {
    if (!prominentFields.contains(field)) {
      gridFields[j]=new ListGridField(field.getName(),field.getTitle(),j == 0 ? 200 : 150);
      if (FieldType.DATE == field.getType() || FieldType.DATETIME == field.getType()) {
        gridFields[j].setEditorType(new MiniDateRangeItem());
      }
      if (field.getAttributeAsBoolean("permanentlyHidden")) {
        gridFields[j].setHidden(true);
        gridFields[j].setCanHide(false);
      }
 else       if (field.getAttributeAsBoolean("hidden") || field.getAttributeAsBoolean("excluded")) {
        gridFields[j].setHidden(true);
      }
 else       if (availableSlots <= 0) {
        gridFields[j].setHidden(true);
      }
 else {
        if (j == 0) {
          if (fieldNames == null || fieldNames.length == 0) {
          }
        }
        String columnWidth=field.getAttribute("columnWidth");
        if (columnWidth != null) {
          gridFields[j].setWidth(columnWidth);
        }
 else {
          gridFields[j].setWidth("*");
        }
        int pos=Arrays.binarySearch(sortedFieldNames,field.getName());
        if (pos >= 0) {
          gridFields[j].setCanEdit(canEdit[pos]);
        }
        prominentFields.add(field);
        availableSlots--;
      }
      setupDecimalFormatters(gridFields[j],field);
      j++;
    }
  }
  ((ListGrid)getAssociatedGrid()).setFields(gridFields);
  if (fieldNames != null && fieldNames.length > 0) {
    int pos;
    if (((ListGrid)getAssociatedGrid()).getCanExpandRecords() != null && ((ListGrid)getAssociatedGrid()).getCanExpandRecords()) {
      pos=1;
    }
 else {
      pos=0;
    }
    for (    String fieldName : fieldNames) {
      int originalPos=((ListGrid)getAssociatedGrid()).getFieldNum(fieldName);
      if (pos != originalPos) {
        ((ListGrid)getAssociatedGrid()).reorderField(originalPos,pos);
      }
      pos++;
    }
  }
 else {
    fieldNames=new String[gridFields.length];
    for (int k=0; k < gridFields.length; k++) {
      fieldNames[k]=gridFields[k].getName();
    }
  }
  getAssociatedGrid().setHilites(hilites);
  return fieldNames;
}

{
  String convertedClassName=className.replace('/','.');
  if (isIgnored(convertedClassName)) {
    return null;
  }
  try {
    ClassFile classFile=new ClassFile(new DataInputStream(new ByteArrayInputStream(classfileBuffer)));
    List<?> attributes=classFile.getAttributes();
    Iterator<?> itr=attributes.iterator();
    check: {
      while (itr.hasNext()) {
        Object object=itr.next();
        if (AnnotationsAttribute.class.isAssignableFrom(object.getClass())) {
          boolean containsTypeLevelAnnotation=containsTypeLevelPersistenceAnnotation(((AnnotationsAttribute)object).getAnnotations());
          if (containsTypeLevelAnnotation) {
            LOG.debug("Marking " + convertedClassName + " as transformed");
            transformedClassNames.add(convertedClassName);
            break check;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error(e);
    throw new IllegalClassFormatException("Unable to mark " + convertedClassName + " as transformed.");
  }
  return null;
}

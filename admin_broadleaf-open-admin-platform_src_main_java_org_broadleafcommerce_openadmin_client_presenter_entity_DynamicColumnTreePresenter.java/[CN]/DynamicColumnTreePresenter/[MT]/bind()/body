{
  formPresenter.bind();
  addClickHandlerRegistration=display.getListDisplay().getAddButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        addClicked();
      }
    }
  }
);
  removeClickHandlerRegistration=display.getListDisplay().getRemoveButton().addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        removeClicked();
      }
    }
  }
);
  selectionChangedHandlerRegistration=display.getListDisplay().getGrid().addNodeSelectedHandler(new NodeSelectedHandler(){
    @Override public void onNodeSelected(    NodeSelectedEvent event){
      ListGridRecord selectedRecord=event.getNode();
      if (!selectedRecord.equals(lastSelectedRecord)) {
        lastSelectedRecord=selectedRecord;
        if (selectedRecord.getAttributeAsStringArray("_type") == null) {
          formPresenter.disable();
          display.getListDisplay().getRemoveButton().disable();
        }
 else {
          formPresenter.setStartState();
          ((DynamicEntityDataSource)display.getListDisplay().getGrid().getDataSource()).resetPermanentFieldVisibilityBasedOnType(selectedRecord.getAttributeAsStringArray("_type"));
          display.getDynamicFormDisplay().getFormOnlyDisplay().buildFields(display.getListDisplay().getGrid().getDataSource(),true,true,false,selectedRecord);
          display.getDynamicFormDisplay().getFormOnlyDisplay().getForm().editRecord(selectedRecord);
          display.getListDisplay().getRemoveButton().enable();
        }
        changeSelection(selectedRecord);
      }
    }
  }
);
  entityTypeChangedHandlerRegistration=display.getListDisplay().getEntityType().addChangedHandler(new ChangedHandler(){
    public void onChanged(    ChangedEvent event){
      ((DynamicEntityDataSource)display.getListDisplay().getGrid().getDataSource()).setDefaultNewEntityFullyQualifiedClassname((String)event.getItem().getValue());
    }
  }
);
}

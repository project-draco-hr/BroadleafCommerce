{
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> properties=helper.getSimpleMergedProperties(Sku.class.getName(),persistencePerspective);
    BasicFieldMetadata fieldMetadata=new BasicFieldMetadata();
    fieldMetadata.setFieldType(SupportedFieldType.STRING);
    fieldMetadata.setMutable(true);
    fieldMetadata.setInheritedFromType(SkuImpl.class.getName());
    fieldMetadata.setAvailableToTypes(new String[]{SkuImpl.class.getName()});
    fieldMetadata.setForeignKeyCollection(false);
    fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    fieldMetadata.setName("productOptionList");
    fieldMetadata.setFriendlyName("Product Options");
    fieldMetadata.setGroup("");
    fieldMetadata.setOrder(3);
    fieldMetadata.setExplicitFieldType(SupportedFieldType.STRING);
    fieldMetadata.setProminent(true);
    fieldMetadata.setBroadleafEnumeration("");
    fieldMetadata.setReadOnly(false);
    fieldMetadata.setVisibility(VisibilityEnum.VISIBLE_ALL);
    properties.put("productOptionList",fieldMetadata);
    BasicFieldMetadata idMetaData=(BasicFieldMetadata)properties.get("id");
    idMetaData.setOrder(1);
    properties.put("sku.id",idMetaData);
    BasicFieldMetadata nameMetaData=(BasicFieldMetadata)properties.get("name");
    nameMetaData.setOrder(2);
    properties.put("sku.name",nameMetaData);
    allMergedProperties.put(MergedPropertyType.PRIMARY,properties);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Sku.class);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    return new DynamicResultSet(mergedMetadata,null,null);
  }
 catch (  Exception e) {
    String className=persistencePackage.getCeilingEntityFullyQualifiedClassname();
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + className,e);
    LOG.error("Unable to retrieve inspection results for " + className,ex);
    throw ex;
  }
}

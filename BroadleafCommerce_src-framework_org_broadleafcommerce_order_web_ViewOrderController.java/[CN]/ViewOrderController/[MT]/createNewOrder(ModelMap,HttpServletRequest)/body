{
  ShippingRate sr=shippingRateDao.create();
  sr.setFeeType("SHIPPING");
  sr.setFeeSubType("ALL");
  sr.setFeeBand(1);
  sr.setBandUnitQuantity(BigDecimal.valueOf(29.99));
  sr.setBandResultQuantity(BigDecimal.valueOf(8.5));
  sr.setBandResultPercent(0);
  ShippingRate sr2=shippingRateDao.create();
  sr2.setFeeType("SHIPPING");
  sr2.setFeeSubType("ALL");
  sr2.setFeeBand(2);
  sr2.setBandUnitQuantity(BigDecimal.valueOf(999999.99));
  sr2.setBandResultQuantity(BigDecimal.valueOf(8.5));
  sr2.setBandResultPercent(0);
  shippingRateDao.save(sr);
  shippingRateDao.save(sr2);
  Address addr=addressDao.create();
  addr.setCity("Dallas");
  State state=stateDao.create();
  state.setAbbreviation("TX");
  state.setName("Texas");
  addr.setState(state);
  addr.setAddressLine1("5657 Amesbury Drive");
  addr.setPostalCode("75206");
  Order order=orderDao.create();
  Customer customer=customerDao.create();
  customer.setFirstName("AJ");
  customer.setLastName("Angus");
  customer.setEmailAddress("jay@aj.com");
  customer.setId(new Long(1));
  customerService.saveCustomer(customer);
  order.setCustomer(customer);
  FulfillmentGroup group=fulfillmentGroupService.createEmptyFulfillmentGroup();
  FulfillmentGroup group2=fulfillmentGroupService.createEmptyFulfillmentGroup();
  List<FulfillmentGroup> groups=new ArrayList<FulfillmentGroup>();
  group.setMethod("standard");
  group.setOrder(order);
  group.setAddress(addr);
  group.setShippingPrice(new Money(5D));
  group2.setMethod("standard");
  group2.setOrder(order);
  group2.setAddress(addr);
  group2.setShippingPrice(new Money(10D));
  FulfillmentGroupItem fulfillmentGroupItem=fulfillmentGroupItemDao.create();
  FulfillmentGroupItem fulfillmentGroupItem2=fulfillmentGroupItemDao.create();
  FulfillmentGroupItem fulfillmentGroupItem3=fulfillmentGroupItemDao.create();
  DiscreteOrderItem item=(DiscreteOrderItem)orderItemDao.create(OrderItemType.DISCRETE);
  Sku sku=catalogService.findSkuById(1L);
  item.setSku(sku);
  item.setQuantity(2);
  order.addOrderItem(item);
  fulfillmentGroupItem.setPrice(sku.getSalePrice());
  fulfillmentGroupItem.setOrderItem(item);
  item=(DiscreteOrderItem)orderItemDao.create(OrderItemType.DISCRETE);
  sku=catalogService.findSkuById(2L);
  item.setSku(sku);
  item.setQuantity(1);
  order.addOrderItem(item);
  fulfillmentGroupItem.setPrice(sku.getSalePrice());
  fulfillmentGroupItem2.setOrderItem(item);
  item=(DiscreteOrderItem)orderItemDao.create(OrderItemType.DISCRETE);
  sku=catalogService.findSkuById(130L);
  item.setSku(sku);
  item.setQuantity(1);
  order.addOrderItem(item);
  fulfillmentGroupItem.setPrice(sku.getSalePrice());
  fulfillmentGroupItem3.setOrderItem(item);
  fulfillmentGroupItem.setFulfillmentGroup(group);
  fulfillmentGroupItem2.setFulfillmentGroup(group);
  fulfillmentGroupItem3.setFulfillmentGroup(group2);
  group.getFulfillmentGroupItems().add(fulfillmentGroupItem);
  group.getFulfillmentGroupItems().add(fulfillmentGroupItem2);
  group2.getFulfillmentGroupItems().add(fulfillmentGroupItem3);
  groups.add(group);
  groups.add(group2);
  order.setFulfillmentGroups(groups);
  PaymentInfo paymentInfo=paymentInfoService.create();
  paymentInfo.setAddress(addr);
  paymentInfo.setOrder(order);
  List<PaymentInfo> paymentInfos=new ArrayList<PaymentInfo>();
  paymentInfos.add(paymentInfo);
  order.setPaymentInfos(paymentInfos);
  order.setTotalShipping(new Money(0D));
  order.setStatus(OrderStatus.SUBMITTED.toString());
  order.setOrderNumber(1234L);
  order.setSubmitDate(new Date());
  orderService.save(order);
  return viewOrders(model,request);
}

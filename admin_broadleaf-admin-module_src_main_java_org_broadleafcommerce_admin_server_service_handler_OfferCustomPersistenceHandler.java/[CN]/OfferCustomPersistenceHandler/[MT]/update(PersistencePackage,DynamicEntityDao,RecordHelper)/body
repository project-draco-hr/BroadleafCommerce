{
  Entity entity=persistencePackage.getEntity();
  removeHTMLEncoding(entity);
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> offerProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePerspective);
    Object primaryKey=helper.getPrimaryKey(entity,offerProperties);
    Offer offerInstance=(Offer)dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),primaryKey);
    offerInstance=(Offer)helper.createPopulatedInstance(offerInstance,entity,offerProperties,false);
    updateRule(entity,offerInstance,"appliesToOrderRules",OfferRuleType.ORDER);
    updateRule(entity,offerInstance,"appliesToCustomerRules",OfferRuleType.CUSTOMER);
    updateRule(entity,offerInstance,"appliesToFulfillmentGroupRules",OfferRuleType.FULFILLMENT_GROUP);
    if (entity.findProperty("type") != null && !entity.findProperty("type").getValue().equals("ORDER_ITEM") && offerInstance.getTargetItemCriteria() != null) {
      offerInstance.getTargetItemCriteria().setOffer(null);
      offerInstance.setTargetItemCriteria(null);
    }
    dynamicEntityDao.merge(offerInstance);
    Property offerCodeId=entity.findProperty("offerCode.id");
    OfferCode offerCode=null;
    if (entity.findProperty("deliveryType") != null && entity.findProperty("deliveryType").getValue().equals("CODE")) {
      if (offerCodeId == null) {
        offerCode=(OfferCode)entityConfiguration.createEntityInstance(OfferCode.class.getName());
      }
 else {
        offerCode=(OfferCode)dynamicEntityDao.retrieve(OfferCodeImpl.class,Long.valueOf(entity.findProperty("offerCode.id").getValue()));
      }
      offerCode.setOfferCode(entity.findProperty("offerCode.offerCode").getValue());
      offerCode.setEndDate(offerInstance.getEndDate());
      offerCode.setMaxUses(offerInstance.getMaxUses());
      offerCode.setOffer(offerInstance);
      offerCode.setStartDate(offerInstance.getStartDate());
      dynamicEntityDao.merge(offerCode);
    }
 else     if (offerCodeId != null) {
      offerCode=(OfferCode)dynamicEntityDao.retrieve(OfferCodeImpl.class,Long.valueOf(entity.findProperty("offerCode.id").getValue()));
      offerCode.setOffer(null);
      dynamicEntityDao.remove(offerCode);
      offerCode=null;
    }
    Entity offerEntity=helper.getRecord(offerProperties,offerInstance,null,null);
    if (offerCode != null) {
      PersistencePerspective offerCodePersistencePerspective=new PersistencePerspective(null,new String[]{},new ForeignKey[]{new ForeignKey("offer",EntityImplementations.OFFER,null)});
      Map<String,FieldMetadata> offerCodeMergedProperties=helper.getSimpleMergedProperties(OfferCode.class.getName(),offerCodePersistencePerspective);
      Entity offerCodeEntity=helper.getRecord(offerCodeMergedProperties,offerCode,null,null);
      Entity temp=new Entity();
      temp.setType(offerCodeEntity.getType());
      temp.setProperties(new Property[]{offerCodeEntity.findProperty("offerCode"),offerCodeEntity.findProperty("id")});
      offerEntity.mergeProperties("offerCode",temp);
    }
    Property fgProperty=entity.findProperty("appliesToFulfillmentGroupRules");
    if (fgProperty != null) {
      offerEntity.addProperty(fgProperty);
    }
    return offerEntity;
  }
 catch (  Exception e) {
    LOG.error("Unable to update entity for " + entity.getType()[0],e);
    throw new ServiceException("Unable to update entity for " + entity.getType()[0],e);
  }
}

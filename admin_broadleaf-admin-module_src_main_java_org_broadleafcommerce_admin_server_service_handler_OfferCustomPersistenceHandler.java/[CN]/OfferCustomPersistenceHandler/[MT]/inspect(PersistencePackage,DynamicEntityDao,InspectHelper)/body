{
  try {
    Map<MergedPropertyType,Map<String,FieldMetadata>> allMergedProperties=new HashMap<MergedPropertyType,Map<String,FieldMetadata>>();
    Map<String,FieldMetadata> mergedProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePackage.getPersistencePerspective());
    allMergedProperties.put(MergedPropertyType.PRIMARY,mergedProperties);
    PersistencePerspective offerCodePersistencePerspective=new PersistencePerspective(null,new String[]{},new ForeignKey[]{new ForeignKey("offer",OfferImpl.class.getName(),null)});
    Map<String,FieldMetadata> offerCodeMergedProperties=helper.getSimpleMergedProperties(OfferCode.class.getName(),offerCodePersistencePerspective);
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Offer.class);
    Collection<String> tempList=BLCCollectionUtils.collect(Arrays.asList(entityClasses),new TypedTransformer<String>(){
      @Override public String transform(      Object input){
        Class<?> clazz=(Class<?>)input;
        return clazz.getName();
      }
    }
);
    String[] entityClassNames=tempList.toArray(new String[0]);
    BasicFieldMetadata metadata=(BasicFieldMetadata)offerCodeMergedProperties.get("offerCode");
    metadata.setAvailableToTypes(ArrayUtils.addAll(metadata.getAvailableToTypes(),entityClassNames));
    mergedProperties.put("offerCode.offerCode",metadata);
    BasicFieldMetadata metadata2=(BasicFieldMetadata)offerCodeMergedProperties.get("id");
    metadata2.setAvailableToTypes(ArrayUtils.addAll(metadata2.getAvailableToTypes(),entityClassNames));
    mergedProperties.put("offerCode.id",metadata2);
    ClassMetadata mergedMetadata=helper.getMergedClassMetadata(entityClasses,allMergedProperties);
    DynamicResultSet results=new DynamicResultSet(mergedMetadata,null,null);
    return results;
  }
 catch (  Exception e) {
    ServiceException ex=new ServiceException("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    LOG.error("Unable to retrieve inspection results for " + persistencePackage.getCeilingEntityFullyQualifiedClassname(),ex);
    throw ex;
  }
}

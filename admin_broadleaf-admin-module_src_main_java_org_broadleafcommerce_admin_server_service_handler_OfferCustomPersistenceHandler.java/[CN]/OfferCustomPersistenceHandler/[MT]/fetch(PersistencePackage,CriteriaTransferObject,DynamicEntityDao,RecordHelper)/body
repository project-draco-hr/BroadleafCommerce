{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> offerProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePerspective);
    List<FilterMapping> filterMappings=helper.getFilterMappings(persistencePerspective,cto,Offer.class.getName(),offerProperties);
    if (!persistencePackage.getPersistencePerspective().getShowArchivedFields()) {
      FilterMapping filterMapping=new FilterMapping().withFieldPath(new FieldPath().withTargetProperty("archiveStatus.archived")).withFilterValues(new EmptyFilterValues()).withRestriction(new Restriction().withPredicateProvider(new PredicateProvider<Character,Character>(){
        @Override public Predicate buildPredicate(        CriteriaBuilder builder,        FieldPathBuilder fieldPathBuilder,        From root,        String ceilingEntity,        String fullPropertyName,        Path<Character> explicitPath,        List<Character> directValues){
          return builder.or(builder.equal(explicitPath,'N'),builder.isNull(explicitPath));
        }
      }
));
      filterMappings.add(filterMapping);
    }
    List<Serializable> records=helper.getPersistentRecords(Offer.class.getName(),filterMappings,cto.getFirstResult(),cto.getMaxResults());
    Entity[] entities=helper.getRecords(offerProperties,records);
    addAssociatedOfferCodes(dynamicEntityDao,helper,entities);
    int totalRecords=helper.getTotalRecords(StringUtils.isEmpty(persistencePackage.getFetchTypeFullyQualifiedClassname()) ? persistencePackage.getCeilingEntityFullyQualifiedClassname() : persistencePackage.getFetchTypeFullyQualifiedClassname(),filterMappings);
    DynamicResultSet response=new DynamicResultSet(null,entities,totalRecords);
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to perform fetch for entity" + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

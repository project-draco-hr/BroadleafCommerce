{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> offerProperties=helper.getSimpleMergedProperties(Offer.class.getName(),persistencePerspective);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,Offer.class.getName(),offerProperties);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,Offer.class.getName());
    if (!persistencePackage.getPersistencePerspective().getShowArchivedFields()) {
      SimpleFilterCriterionProvider criterionProvider=new SimpleFilterCriterionProvider(SimpleFilterCriterionProvider.FilterDataStrategy.NONE,0){
        @Override public Criterion getCriterion(        String targetPropertyName,        Object[] filterObjectValues,        Object[] directValues){
          return Restrictions.or(Restrictions.eq(targetPropertyName,'N'),Restrictions.isNull(targetPropertyName));
        }
      }
;
      FilterCriterion filterCriterion=new FilterCriterion(AssociationPath.ROOT,"archiveStatus.archived",criterionProvider);
      ((NestedPropertyCriteria)queryCriteria).add(filterCriterion);
    }
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Offer.class);
    Entity[] entities=helper.getRecords(offerProperties,records);
    addAssociatedOfferCodes(dynamicEntityDao,helper,entities);
    int totalRecords=helper.getTotalRecords(persistencePackage,cto,ctoConverter);
    DynamicResultSet response=new DynamicResultSet(null,entities,totalRecords);
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to perform fetch for entity" + persistencePackage.getCeilingEntityFullyQualifiedClassname(),e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

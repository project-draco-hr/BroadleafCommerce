{
  EasyMock.expect(offerDaoMock.createCandidateItemOffer()).andReturn(new CandidateItemOfferImpl()).times(3);
  replay();
  Order order=dataProvider.createBasicOrder();
  List<CandidateItemOffer> qualifiedOffers=new ArrayList<CandidateItemOffer>();
  List<Offer> offers=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,null,null);
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(0));
  assertTrue(qualifiedOffers.size() == 2 && qualifiedOffers.get(0).getOffer().equals(offers.get(0)) && qualifiedOffers.get(1).getOffer().equals(offers.get(0)));
  qualifiedOffers=new ArrayList<CandidateItemOffer>();
  offers=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test1\"), MVEL.eval(\"toUpperCase()\",\"test2\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(0));
  assertTrue(qualifiedOffers.size() == 1 && qualifiedOffers.get(0).getOffer().equals(offers.get(0)) && qualifiedOffers.get(0).getCandidateQualifiersMap().size() == 1);
  qualifiedOffers=new ArrayList<CandidateItemOffer>();
  offers=dataProvider.createItemBasedOfferWithItemCriteria("order.subTotal.getAmount()>20",OfferDiscountType.PERCENT_OFF,"([MVEL.eval(\"toUpperCase()\",\"test5\"), MVEL.eval(\"toUpperCase()\",\"test6\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))","([MVEL.eval(\"toUpperCase()\",\"test5\"), MVEL.eval(\"toUpperCase()\",\"test6\")] contains MVEL.eval(\"toUpperCase()\", discreteOrderItem.category.name))");
  itemProcessor.filterItemLevelOffer(order,qualifiedOffers,order.getDiscountableDiscreteOrderItems(),offers.get(0));
  assertTrue(qualifiedOffers.size() == 0);
  verify();
}

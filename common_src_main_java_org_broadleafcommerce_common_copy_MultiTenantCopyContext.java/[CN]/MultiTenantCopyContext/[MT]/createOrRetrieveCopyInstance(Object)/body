{
  BroadleafRequestContext context=BroadleafRequestContext.getBroadleafRequestContext();
  context.setCurrentCatalog(getToCatalog());
  context.setCurrentProfile(getToSite());
  context.setSite(getToSite());
  if (instance instanceof Status && 'Y' == ((Status)instance).getArchived()) {
    throw new CloneNotSupportedException("Attempting to clone an archived instance");
  }
  Class<?> instanceClass=instance.getClass();
  if (instanceClass.getAnnotation(Embeddable.class) != null) {
    G response;
    try {
      response=(G)instanceClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw ExceptionHelper.refineException(e);
    }
catch (    IllegalAccessException e) {
      throw ExceptionHelper.refineException(e);
    }
    return new CreateResponse<G>(response,false);
  }
  Long originalId=getIdentifier(instance);
  Object previousClone;
  if (currentEquivalentMap.inverse().containsKey(instanceClass.getName() + "_" + originalId)) {
    previousClone=currentCloneMap.get(currentEquivalentMap.inverse().get(instanceClass.getName() + "_" + originalId));
  }
 else {
    previousClone=getClonedVersion(instanceClass,originalId);
  }
  G response;
  boolean alreadyPopulate;
  if (previousClone != null) {
    response=(G)previousClone;
    alreadyPopulate=true;
  }
 else {
    try {
      response=(G)instanceClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw ExceptionHelper.refineException(e);
    }
catch (    IllegalAccessException e) {
      throw ExceptionHelper.refineException(e);
    }
    checkCloneable(response);
    alreadyPopulate=false;
    currentEquivalentMap.put(System.identityHashCode(response),instanceClass.getName() + "_" + originalId);
    currentCloneMap.put(System.identityHashCode(response),response);
    try {
      for (      Field field : getAllFields(instanceClass)) {
        if (field.getType().getAnnotation(Embeddable.class) != null && MultiTenantCloneable.class.isAssignableFrom(field.getType())) {
          field.setAccessible(true);
          Object embeddable=field.get(instance);
          if (embeddable != null) {
            field.set(response,((MultiTenantCloneable)embeddable).createOrRetrieveCopyInstance(this).getClone());
          }
        }
      }
    }
 catch (    IllegalAccessException e) {
      throw ExceptionHelper.refineException(e);
    }
  }
  context.setCurrentCatalog(getFromCatalog());
  context.setCurrentProfile(getFromSite());
  context.setSite(getFromSite());
  return new CreateResponse<G>(response,alreadyPopulate);
}

{
  CartOperationRequest request=context.getSeedData();
  Order order=request.getOrder();
  if (CollectionUtils.isNotEmpty(request.getMultishipOptionsToDelete())) {
    for (    Long[] pack : request.getMultishipOptionsToDelete()) {
      if (pack[1] == null) {
        orderMultishipOptionService.deleteOrderItemOrderMultishipOptions(pack[0]);
      }
 else {
        orderMultishipOptionService.deleteOrderItemOrderMultishipOptions(pack[0],pack[1].intValue());
      }
    }
  }
  if (CollectionUtils.isNotEmpty(request.getFgisToDelete())) {
    for (    FulfillmentGroupItem fgi : request.getFgisToDelete()) {
      for (      FulfillmentGroup fg : order.getFulfillmentGroups()) {
        ListIterator<FulfillmentGroupItem> fgItemIter=fg.getFulfillmentGroupItems().listIterator();
        while (fgItemIter.hasNext()) {
          FulfillmentGroupItem fgi2=fgItemIter.next();
          if (fgi2 == fgi) {
            fgItemIter.remove();
            fgItemDao.delete(fgi2);
          }
        }
      }
    }
  }
  for (  OrderItem oi : request.getOisToDelete()) {
    order.getOrderItems().remove(oi);
    orderItemService.delete(oi);
    if (oi.getParentOrderItem() != null) {
      OrderItem parentItem=oi.getParentOrderItem();
      parentItem.getChildOrderItems().remove(oi);
    }
  }
  Map<OrderItem,List<FulfillmentGroupItem>> oiFgiMap=new HashMap<OrderItem,List<FulfillmentGroupItem>>();
  Map<OrderItem,OrderItem> savedOrderItems=new HashMap<OrderItem,OrderItem>();
  for (  OrderItem oi : order.getOrderItems()) {
    if (oi instanceof BundleOrderItem) {
      List<DiscreteOrderItem> doisToAdd=new ArrayList<DiscreteOrderItem>();
      ListIterator<DiscreteOrderItem> li=((BundleOrderItem)oi).getDiscreteOrderItems().listIterator();
      while (li.hasNext()) {
        DiscreteOrderItem doi=li.next();
        getOiFgiMap(order,oiFgiMap,doi);
        DiscreteOrderItem savedDoi=(DiscreteOrderItem)orderItemService.saveOrderItem(doi);
        savedOrderItems.put(doi,savedDoi);
        li.remove();
        doisToAdd.add(savedDoi);
      }
      ((BundleOrderItem)oi).getDiscreteOrderItems().addAll(doisToAdd);
      BundleOrderItem savedBoi=(BundleOrderItem)orderItemService.saveOrderItem(oi);
      savedOrderItems.put(oi,savedBoi);
      for (      DiscreteOrderItem doi : savedBoi.getDiscreteOrderItems()) {
        doi.setBundleOrderItem(savedBoi);
      }
    }
 else {
      getOiFgiMap(order,oiFgiMap,oi);
      savedOrderItems.put(oi,orderItemService.saveOrderItem(oi));
    }
  }
  ListIterator<OrderItem> li=order.getOrderItems().listIterator();
  List<OrderItem> oisToAdd=new ArrayList<OrderItem>();
  while (li.hasNext()) {
    OrderItem oi=li.next();
    OrderItem savedOi=savedOrderItems.get(oi);
    oisToAdd.add(savedOi);
    li.remove();
  }
  order.getOrderItems().addAll(oisToAdd);
  for (  Entry<OrderItem,List<FulfillmentGroupItem>> entry : oiFgiMap.entrySet()) {
    for (    FulfillmentGroupItem fgi : entry.getValue()) {
      fgi.setOrderItem(savedOrderItems.get(entry.getKey()));
    }
    if (entry.getKey() == request.getOrderItem()) {
      request.setOrderItem(savedOrderItems.get(entry.getKey()));
    }
  }
  for (  OrderItem oi : order.getOrderItems()) {
    if (oi.getId().equals(request.getItemRequest().getParentOrderItemId())) {
      oi.getChildOrderItems().add(request.getOrderItem());
    }
  }
  preSaveOperation(request);
  order=orderService.save(order,request.isPriceOrder());
  request.setOrder(order);
  return context;
}

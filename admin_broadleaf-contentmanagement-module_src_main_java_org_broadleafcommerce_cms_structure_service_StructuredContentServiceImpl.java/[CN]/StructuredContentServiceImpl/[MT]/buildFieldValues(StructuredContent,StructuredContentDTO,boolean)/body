{
  String cmsPrefix=staticAssetPathService.getStaticAssetUrlPrefix();
  scDTO.getValues().put("id",sc.getId());
  for (  String fieldKey : sc.getStructuredContentFields().keySet()) {
    StructuredContentField scf=sc.getStructuredContentFields().get(fieldKey);
    String originalValue=scf.getValue();
    if (StringUtils.isNotBlank(originalValue) && StringUtils.isNotBlank(cmsPrefix) && originalValue.contains(cmsPrefix)) {
      String fldValue=staticAssetPathService.convertAllAssetPathsInContent(originalValue,secure);
      scDTO.getValues().put(fieldKey,fldValue);
    }
 else {
      FieldDefinition definition=null;
      Iterator<FieldGroup> groupIterator=sc.getStructuredContentType().getStructuredContentFieldTemplate().getFieldGroups().iterator();
      while (groupIterator.hasNext() && definition == null) {
        FieldGroup group=groupIterator.next();
        for (        FieldDefinition def : group.getFieldDefinitions()) {
          if (def.getName().equals(fieldKey)) {
            definition=def;
            break;
          }
        }
      }
      if (definition != null) {
        Object value=null;
        if (originalValue != null) {
switch (definition.getFieldType()) {
case DATE:
            try {
              value=FormatUtil.getDateFormat().parse(originalValue);
            }
 catch (            Exception e) {
              value=originalValue;
            }
          break;
case BOOLEAN:
        value=new Boolean(originalValue);
      break;
case DECIMAL:
    value=new BigDecimal(originalValue);
  break;
case INTEGER:
value=Integer.parseInt(originalValue);
break;
case MONEY:
value=new Money(originalValue);
break;
default :
value=originalValue;
break;
}
}
scDTO.getValues().put(fieldKey,value);
}
 else {
scDTO.getValues().put(fieldKey,sc.getStructuredContentFields().get(fieldKey).getValue());
}
}
}
extensionManager.getProxy().populateAdditionalStructuredContentFields(sc,scDTO,secure);
}

{
  final HttpServletRequest httpRequest=(HttpServletRequest)request;
  String url=httpRequest.getRequestURI();
  url=url.substring(httpRequest.getContextPath().length());
  boolean matched=matchGWTPath(url);
  if (matched) {
    final HttpServletResponse httpResponse=(HttpServletResponse)response;
    if (!forbiddenCodeHttpResponse) {
      try {
        final String failureResponse=RPC.encodeResponseForFailure(null,SecurityExceptionFactory.get(exception));
        httpResponse.getOutputStream().print(failureResponse);
        httpResponse.getOutputStream().flush();
      }
 catch (      SerializationException e) {
        logger.error("RPC Serialization exception");
      }
    }
 else {
      httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN,"Access denied");
    }
    return;
  }
  if (exception instanceof AuthenticationException) {
    if (logger.isDebugEnabled()) {
      logger.debug("Authentication exception occurred; redirecting to authentication entry point",exception);
    }
    sendStartAuthentication((HttpServletRequest)request,(HttpServletResponse)response,chain,(AuthenticationException)exception);
  }
 else   if (exception instanceof AccessDeniedException) {
    if (getAuthenticationTrustResolver().isAnonymous(SecurityContextHolder.getContext().getAuthentication())) {
      if (logger.isDebugEnabled()) {
        logger.debug("Access is denied (user is anonymous); redirecting to authentication entry point",exception);
      }
      sendStartAuthentication((HttpServletRequest)request,(HttpServletResponse)response,chain,new InsufficientAuthenticationException("Full authentication is required to access this resource"));
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Access is denied (user is not anonymous); delegating to AccessDeniedHandler",exception);
      }
      accessDeniedHandler.handle((HttpServletRequest)request,(HttpServletResponse)response,(AccessDeniedException)exception);
    }
  }
}

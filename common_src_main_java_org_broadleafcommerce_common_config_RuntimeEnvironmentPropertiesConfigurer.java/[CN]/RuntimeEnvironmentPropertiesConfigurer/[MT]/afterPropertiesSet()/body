{
  if (environments == null || environments.size() == 0) {
    environments=defaultEnvironments;
  }
  Set<Resource> combinedLocations=new LinkedHashSet<Resource>();
  if (!CollectionUtils.isEmpty(overridableProperyLocations)) {
    combinedLocations.addAll(overridableProperyLocations);
  }
  combinedLocations.addAll(defaultPropertyLocations);
  if (!CollectionUtils.isEmpty(propertyLocations)) {
    combinedLocations.addAll(propertyLocations);
  }
  propertyLocations=combinedLocations;
  if (!environments.contains(defaultEnvironment)) {
    throw new AssertionError("Default environment '" + defaultEnvironment + "' not listed in environment list");
  }
  if (keyResolver == null) {
    keyResolver=new SystemPropertyRuntimeEnvironmentKeyResolver();
  }
  String environment=determineEnvironment();
  ArrayList<Resource> allLocations=new ArrayList<Resource>();
  for (  Resource resource : createBroadleafResource()) {
    if (resource.exists()) {
      allLocations.add(resource);
    }
  }
  for (  Resource resource : createSharedCommonResource()) {
    if (resource.exists()) {
      allLocations.add(resource);
    }
  }
  for (  Resource resource : createSharedPropertiesResource(environment)) {
    if (resource.exists()) {
      allLocations.add(resource);
    }
  }
  for (  Resource resource : createCommonResource()) {
    if (resource.exists()) {
      allLocations.add(resource);
    }
  }
  for (  Resource resource : createPropertiesResource(environment)) {
    if (resource.exists()) {
      allLocations.add(resource);
    }
  }
  Resource sharedPropertyOverride=createSharedOverrideResource();
  if (sharedPropertyOverride != null) {
    allLocations.add(sharedPropertyOverride);
  }
  Resource propertyOverride=createOverrideResource();
  if (propertyOverride != null) {
    allLocations.add(propertyOverride);
  }
  if (LOG.isDebugEnabled()) {
    Properties props=new Properties();
    for (    Resource resource : allLocations) {
      if (resource.exists()) {
        if (((resource.equals(sharedPropertyOverride) || resource.equals(propertyOverride)) && LOG.isDebugEnabled()) || LOG.isTraceEnabled()) {
          props=new Properties(props);
          props.load(resource.getInputStream());
          for (          Entry<Object,Object> entry : props.entrySet()) {
            if (resource.equals(sharedPropertyOverride) || resource.equals(propertyOverride)) {
              LOG.debug("Read " + entry.getKey() + " from "+ resource.getFilename());
            }
 else {
              LOG.trace("Read " + entry.getKey() + " from "+ resource.getFilename());
            }
          }
        }
      }
 else {
        LOG.debug("Unable to locate resource: " + resource.getFilename());
      }
    }
  }
  setLocations(allLocations.toArray(new Resource[]{}));
}

{
  FileWorkArea tempWorkArea=fileService.initializeWorkArea();
  String fileToSave=FilenameUtils.separatorsToSystem(getResourcePath(resource.getDescription()));
  String tempFilename=FilenameUtils.concat(tempWorkArea.getFilePathLocation(),fileToSave);
  File tempFile=new File(tempFilename);
  if (!tempFile.getParentFile().exists()) {
    if (!tempFile.getParentFile().mkdirs()) {
      if (!tempFile.getParentFile().exists()) {
        throw new RuntimeException("Unable to create parent directories for file: " + tempFilename);
      }
    }
  }
  BufferedOutputStream out=null;
  InputStream ris=null;
  try {
    ris=resource.getInputStream();
    out=new BufferedOutputStream(new FileOutputStream(tempFile));
    StreamUtils.copy(ris,out);
    ris.close();
    out.close();
    fileService.addOrUpdateResourceForPath(tempWorkArea,tempFile,true);
    Resource r=readBundle(resource.getFilename());
    System.out.println("R exists " + r.exists() + " Resource : "+ r);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeQuietly(ris);
    IOUtils.closeQuietly(out);
    fileService.closeWorkArea(tempWorkArea);
  }
}

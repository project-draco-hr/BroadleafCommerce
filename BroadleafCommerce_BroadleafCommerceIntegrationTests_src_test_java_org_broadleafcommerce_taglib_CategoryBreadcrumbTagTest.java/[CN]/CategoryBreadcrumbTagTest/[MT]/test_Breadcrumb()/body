{
  List<Category> categoryList=new ArrayList<Category>();
  Category defaultParentCategory=EasyMock.createMock(Category.class);
  categoryList.add(category);
  categoryList.add(defaultParentCategory);
  categoryBreadcrumbTag.setCategoryId(0L);
  EasyMock.expect(catalogService.findCategoryById(0L)).andReturn(category);
  EasyMock.expect(category.getDefaultParentCategory()).andReturn(defaultParentCategory);
  EasyMock.expect(defaultParentCategory.getDefaultParentCategory()).andReturn(null);
  EasyMock.expect(pageContext.getRequest()).andReturn(request).anyTimes();
  EasyMock.expect(pageContext.getOut()).andReturn(writer).anyTimes();
  EasyMock.expect(request.isSecure()).andReturn(false).anyTimes();
  EasyMock.expect(request.getServerName()).andReturn("test").anyTimes();
  EasyMock.expect(request.getLocalPort()).andReturn(80).anyTimes();
  EasyMock.expect(request.getContextPath()).andReturn("myApp").anyTimes();
  EasyMock.expect(category.getGeneratedUrl()).andReturn("url").anyTimes();
  EasyMock.expect(category.getName()).andReturn("name").anyTimes();
  EasyMock.expect(defaultParentCategory.getGeneratedUrl()).andReturn("url").anyTimes();
  EasyMock.expect(defaultParentCategory.getName()).andReturn("name").anyTimes();
  categoryBreadcrumbTag.setCategoryList(categoryList);
  categoryBreadcrumbTag.setJspContext(pageContext);
  categoryBreadcrumbTag.setCatalogService(catalogService);
  super.replayAdditionalMockObjects(category,defaultParentCategory);
  assert(categoryList.get(1).equals(defaultParentCategory));
  assert(categoryList.get(0).equals(category));
  categoryBreadcrumbTag.doTag();
  assert(categoryList.get(0).equals(defaultParentCategory));
  assert(categoryList.get(1).equals(category));
  super.verifyBaseMockObjects(category,defaultParentCategory);
}

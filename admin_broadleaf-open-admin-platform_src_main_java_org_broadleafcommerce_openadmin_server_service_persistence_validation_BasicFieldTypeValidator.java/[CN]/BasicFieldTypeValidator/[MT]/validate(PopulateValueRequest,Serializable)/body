{
  BroadleafRequestContext brc=BroadleafRequestContext.getBroadleafRequestContext();
  Locale locale=brc.getJavaLocale();
  DecimalFormat format=populateValueRequest.getDataFormatProvider().getDecimalFormatter();
  ParsePosition pp;
switch (populateValueRequest.getMetadata().getFieldType()) {
case INTEGER:
    try {
      if (int.class.isAssignableFrom(populateValueRequest.getReturnType()) || Integer.class.isAssignableFrom(populateValueRequest.getReturnType())) {
        Integer.parseInt(populateValueRequest.getRequestedValue());
      }
 else       if (byte.class.isAssignableFrom(populateValueRequest.getReturnType()) || Byte.class.isAssignableFrom(populateValueRequest.getReturnType())) {
        Byte.parseByte(populateValueRequest.getRequestedValue());
      }
 else       if (short.class.isAssignableFrom(populateValueRequest.getReturnType()) || Short.class.isAssignableFrom(populateValueRequest.getReturnType())) {
        Short.parseShort(populateValueRequest.getRequestedValue());
      }
 else       if (long.class.isAssignableFrom(populateValueRequest.getReturnType()) || Long.class.isAssignableFrom(populateValueRequest.getReturnType())) {
        Long.parseLong(populateValueRequest.getRequestedValue());
      }
    }
 catch (    NumberFormatException e) {
      return new PropertyValidationResult(false,"Field must be an valid number");
    }
  break;
case DECIMAL:
pp=new ParsePosition(0);
if (BigDecimal.class.isAssignableFrom(populateValueRequest.getReturnType())) {
format.setParseBigDecimal(true);
format.parse(populateValueRequest.getRequestedValue(),pp);
format.setParseBigDecimal(false);
}
 else {
format.parse(populateValueRequest.getRequestedValue(),pp);
}
if (pp.getIndex() != populateValueRequest.getRequestedValue().length()) {
return new PropertyValidationResult(false,"Field must be a valid decimal");
}
break;
case MONEY:
pp=new ParsePosition(0);
try {
if (Double.class.isAssignableFrom(populateValueRequest.getReturnType())) {
format.parse(populateValueRequest.getRequestedValue(),pp);
}
 else {
format.setParseBigDecimal(true);
format.parse(populateValueRequest.getRequestedValue(),pp);
format.setParseBigDecimal(false);
}
if (pp.getIndex() != populateValueRequest.getRequestedValue().length()) {
return new PropertyValidationResult(false,"Field must be a valid number");
}
}
 catch (NumberFormatException e) {
return new PropertyValidationResult(false,"Field must be a valid number");
}
break;
case DATE:
try {
populateValueRequest.getDataFormatProvider().getSimpleDateFormatter().parse(populateValueRequest.getRequestedValue());
}
 catch (ParseException e) {
return new PropertyValidationResult(false,"Field must be a date of the format: " + populateValueRequest.getDataFormatProvider().getSimpleDateFormatter().toPattern());
}
break;
case FOREIGN_KEY:
case ADDITIONAL_FOREIGN_KEY:
if (Collection.class.isAssignableFrom(populateValueRequest.getReturnType())) {
Collection collection;
try {
collection=(Collection)populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
}
 catch (FieldNotAvailableException e) {
return new PropertyValidationResult(false,"External entity cannot be added to the specified collection at " + populateValueRequest.getProperty().getName());
}
catch (IllegalAccessException e) {
return new PropertyValidationResult(false,"External entity cannot be added to the specified collection at " + populateValueRequest.getProperty().getName());
}
}
 else if (Map.class.isAssignableFrom(populateValueRequest.getReturnType())) {
return new PropertyValidationResult(false,"External entity cannot be added to a map at " + populateValueRequest.getProperty().getName());
}
case ID:
if (populateValueRequest.getSetId()) {
switch (populateValueRequest.getMetadata().getSecondaryType()) {
case INTEGER:
Long.valueOf(populateValueRequest.getRequestedValue());
break;
default :
}
}
default :
return new PropertyValidationResult(true);
}
return new PropertyValidationResult(true);
}

{
  JoinStructure joinStructure=(JoinStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINSTRUCTURE);
  Entity[] payload;
  int totalRecords;
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=dynamicEntityDao.getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateManyToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),null);
    Map<String,FieldMetadata> mergedProperties=dynamicEntityDao.getMergedProperties(joinStructure.getJoinStructureEntityClassname(),new Class[]{Class.forName(joinStructure.getJoinStructureEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINSTRUCTURE,false,new String[]{},new String[]{},null);
    BaseCtoConverter ctoConverter=getJoinStructureCtoConverter(cto,mergedProperties,joinStructure);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,joinStructure.getJoinStructureEntityClassname());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(joinStructure.getJoinStructureEntityClassname()));
    payload=getRecords(mergedPropertiesTarget,records,mergedProperties,joinStructure.getTargetObjectPath());
    totalRecords=getTotalRecords(joinStructure.getJoinStructureEntityClassname(),cto,ctoConverter);
  }
 catch (  Exception e) {
    LOG.error("Problem fetching results for " + joinStructure.getJoinStructureEntityClassname(),e);
    throw new ServiceException("Unable to fetch results for " + joinStructure.getJoinStructureEntityClassname(),e);
  }
  DynamicResultSet results=new DynamicResultSet(null,payload,totalRecords);
  return results;
}

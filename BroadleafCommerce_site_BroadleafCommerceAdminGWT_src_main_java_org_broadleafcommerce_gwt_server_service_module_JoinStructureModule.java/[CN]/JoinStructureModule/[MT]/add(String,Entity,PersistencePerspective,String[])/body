{
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for add types other than ENTITY");
  }
  JoinStructure joinStructure=(JoinStructure)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.JOINSTRUCTURE);
  Entity payload;
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=dynamicEntityDao.getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateManyToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),null);
    Map<String,FieldMetadata> mergedProperties=dynamicEntityDao.getMergedProperties(joinStructure.getJoinStructureEntityClassname(),new Class[]{Class.forName(joinStructure.getJoinStructureEntityClassname())},null,new String[]{},new ForeignKey[]{},MergedPropertyType.JOINSTRUCTURE,false,new String[]{},new String[]{},null);
    CriteriaTransferObject ctoInserted=new CriteriaTransferObject();
    FilterAndSortCriteria filterCriteriaInsertedLinked=ctoInserted.get(joinStructure.getManyToField());
    String linkedPath;
    String targetPath;
    if (joinStructure.getInverse()) {
      linkedPath=joinStructure.getTargetObjectPath() + "." + joinStructure.getTargetIdProperty();
      targetPath=joinStructure.getLinkedObjectPath() + "." + joinStructure.getLinkedIdProperty();
    }
 else {
      targetPath=joinStructure.getTargetObjectPath() + "." + joinStructure.getTargetIdProperty();
      linkedPath=joinStructure.getLinkedObjectPath() + "." + joinStructure.getLinkedIdProperty();
    }
    filterCriteriaInsertedLinked.setFilterValue(entity.findProperty(joinStructure.getInverse() ? targetPath : linkedPath).getValue());
    FilterAndSortCriteria filterCriteriaInsertedTarget=ctoInserted.get(joinStructure.getManyToField() + "Target");
    filterCriteriaInsertedTarget.setFilterValue(entity.findProperty(joinStructure.getInverse() ? linkedPath : targetPath).getValue());
    BaseCtoConverter ctoConverterInserted=getJoinStructureCtoConverter(ctoInserted,mergedProperties,joinStructure);
    PersistentEntityCriteria queryCriteriaInserted=ctoConverterInserted.convert(ctoInserted,joinStructure.getJoinStructureEntityClassname());
    List<Serializable> recordsInserted=dynamicEntityDao.query(queryCriteriaInserted,Class.forName(joinStructure.getJoinStructureEntityClassname()));
    if (recordsInserted.size() > 0) {
      payload=getRecords(mergedPropertiesTarget,recordsInserted,mergedProperties,joinStructure.getTargetObjectPath())[0];
    }
 else {
      Serializable instance=createPopulatedJoinStructureInstance(joinStructure,entity);
      instance=createPopulatedInstance(instance,entity,mergedProperties,false);
      instance=createPopulatedInstance(instance,entity,mergedPropertiesTarget,false);
      FieldManager fieldManager=getFieldManager();
      if (fieldManager.getField(instance.getClass(),"id") != null) {
        fieldManager.setFieldValue(instance,"id",null);
      }
      if (joinStructure.getSortField() != null) {
        CriteriaTransferObject cto=new CriteriaTransferObject();
        FilterAndSortCriteria filterCriteria=cto.get(joinStructure.getManyToField());
        filterCriteria.setFilterValue(entity.findProperty(joinStructure.getInverse() ? targetPath : linkedPath).getValue());
        FilterAndSortCriteria sortCriteria=cto.get(joinStructure.getSortField());
        sortCriteria.setSortAscending(joinStructure.getSortAscending());
        BaseCtoConverter ctoConverter=getJoinStructureCtoConverter(cto,mergedProperties,joinStructure);
        int totalRecords=getTotalRecords(joinStructure.getJoinStructureEntityClassname(),cto,ctoConverter);
        fieldManager.setFieldValue(instance,joinStructure.getSortField(),Long.valueOf(totalRecords + 1));
      }
      instance=dynamicEntityDao.merge(instance);
      dynamicEntityDao.flush();
      dynamicEntityDao.clear();
      List<Serializable> recordsInserted2=dynamicEntityDao.query(queryCriteriaInserted,Class.forName(joinStructure.getJoinStructureEntityClassname()));
      payload=getRecords(mergedPropertiesTarget,recordsInserted2,mergedProperties,joinStructure.getTargetObjectPath())[0];
    }
  }
 catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem adding new entity : " + e.getMessage(),e);
  }
  return payload;
}

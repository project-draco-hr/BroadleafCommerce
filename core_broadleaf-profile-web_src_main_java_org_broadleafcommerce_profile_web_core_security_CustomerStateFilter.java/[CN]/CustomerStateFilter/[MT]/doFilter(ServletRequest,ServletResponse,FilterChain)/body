{
  HttpServletRequest request=(HttpServletRequest)baseRequest;
  HttpServletResponse response=(HttpServletResponse)baseResponse;
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  Customer customer=null;
  if ((authentication != null) && !(authentication instanceof AnonymousAuthenticationToken)) {
    String userName=request.getUserPrincipal().getName();
    customer=(Customer)request.getAttribute(customerRequestAttributeName);
    if (userName != null && (customer == null || !userName.equals(customer.getUsername()))) {
      customer=customerService.readCustomerByUsername(userName);
      if (logger.isDebugEnabled() && customer != null) {
        logger.debug("Customer found by username " + userName);
      }
    }
    if (customer != null) {
      ApplicationEvent lastPublishedEvent=(ApplicationEvent)request.getSession(true).getAttribute(LAST_PUBLISHED_EVENT_SESSION_ATTRIBUTED_NAME);
      if (authentication instanceof RememberMeAuthenticationToken) {
        customer.setCookied(true);
        boolean publishRememberMeEvent=true;
        if (lastPublishedEvent != null && lastPublishedEvent instanceof CustomerAuthenticatedFromCookieEvent) {
          CustomerAuthenticatedFromCookieEvent cookieEvent=(CustomerAuthenticatedFromCookieEvent)lastPublishedEvent;
          if (userName.equals(cookieEvent.getCustomer().getUsername())) {
            publishRememberMeEvent=false;
          }
        }
        if (publishRememberMeEvent) {
          CustomerAuthenticatedFromCookieEvent cookieEvent=new CustomerAuthenticatedFromCookieEvent(customer,this.getClass().getName());
          eventPublisher.publishEvent(cookieEvent);
          request.getSession().setAttribute(LAST_PUBLISHED_EVENT_SESSION_ATTRIBUTED_NAME,cookieEvent);
        }
      }
 else       if (authentication instanceof UsernamePasswordAuthenticationToken) {
        customer.setLoggedIn(true);
        boolean publishLoggedInEvent=true;
        if (lastPublishedEvent != null && lastPublishedEvent instanceof CustomerLoggedInEvent) {
          CustomerLoggedInEvent loggedInEvent=(CustomerLoggedInEvent)lastPublishedEvent;
          if (userName.equals(loggedInEvent.getCustomer().getUsername())) {
            publishLoggedInEvent=false;
          }
        }
        if (publishLoggedInEvent) {
          CustomerLoggedInEvent loggedInEvent=new CustomerLoggedInEvent(customer,this.getClass().getName());
          eventPublisher.publishEvent(loggedInEvent);
          request.getSession().setAttribute(LAST_PUBLISHED_EVENT_SESSION_ATTRIBUTED_NAME,loggedInEvent);
        }
      }
 else {
        customer=null;
      }
    }
  }
  if (customer == null) {
    customer=resolveAnonymousCustomer(request);
  }
  request.setAttribute(customerRequestAttributeName,customer);
  Map<String,Object> ruleMap=(Map<String,Object>)request.getAttribute(BLC_RULE_MAP_PARAM);
  if (ruleMap == null) {
    ruleMap=new HashMap<String,Object>();
  }
  ruleMap.put("customer",customer);
  request.setAttribute(BLC_RULE_MAP_PARAM,ruleMap);
  chain.doFilter(request,response);
}

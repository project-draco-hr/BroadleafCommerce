{
  final Restriction delegateRestriction=delegate.getRestriction(type,propertyId);
  return new Restriction().withFilterValueConverter(delegateRestriction.getFilterValueConverter()).withPredicateProvider(new PredicateProvider(){
    @Override public Predicate buildPredicate(    CriteriaBuilder builder,    FieldPathBuilder fieldPathBuilder,    From root,    String ceilingEntity,    String fullPropertyName,    Path explicitPath,    List directValues){
      FieldPath fieldPath=fieldPathBuilder.getFieldPath(root,fullPropertyName);
      if ((StringUtils.isNotEmpty(skuPropertyPrefix) && fullPropertyName.startsWith(skuPropertyPrefix)) || CollectionUtils.isEmpty(fieldPath.getAssociationPath())) {
        Path targetPropertyPath=fieldPathBuilder.getPath(root,fieldPath,builder);
        Path defaultSkuPropertyPath=fieldPathBuilder.getPath(root,DEFAULT_SKU_PATH_PREFIX + fullPropertyName,builder);
        Path productPath=fieldPathBuilder.getPath(root,"product",builder);
        Predicate propertyExpression;
        Predicate defaultSkuExpression;
        if (delegateRestriction.getPredicateProvider() instanceof LikePredicateProvider) {
          propertyExpression=builder.like(builder.lower(targetPropertyPath),((String)directValues.get(0)).toLowerCase());
          defaultSkuExpression=builder.like(builder.lower(defaultSkuPropertyPath),((String)directValues.get(0)).toLowerCase());
        }
 else         if (delegateRestriction.getPredicateProvider() instanceof IsNullPredicateProvider) {
          propertyExpression=builder.isNull(targetPropertyPath);
          defaultSkuExpression=builder.isNull(defaultSkuPropertyPath);
        }
 else         if (delegateRestriction.getPredicateProvider() instanceof BetweenDatePredicateProvider) {
          if (directValues.size() == 2) {
            if (directValues.get(0) == null) {
              propertyExpression=builder.lessThan(targetPropertyPath,(Comparable)directValues.get(1));
              defaultSkuExpression=builder.lessThan(defaultSkuPropertyPath,(Comparable)directValues.get(1));
            }
 else             if (directValues.get(1) == null) {
              propertyExpression=builder.greaterThanOrEqualTo(targetPropertyPath,(Comparable)directValues.get(0));
              defaultSkuExpression=builder.greaterThanOrEqualTo(defaultSkuPropertyPath,(Comparable)directValues.get(0));
            }
 else {
              propertyExpression=builder.between(targetPropertyPath,(Comparable)directValues.get(0),(Comparable)directValues.get(1));
              defaultSkuExpression=builder.between(defaultSkuPropertyPath,(Comparable)directValues.get(0),(Comparable)directValues.get(1));
            }
          }
 else {
            propertyExpression=builder.equal(targetPropertyPath,directValues.get(0));
            defaultSkuExpression=builder.equal(defaultSkuPropertyPath,directValues.get(0));
          }
        }
 else         if (delegateRestriction.getPredicateProvider() instanceof BetweenPredicateProvider) {
          if (directValues.size() > 1) {
            propertyExpression=builder.between(targetPropertyPath,(Comparable)directValues.get(0),(Comparable)directValues.get(1));
            defaultSkuExpression=builder.between(defaultSkuPropertyPath,(Comparable)directValues.get(0),(Comparable)directValues.get(1));
          }
 else {
            propertyExpression=builder.equal(targetPropertyPath,directValues.get(0));
            defaultSkuExpression=builder.equal(defaultSkuPropertyPath,directValues.get(0));
          }
        }
 else         if (delegateRestriction.getPredicateProvider() instanceof CollectionSizeEqualPredicateProvider) {
          propertyExpression=builder.equal(builder.size(targetPropertyPath),directValues.get(0));
          defaultSkuExpression=builder.equal(builder.size(defaultSkuPropertyPath),directValues.get(0));
        }
 else         if (delegateRestriction.getPredicateProvider() instanceof EqPredicateProvider) {
          propertyExpression=builder.equal(targetPropertyPath,directValues.get(0));
          defaultSkuExpression=builder.equal(defaultSkuPropertyPath,directValues.get(0));
        }
 else {
          throw new IllegalArgumentException("Unknown PredicateProvider instance: " + delegateRestriction.getPredicateProvider().getClass().getName());
        }
        return buildCompositePredicate(builder,targetPropertyPath,productPath,propertyExpression,defaultSkuExpression);
      }
      return delegateRestriction.getPredicateProvider().buildPredicate(builder,fieldPathBuilder,root,ceilingEntity,fullPropertyName,explicitPath,directValues);
    }
  }
);
}

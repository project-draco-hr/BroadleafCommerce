{
  StringTokenizer tokens=new StringTokenizer(fieldName,".");
  Class<?> componentClass=bean.getClass();
  Field field=null;
  Object value=bean;
  int count=tokens.countTokens();
  int j=0;
  while (tokens.hasMoreTokens()) {
    field=getSingleField(componentClass,tokens.nextToken());
    field.setAccessible(true);
    if (j == count - 1) {
      field.set(value,newValue);
    }
 else {
      Object myValue=field.get(value);
      if (myValue != null) {
        componentClass=myValue.getClass();
        value=myValue;
      }
 else {
        try {
          Object newEntity=entityConfiguration.createEntityInstance(field.getType().getName());
          SortableValue val=new SortableValue((Serializable)newEntity,j);
          middleFields.add(val);
          field.set(value,newEntity);
          componentClass=newEntity.getClass();
          value=newEntity;
        }
 catch (        Exception e) {
          Class<?>[] entities=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(field.getType());
          if (!ArrayUtils.isEmpty(entities)) {
            Object newEntity=entities[0].newInstance();
            SortableValue val=new SortableValue((Serializable)newEntity,j);
            middleFields.add(val);
            field.set(value,newEntity);
            componentClass=newEntity.getClass();
            value=newEntity;
            LOG.info("Unable to find a reference to (" + field.getType().getName() + ") in the EntityConfigurationManager. Using the most extended form of this class identified as ("+ entities[0].getName()+ ")");
          }
 else {
            Object newEntity=field.getType().newInstance();
            field.set(value,newEntity);
            componentClass=newEntity.getClass();
            value=newEntity;
            LOG.info("Unable to find a reference to (" + field.getType().getName() + ") in the EntityConfigurationManager. Using the type of this class.");
          }
        }
      }
    }
    j++;
  }
  return value;
}

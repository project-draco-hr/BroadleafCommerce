{
  SessionFactory sessionFactory=em.getSession().getSessionFactory();
  ClassMetadata metadata=sessionFactory.getClassMetadata(originalBean.getClass());
  String idProperty=metadata.getIdentifierPropertyName();
  if (!typePool.containsKey(originalBean.getClass().getName())) {
    List<String> propertyNames=new ArrayList<String>();
    for (    String propertyName : metadata.getPropertyNames()) {
      propertyNames.add(propertyName);
    }
    propertyNames.add(idProperty);
    List<Type> propertyTypes=new ArrayList<Type>();
    Type idType=metadata.getIdentifierType();
    for (    Type propertyType : metadata.getPropertyTypes()) {
      propertyTypes.add(propertyType);
    }
    propertyTypes.add(idType);
    Map<String,Type> types=new HashMap<String,Type>();
    int j=0;
    for (    String propertyName : propertyNames) {
      types.put(propertyName,propertyTypes.get(j));
      j++;
    }
    typePool.put(originalBean.getClass().getName(),types);
  }
  Map<String,Type> types=(Map<String,Type>)typePool.get(originalBean.getClass().getName());
  Field idField=null;
  for (  Field field : fields) {
    if (types.containsKey(field.getName())) {
      field.setAccessible(true);
      Type fieldType=types.get(field.getName());
      if (fieldType.isCollectionType() || fieldType.isAnyType()) {
      }
 else       if (fieldType.isEntityType()) {
        Object newOriginalBean=field.get(originalBean);
        if (newOriginalBean == null) {
          field.set(targetBean,null);
        }
 else {
          Object newTargetBean=newOriginalBean.getClass().newInstance();
          field.set(targetBean,newTargetBean);
          Field[] newFields=getFields(newOriginalBean.getClass());
          performConvert(newOriginalBean,newTargetBean,newFields,method,em,txManager);
        }
      }
 else {
        field.set(targetBean,field.get(originalBean));
      }
      if (field.getName().equals(idProperty)) {
        idField=field;
      }
    }
  }
  if (txManager != null) {
    Object temp=null;
    if (idField == null) {
      throw new Exception("Unable to find an identity field for the entity: " + originalBean.getClass().getName());
    }
    final Serializable primaryKey=(Serializable)idField.get(originalBean);
    if (primaryKey != null) {
      temp=em.find(originalBean.getClass(),primaryKey);
    }
    DefaultTransactionDefinition def=new DefaultTransactionDefinition();
    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
    TransactionStatus status=txManager.getTransaction(def);
    try {
      if (primaryKey != null) {
        if (temp != null && method.getName().equals("merge")) {
          targetBean=em.merge(targetBean);
        }
 else {
          SessionImplementor session=(SessionImplementor)em.getDelegate();
          EntityPersister persister=session.getEntityPersister(targetBean.getClass().getName(),targetBean);
          IdentifierProperty ip=persister.getEntityMetamodel().getIdentifierProperty();
synchronized (ip) {
            IdentifierValue backupUnsavedValue=setUnsavedValue(ip,IdentifierValue.ANY);
            em.persist(targetBean);
            setUnsavedValue(ip,backupUnsavedValue);
          }
        }
      }
 else {
        targetBean=method.invoke(em,targetBean);
      }
    }
 catch (    Throwable ex) {
      txManager.rollback(status);
      throw ex;
    }
    txManager.commit(status);
  }
}

{
  String attributeValue=element.getAttributeValue(attributeName);
  BindStatus bindStatus=FieldUtils.getBindStatus(arguments.getConfiguration(),arguments,attributeValue);
  if (bindStatus.isError()) {
    EntityForm form=(EntityForm)((BindingResult)bindStatus.getErrors()).getTarget();
    Map<String,Map<String,List<String>>> result=new HashMap<String,Map<String,List<String>>>();
    for (    FieldError err : bindStatus.getErrors().getFieldErrors()) {
      String tabName=EntityForm.DEFAULT_TAB_NAME;
      Tab tab=form.findTabForField(err.getField());
      if (tab != null) {
        tabName=tab.getTitle();
      }
      Map<String,List<String>> tabErrors=result.get(tabName);
      if (tabErrors == null) {
        tabErrors=new HashMap<String,List<String>>();
        result.put(tabName,tabErrors);
      }
      if (err.getField().contains(DynamicEntityFormInfo.FIELD_SEPARATOR)) {
        String fieldName=extractFieldName(err);
        String[] fieldInfo=fieldName.split("\\" + DynamicEntityFormInfo.FIELD_SEPARATOR);
        Field formField=form.getDynamicForm(fieldInfo[0]).getFields().get(fieldName);
        if (formField != null) {
          addFieldError(formField.getFriendlyName(),err.getCode(),tabErrors);
        }
 else {
          LOG.warn("Could not find field " + fieldName + " within the dynamic form "+ fieldInfo[0]);
          addFieldError(fieldName,err.getCode(),tabErrors);
        }
      }
 else {
        if (form.getTabs().size() > 0) {
          Field formField=form.findField(err.getField());
          if (formField != null) {
            addFieldError(formField.getFriendlyName(),err.getCode(),tabErrors);
          }
 else {
            LOG.warn("Could not find field " + err.getField() + " within the main form");
            addFieldError(err.getField(),err.getCode(),tabErrors);
          }
        }
 else {
          Map<String,Object> localVariables=new HashMap<String,Object>();
          localVariables.put("tabErrors",tabErrors);
          return ProcessorResult.setLocalVariables(localVariables);
        }
      }
    }
    String translatedGeneralTab=GENERAL_ERRORS_TAB_KEY;
    BroadleafRequestContext context=BroadleafRequestContext.getBroadleafRequestContext();
    if (context != null && context.getMessageSource() != null) {
      translatedGeneralTab=context.getMessageSource().getMessage(translatedGeneralTab,null,translatedGeneralTab,context.getJavaLocale());
    }
    for (    ObjectError err : bindStatus.getErrors().getGlobalErrors()) {
      Map<String,List<String>> tabErrors=result.get(GENERAL_ERRORS_TAB_KEY);
      if (tabErrors == null) {
        tabErrors=new HashMap<String,List<String>>();
        result.put(translatedGeneralTab,tabErrors);
      }
      addFieldError(GENERAL_ERROR_FIELD_KEY,err.getCode(),tabErrors);
    }
    Map<String,Object> localVariables=new HashMap<String,Object>();
    localVariables.put("tabErrors",result);
    return ProcessorResult.setLocalVariables(localVariables);
  }
  return ProcessorResult.OK;
}

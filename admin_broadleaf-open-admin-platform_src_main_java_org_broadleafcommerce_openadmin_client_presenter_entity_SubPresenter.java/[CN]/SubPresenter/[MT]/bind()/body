{
  super.bind();
  display.getGrid().addFetchDataHandler(new FetchDataHandler(){
    @Override public void onFilterData(    FetchDataEvent event){
      display.getFormOnlyDisplay().getForm().clearValues();
    }
  }
);
  selectionChangedHandlerRegistration=display.getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      if (event.getState()) {
        display.getRemoveButton().enable();
        ((DynamicEntityDataSource)display.getGrid().getDataSource()).resetPermanentFieldVisibilityBasedOnType(event.getSelectedRecord().getAttributeAsStringArray("_type"));
        display.getFormOnlyDisplay().buildFields(display.getGrid().getDataSource(),showDisabledState,canEdit,showId,event.getRecord());
        display.getFormOnlyDisplay().getForm().editRecord(event.getRecord());
        display.getFormOnlyDisplay().getForm().enable();
      }
 else {
        display.getRemoveButton().disable();
      }
      updatePresenterReadOnlyStatus();
    }
  }
);
  removeButtonHandlerRegistration=display.getRemoveButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        display.getGrid().removeData(display.getGrid().getSelectedRecord(),new DSCallback(){
          @Override public void execute(          DSResponse response,          Object rawData,          DSRequest request){
            display.getRemoveButton().disable();
          }
        }
);
      }
    }
  }
);
}

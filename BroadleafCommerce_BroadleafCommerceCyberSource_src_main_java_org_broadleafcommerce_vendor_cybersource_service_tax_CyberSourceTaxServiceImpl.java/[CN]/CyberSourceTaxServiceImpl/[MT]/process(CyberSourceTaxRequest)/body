{
  if (isCacheEnabled) {
synchronized (this) {
      if (cache == null) {
        cache=CacheManager.getInstance().getCache("CyberSourceTaxRequests");
      }
    }
  }
  CyberSourceTaxResponse taxResponse=new CyberSourceTaxResponse();
  taxResponse.setServiceType(taxRequest.getServiceType());
  if (isCacheEnabled && cache.isKeyInCache(taxRequest.cacheKey())) {
    CyberSourceTaxResponse cachedResponse=(CyberSourceTaxResponse)cache.get(taxRequest.cacheKey()).getValue();
    buildResponse(taxResponse,cachedResponse,taxRequest);
  }
 else {
    ReplyMessage reply;
    RequestMessage request=buildRequestMessage(taxRequest);
    try {
      reply=sendRequest(request);
    }
 catch (    Exception e) {
      incrementFailure();
      throw new TaxException(e);
    }
    clearStatus();
    buildResponse(taxResponse,reply,taxRequest);
    String[] invalidFields=reply.getInvalidField();
    String[] missingFields=reply.getMissingField();
    if ((invalidFields != null && invalidFields.length > 0) || (missingFields != null && missingFields.length > 0)) {
      TaxHostException e=new TaxHostException();
      taxResponse.setErrorDetected(true);
      StringBuffer sb=new StringBuffer();
      if (invalidFields != null && invalidFields.length > 0) {
        sb.append("invalid fields :[ ");
        for (        String invalidField : invalidFields) {
          sb.append(invalidField);
        }
        sb.append(" ]\n");
      }
      if (missingFields != null && missingFields.length > 0) {
        sb.append("missing fields: [ ");
        for (        String missingField : missingFields) {
          sb.append(missingField);
        }
        sb.append(" ]");
      }
      taxResponse.setErrorText(sb.toString());
      e.setTaxResponse(taxResponse);
      throw e;
    }
    if (isCacheEnabled && taxResponse.getDecision().equals("ACCEPT") && taxResponse.getReasonCode().equals(100)) {
      Element element=new Element(taxRequest.cacheKey(),taxResponse);
      cache.put(element);
    }
  }
  return taxResponse;
}

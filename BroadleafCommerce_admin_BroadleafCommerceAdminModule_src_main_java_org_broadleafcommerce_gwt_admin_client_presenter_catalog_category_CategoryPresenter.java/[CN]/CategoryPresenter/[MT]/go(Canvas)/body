{
  BLCMain.MODAL_PROGRESS.startProgress(new Timer(){
    public void run(){
      if (loaded) {
        CategoryPresenter.super.go(container);
        return;
      }
      CategoryTreeDataSourceFactory.createDataSource("categoryTreeDS",rootId,rootName,new AsyncCallbackAdapter(){
        public void onSuccess(        DataSource top){
          setupDisplayItems(top);
          ((TreeGridDataSource)top).setupGridFields(new String[]{},new Boolean[]{},"250","100");
          CategorySearchDataSourceFactory.createDataSource("categorySearch",new AsyncCallbackAdapter(){
            public void onSuccess(            DataSource result){
              categorySearchDataSource=(ListGridDataSource)result;
              categorySearchDataSource.resetProminenceOnly("name","urlKey","activeStartDate","activeEndDate");
              final EntitySearchDialog categorySearchView=new EntitySearchDialog(categorySearchDataSource);
              ((DynamicEntityDataSource)((CategoryDisplay)getDisplay()).getListDisplay().getGrid().getDataSource()).getFormItemCallbackHandlerManager().addSearchFormItemCallback("defaultParentCategory",categorySearchView,"Category Search",((CategoryDisplay)getDisplay()).getDynamicFormDisplay());
              CategoryListDataSourceFactory.createDataSource("allChildCategoriesDS",new AsyncCallbackAdapter(){
                public void onSuccess(                DataSource result){
                  allChildCategoriesPresenter=new AllChildCategoriesPresenter(CategoryPresenter.this,((CategoryDisplay)getDisplay()).getAllCategoriesDisplay(),categorySearchView,"Category Search");
                  allChildCategoriesPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","urlKey"},new Boolean[]{false,false});
                  OrphanedCategoryListDataSourceFactory.createDataSource("orphanedCategoriesDS",rootId,new AsyncCallbackAdapter(){
                    public void onSuccess(                    DataSource result){
                      ((CategoryDisplay)getDisplay()).getOrphanedCategoryGrid().setDataSource(result);
                      ((ListGridDataSource)result).setAssociatedGrid(((CategoryDisplay)getDisplay()).getOrphanedCategoryGrid());
                      ((ListGridDataSource)result).setupGridFields(new String[]{"name","urlKey"},new Boolean[]{false,false});
                      Criteria myCriteria=new Criteria();
                      myCriteria.addCriteria(OrphanedCategoryListDataSourceFactory.foreignKeyName,"0");
                      ((CategoryDisplay)getDisplay()).getOrphanedCategoryGrid().fetchData(myCriteria);
                      ProductListDataSourceFactory.createDataSource("productSearchDS",new AsyncCallbackAdapter(){
                        public void onSuccess(                        DataSource result){
                          ListGridDataSource productSearchDataSource=(ListGridDataSource)result;
                          productSearchDataSource.resetPermanentFieldVisibility("name","description","model","manufacturer","activeStartDate","activeEndDate");
                          final EntitySearchDialog productSearchView=new EntitySearchDialog(productSearchDataSource);
                          FeaturedProductListDataSourceFactory.createDataSource("featuredProductsDS",new AsyncCallbackAdapter(){
                            public void onSuccess(                            DataSource result){
                              featuredPresenter=new EditableJoinStructurePresenter(((CategoryDisplay)getDisplay()).getFeaturedDisplay(),productSearchView,"Product Search","Set Promotion Message","promotionMessage");
                              featuredPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","promotionMessage"},new Boolean[]{false,true});
                              AllProductsDataSourceFactory.createDataSource("allChildProductsDS",new AsyncCallbackAdapter(){
                                public void onSuccess(                                DataSource result){
                                  childProductsPresenter=new SimpleSearchJoinStructurePresenter(((CategoryDisplay)getDisplay()).getAllProductsDisplay(),productSearchView,"Search For a Product");
                                  childProductsPresenter.setDataSource((ListGridDataSource)result,new String[]{"name","model","manufacturer"},new Boolean[]{false,false,false});
                                  MediaMapDataSourceFactory.createDataSource("mediaMapDS",getMediaMapKeys(),((CategoryDisplay)getDisplay()).getMediaDisplay().getGrid(),new AsyncCallbackAdapter(){
                                    public void onSuccess(                                    DataSource result){
                                      Map<String,Object> initialValues=new HashMap<String,Object>();
                                      initialValues.put("name","Untitled");
                                      initialValues.put("label","untitled");
                                      mediaPresenter=new MapStructurePresenter(((CategoryDisplay)getDisplay()).getMediaDisplay(),getMediaEntityView(),"Add New Media",initialValues);
                                      mediaPresenter.setDataSource((ListGridDataSource)result,new String[]{"key","name","url","label"},new Boolean[]{true,true,true,true});
                                      CategoryPresenter.super.go(container);
                                    }
                                  }
);
                                }
                              }
);
                            }
                          }
);
                        }
                      }
);
                    }
                  }
);
                }
              }
);
            }
          }
);
        }
      }
);
    }
  }
);
}

{
  final AbstractDynamicDataSource dataSource=(AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource();
  if (categorySearchDataSource.stripDuplicateAllowSpecialCharacters(dataSource.getPrimaryKeyValue(selectedRecord)).equals(rootId)) {
    formPresenter.disable();
    display.getListDisplay().getRemoveButton().disable();
  }
  allChildCategoriesPresenter.load(selectedRecord,dataSource,new DSCallback(){
    public void execute(    DSResponse response,    Object rawData,    DSRequest request){
      try {
        if (response.getErrors().size() > 0) {
          getDisplay().getInsertOrphanButton().disable();
        }
      }
 catch (      Exception e) {
        if (getDisplay().getOrphanedCategoryGrid().getSelectedRecord() != null) {
          getDisplay().getInsertOrphanButton().enable();
        }
        allChildCategoriesPresenter.setStartState();
        mediaPresenter.load(selectedRecord,dataSource,null);
      }
    }
  }
);
  display.getListDisplay().getAddButton().disable();
  featuredPresenter.load(selectedRecord,dataSource,new DSCallback(){
    public void execute(    DSResponse response,    Object rawData,    DSRequest request){
      display.getListDisplay().getAddButton().enable();
    }
  }
);
  childProductsPresenter.load(selectedRecord,dataSource,null);
  getDisplay().getAllCategoriesDisplay().getRemoveButton().disable();
}

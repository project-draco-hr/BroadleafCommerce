{
  Order cart=CartState.getCart();
  if (cart != null) {
    Map<OrderPayment,Referenced> payments=new HashMap<OrderPayment,Referenced>();
    OrderPayment paymentInfo=mapWrapper.getPaymentInfoWrapper().unwrap(request,context);
    Referenced referenced=mapWrapper.getReferencedWrapper().unwrap(request,context);
    payments.put(paymentInfo,referenced);
    PaymentResponseItem responseItem=new PaymentResponseItem(){
      @Override public void setUserName(      String userName){
      }
      @Override public void setTransactionTimestamp(      Date transactionTimestamp){
      }
      @Override public void setTransactionSuccess(      Boolean transactionSuccess){
      }
      @Override public void setTransactionId(      String transactionId){
      }
      @Override public void setTransactionAmount(      Money amount){
      }
      @Override public void setRemainingBalance(      Money remainingBalance){
      }
      @Override public void setProcessorResponseText(      String processorResponseText){
      }
      @Override public void setProcessorResponseCode(      String processorResponseCode){
      }
      @Override public void setPaymentTransaction(      PaymentTransaction paymentTransaction){
      }
      @Override public void setMiddlewareResponseText(      String middlewareResponseText){
      }
      @Override public void setMiddlewareResponseCode(      String middlewareResponseCode){
      }
      @Override public void setImplementorResponseText(      String implementorResponseText){
      }
      @Override public void setImplementorResponseCode(      String implementorResponseCode){
      }
      @Override public void setAvsCode(      String avsCode){
      }
      @Override public void setAuthorizationCode(      String authorizationCode){
      }
      @Override public void setAdditionalFields(      Map<String,String> additionalFields){
      }
      @Override public String getUserName(){
        return null;
      }
      @Override public Date getTransactionTimestamp(){
        return null;
      }
      @Override public Boolean getTransactionSuccess(){
        return null;
      }
      @Override public String getTransactionId(){
        return null;
      }
      @Override public Money getTransactionAmount(){
        return null;
      }
      @Override public Money getRemainingBalance(){
        return null;
      }
      @Override public String getProcessorResponseText(){
        return null;
      }
      @Override public String getProcessorResponseCode(){
        return null;
      }
      @Override public PaymentTransaction getPaymentTransaction(){
        return null;
      }
      @Override public String getMiddlewareResponseText(){
        return null;
      }
      @Override public String getMiddlewareResponseCode(){
        return null;
      }
      @Override public String getImplementorResponseText(){
        return null;
      }
      @Override public String getImplementorResponseCode(){
        return null;
      }
      @Override public String getAvsCode(){
        return null;
      }
      @Override public String getAuthorizationCode(){
        return null;
      }
      @Override public Map<String,String> getAdditionalFields(){
        return null;
      }
      @Override public Customer getCustomer(){
        return null;
      }
      @Override public void setCustomer(      Customer customer){
      }
    }
;
    PaymentResponseItemWrapper paymentResponseItemWrapper=context.getBean(PaymentResponseItemWrapper.class);
    paymentResponseItemWrapper.wrapDetails(responseItem,request);
    return paymentResponseItemWrapper;
  }
  throw BroadleafWebServicesException.build(Response.Status.NOT_FOUND.getStatusCode()).addMessage(BroadleafWebServicesException.CART_NOT_FOUND);
}

{
  Customer customer=customerState.getCustomer(request);
  if (customer != null) {
    Order cart=cartService.findCartForCustomer(customer);
    if (cart != null) {
      try {
        if (mapWrappers != null && !mapWrappers.isEmpty()) {
          Map<PaymentInfo,Referenced> payments=new HashMap<PaymentInfo,Referenced>();
          for (          PaymentReferenceMapWrapper mapWrapper : mapWrappers) {
            PaymentInfo paymentInfo=mapWrapper.getPaymentInfoWrapper().unwrap(request,context);
            Referenced referenced=mapWrapper.getReferencedWrapper().unwrap(request,context);
            payments.put(paymentInfo,referenced);
          }
          CheckoutResponse response=checkoutService.performCheckout(cart,payments);
          Order order=response.getOrder();
          OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
          wrapper.wrap(order,request);
          return wrapper;
        }
      }
 catch (      CheckoutException e) {
        throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
      }
    }
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  throw new WebApplicationException(Response.Status.BAD_REQUEST);
}

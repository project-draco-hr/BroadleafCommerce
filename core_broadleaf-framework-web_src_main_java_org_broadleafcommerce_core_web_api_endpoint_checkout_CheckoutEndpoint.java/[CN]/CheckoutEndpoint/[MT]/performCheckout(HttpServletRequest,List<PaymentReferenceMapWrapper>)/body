{
  Customer customer=CustomerState.getCustomer(request);
  if (customer != null) {
    Order cart=orderService.findCartForCustomer(customer);
    if (cart != null) {
      try {
        if (mapWrappers != null && !mapWrappers.isEmpty()) {
          Map<PaymentInfo,Referenced> payments=new HashMap<PaymentInfo,Referenced>();
          orderService.removePaymentsFromOrder(cart,PaymentInfoType.CREDIT_CARD);
          for (          PaymentReferenceMapWrapper mapWrapper : mapWrappers) {
            PaymentInfo paymentInfo=mapWrapper.getPaymentInfoWrapper().unwrap(request,context);
            paymentInfo.setOrder(cart);
            Referenced referenced=mapWrapper.getReferencedWrapper().unwrap(request,context);
            if (cart.getPaymentInfos() == null) {
              cart.setPaymentInfos(new ArrayList<PaymentInfo>());
            }
            cart.getPaymentInfos().add(paymentInfo);
            payments.put(paymentInfo,referenced);
          }
          CheckoutResponse response=checkoutService.performCheckout(cart,payments);
          Order order=response.getOrder();
          OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
          wrapper.wrap(order,request);
          return wrapper;
        }
      }
 catch (      CheckoutException e) {
        cart.setStatus(OrderStatus.IN_PROCESS);
        try {
          orderService.save(cart,false);
        }
 catch (        PricingException e1) {
          LOG.error("An unexpected error occured saving / pricing the cart.",e1);
        }
        throw new WebApplicationException(e,Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An error occured during checkout.").build());
      }
    }
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("Cart could not be found").build());
  }
  throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).type(MediaType.TEXT_PLAIN).entity("Could not find customer associated with request. " + "Ensure that customer ID is passed in the request as header or request parameter : customerId").build());
}

{
  Order cart=CartState.getCart();
  if (cart != null) {
    try {
      if (mapWrappers != null && !mapWrappers.isEmpty()) {
        Map<PaymentInfo,Referenced> payments=new HashMap<PaymentInfo,Referenced>();
        orderService.removePaymentsFromOrder(cart,PaymentInfoType.CREDIT_CARD);
        for (        PaymentReferenceMapWrapper mapWrapper : mapWrappers) {
          PaymentInfo paymentInfo=mapWrapper.getPaymentInfoWrapper().unwrap(request,context);
          paymentInfo.setOrder(cart);
          Referenced referenced=mapWrapper.getReferencedWrapper().unwrap(request,context);
          if (cart.getPaymentInfos() == null) {
            cart.setPaymentInfos(new ArrayList<PaymentInfo>());
          }
          cart.getPaymentInfos().add(paymentInfo);
          payments.put(paymentInfo,referenced);
        }
        CheckoutResponse response=checkoutService.performCheckout(cart,payments);
        Order order=response.getOrder();
        OrderWrapper wrapper=(OrderWrapper)context.getBean(OrderWrapper.class.getName());
        wrapper.wrapDetails(order,request);
        return wrapper;
      }
    }
 catch (    CheckoutException e) {
      cart.setStatus(OrderStatus.IN_PROCESS);
      try {
        orderService.save(cart,false);
      }
 catch (      PricingException e1) {
        LOG.error("An unexpected error occured saving / pricing the cart.",e1);
      }
      throw BroadleafWebServicesException.build(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),null,null,e);
    }
  }
  throw BroadleafWebServicesException.build(Response.Status.NOT_FOUND.getStatusCode()).addMessage(BroadleafWebServicesException.CART_NOT_FOUND);
}

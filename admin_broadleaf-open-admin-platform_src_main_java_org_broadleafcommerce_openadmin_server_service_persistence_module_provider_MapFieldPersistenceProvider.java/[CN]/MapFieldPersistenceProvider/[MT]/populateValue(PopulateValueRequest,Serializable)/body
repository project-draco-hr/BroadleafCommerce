{
  boolean dirty=false;
  try {
    Class<?> startingValueType=null;
    String valueClassName=populateValueRequest.getMetadata().getMapFieldValueClass();
    if (valueClassName != null) {
      startingValueType=Class.forName(valueClassName);
    }
    if (startingValueType == null) {
      startingValueType=populateValueRequest.getReturnType();
    }
    if (startingValueType == null) {
      throw new IllegalAccessException("Unable to determine the valueType for the rule field (" + populateValueRequest.getProperty().getName() + ")");
    }
    Class<?> valueType=startingValueType;
    if (!StringUtils.isEmpty(populateValueRequest.getMetadata().getToOneTargetProperty())) {
      java.lang.reflect.Field nestedField=FieldManager.getSingleField(valueType,populateValueRequest.getMetadata().getToOneTargetProperty());
      ManyToOne manyToOne=nestedField.getAnnotation(ManyToOne.class);
      if (manyToOne != null && !manyToOne.targetEntity().getName().equals(void.class.getName())) {
        valueType=manyToOne.targetEntity();
      }
 else {
        OneToOne oneToOne=nestedField.getAnnotation(OneToOne.class);
        if (oneToOne != null && !oneToOne.targetEntity().getName().equals(void.class.getName())) {
          valueType=oneToOne.targetEntity();
        }
      }
    }
    if (ValueAssignable.class.isAssignableFrom(valueType)) {
      boolean persistValue=false;
      ValueAssignable assignableValue;
      Object parent;
      try {
        parent=populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
        if (parent == null) {
          parent=startingValueType.newInstance();
          if (!startingValueType.equals(valueType)) {
            Object parentsParent=instance;
            String parentsParentName=populateValueRequest.getProperty().getName();
            if (parentsParentName.contains(".")) {
              parentsParent=populateValueRequest.getFieldManager().getFieldValue(instance,parentsParentName.substring(0,parentsParentName.lastIndexOf(".")));
            }
            populateValueRequest.getFieldManager().setFieldValue(parent,populateValueRequest.getMetadata().getToOneParentProperty(),parentsParent);
            populateValueRequest.getFieldManager().setFieldValue(parent,populateValueRequest.getMetadata().getMapKeyValueProperty(),parentsParentName.substring(parentsParentName.indexOf(FieldManager.MAPFIELDSEPARATOR) + FieldManager.MAPFIELDSEPARATOR.length(),parentsParentName.length()));
            populateValueRequest.getPersistenceManager().getDynamicEntityDao().persist(parent);
          }
          populateValueRequest.getFieldManager().setFieldValue(instance,populateValueRequest.getProperty().getName(),parent);
          parent=populateValueRequest.getFieldManager().getFieldValue(instance,populateValueRequest.getProperty().getName());
          persistValue=true;
          dirty=true;
        }
 else {
          parent=populateValueRequest.getPersistenceManager().getDynamicEntityDao().merge(parent);
          populateValueRequest.getFieldManager().setFieldValue(instance,populateValueRequest.getProperty().getName(),parent);
        }
        if (!StringUtils.isEmpty(populateValueRequest.getMetadata().getToOneTargetProperty())) {
          assignableValue=(ValueAssignable)populateValueRequest.getFieldManager().getFieldValue(parent,populateValueRequest.getMetadata().getToOneTargetProperty());
        }
 else {
          assignableValue=(ValueAssignable)parent;
        }
      }
 catch (      FieldNotAvailableException e) {
        throw new IllegalArgumentException(e);
      }
      String key=populateValueRequest.getProperty().getName().substring(populateValueRequest.getProperty().getName().indexOf(FieldManager.MAPFIELDSEPARATOR) + FieldManager.MAPFIELDSEPARATOR.length(),populateValueRequest.getProperty().getName().length());
      if (assignableValue != null) {
        dirty=assignableValue.getValue().equals(populateValueRequest.getProperty().getValue());
        populateValueRequest.getProperty().setOriginalValue(String.valueOf(assignableValue));
        populateValueRequest.getProperty().setOriginalDisplayValue(String.valueOf(assignableValue));
      }
      assignableValue.setName(key);
      assignableValue.setValue(populateValueRequest.getProperty().getValue());
      String fieldName=populateValueRequest.getProperty().getName().substring(0,populateValueRequest.getProperty().getName().indexOf(FieldManager.MAPFIELDSEPARATOR));
      Field field=populateValueRequest.getFieldManager().getField(instance.getClass(),fieldName);
      FieldInfo fieldInfo=buildFieldInfo(field);
      String manyToField=null;
      if (populateValueRequest.getMetadata().getManyToField() != null) {
        manyToField=populateValueRequest.getMetadata().getManyToField();
      }
      if (manyToField == null) {
        manyToField=fieldInfo.getManyToManyMappedBy();
      }
      if (manyToField == null) {
        manyToField=fieldInfo.getOneToManyMappedBy();
      }
      if (manyToField != null) {
        String propertyName=populateValueRequest.getProperty().getName();
        Object middleInstance=instance;
        if (propertyName.contains(".")) {
          propertyName=propertyName.substring(0,propertyName.lastIndexOf("."));
          middleInstance=populateValueRequest.getFieldManager().getFieldValue(instance,propertyName);
        }
        populateValueRequest.getFieldManager().setFieldValue(assignableValue,manyToField,middleInstance);
        if (!populateValueRequest.getPersistenceManager().getDynamicEntityDao().getStandardEntityManager().contains(middleInstance)) {
          persistValue=false;
        }
      }
      if (Searchable.class.isAssignableFrom(valueType)) {
        ((Searchable)assignableValue).setSearchable(populateValueRequest.getMetadata().getSearchable());
      }
      if (persistValue) {
        populateValueRequest.getPersistenceManager().getDynamicEntityDao().persist(assignableValue);
      }
    }
 else {
      if (FieldProviderResponse.NOT_HANDLED == super.populateValue(populateValueRequest,instance)) {
        return FieldProviderResponse.NOT_HANDLED;
      }
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
  populateValueRequest.getProperty().setIsDirty(dirty);
  return FieldProviderResponse.HANDLED_BREAK;
}

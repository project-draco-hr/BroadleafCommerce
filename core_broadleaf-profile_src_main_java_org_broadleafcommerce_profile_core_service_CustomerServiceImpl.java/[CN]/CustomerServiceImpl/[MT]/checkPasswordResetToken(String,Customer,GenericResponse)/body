{
  if (StringUtils.isBlank(token)) {
    response.addErrorCode("invalidToken");
  }
  boolean usingOldPasswordEncoder=passwordEncoder != null;
  String rawToken=null;
  String salt=null;
  if (usingOldPasswordEncoder) {
    String[] tokens=token.split("-");
    if (tokens.length > 2) {
      response.addErrorCode("invalidToken");
    }
 else {
      rawToken=tokens[0].toLowerCase();
      if (tokens.length == 2) {
        salt=tokens[1];
      }
    }
  }
  CustomerForgotPasswordSecurityToken fpst=null;
  if (!response.getHasErrors()) {
    if (usingOldPasswordEncoder) {
      fpst=customerForgotPasswordSecurityTokenDao.readToken(passwordEncoder.encodePassword(rawToken,salt));
    }
 else {
      List<CustomerForgotPasswordSecurityToken> fpstoks=customerForgotPasswordSecurityTokenDao.readUnusedTokensByCustomerId(customer.getId());
      for (      CustomerForgotPasswordSecurityToken fpstok : fpstoks) {
        if (passwordEncoderNew.matches(token,fpstok.getToken())) {
          fpst=fpstok;
          break;
        }
      }
    }
    if (fpst == null) {
      response.addErrorCode("invalidToken");
    }
 else     if (fpst.isTokenUsedFlag()) {
      response.addErrorCode("tokenUsed");
    }
 else     if (isTokenExpired(fpst)) {
      response.addErrorCode("tokenExpired");
    }
  }
  return fpst;
}

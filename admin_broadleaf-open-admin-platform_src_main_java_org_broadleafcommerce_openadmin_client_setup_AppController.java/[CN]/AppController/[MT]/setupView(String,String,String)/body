{
  AppServices.SECURITY.getAdminUser(new AbstractCallback<AdminUser>(){
    @Override public void onSuccess(    AdminUser result){
      if (result == null) {
        UrlBuilder builder=Window.Location.createUrlBuilder();
        builder.setPath(BLCMain.webAppContext + "/admin/adminLogout.htm");
        builder.setParameter("time",String.valueOf(System.currentTimeMillis()));
        Window.open(builder.buildString(),"_self",null);
      }
 else {
        if (SecurityManager.getInstance().isUserAuthorizedToViewSection(viewKey)) {
          uiFactory.clearCurrentView();
          uiFactory.getView(viewKey,false,false,new AsyncClient(){
            @Override public void onSuccess(            Object instance){
              final Display view=(Display)instance;
              uiFactory.getPresenter(presenterKey,new AsyncClient(){
                @Override public void onSuccess(                Object instance){
                  EntityPresenter presenter=(EntityPresenter)instance;
                  List<PresenterModifier> presenterModifierList=findPresenterModifiers(presenter.getClass());
                  if (presenterModifierList != null && presenter instanceof DynamicEntityPresenter) {
                    for (                    PresenterModifier modifier : presenterModifierList) {
                      modifier.setParentPresenter(((DynamicEntityPresenter)presenter));
                    }
                    ((DynamicEntityPresenter)presenter).getModifierList().addAll(presenterModifierList);
                  }
                  presenter.setDefaultItemId(itemId);
                  presenter.setDisplay(view);
                  presenter.setEventBus(eventBus);
                  BLCMain.currentViewKey=viewKey;
                  if (presenter.getPresenterSequenceSetupManager() != null) {
                    presenter.getPresenterSequenceSetupManager().setCanvas(container);
                    presenter.setup();
                    if (presenterModifierList != null) {
                      for (                      PresenterModifier modifier : presenterModifierList) {
                        modifier.setup();
                      }
                    }
                    presenter.getPresenterSequenceSetupManager().launch();
                  }
 else {
                    if (presenterModifierList != null) {
                      for (                      PresenterModifier modifier : presenterModifierList) {
                        modifier.setup();
                      }
                    }
                    presenter.setup();
                  }
                }
                @Override public void onUnavailable(){
                  throw new RuntimeException("Unable to show item: " + presenterKey);
                }
              }
);
            }
            @Override public void onUnavailable(){
              throw new RuntimeException("Unable to show item: " + viewKey);
            }
          }
);
        }
      }
    }
  }
);
}

{
  getDisplay().build(entityDataSource,additionalDataSources);
  formPresenter=new DynamicFormPresenter(display.getDynamicFormDisplay());
  ((PresentationLayerAssociatedDataSource)entityDataSource).setAssociatedGrid(display.getListDisplay().getGrid());
  for (  final Map.Entry<String,CollectionMetadata> entry : collectionMetadatas.entrySet()) {
    boolean shouldLoad=false;
    ClassTree classTree=((DynamicEntityDataSource)getDisplay().getListDisplay().getGrid().getDataSource()).getPolymorphicEntityTree();
    for (    String availableType : entry.getValue().getAvailableToTypes()) {
      ClassTree availableTypeResult=classTree.find(availableType);
      if (availableTypeResult != null) {
        shouldLoad=true;
        break;
      }
    }
    if (shouldLoad) {
      final String dataSourceName;
      if (entry.getValue().getDataSourceName() != null && entry.getValue().getDataSourceName().length() > 0) {
        dataSourceName=entry.getValue().getDataSourceName();
      }
 else {
        dataSourceName=entry.getKey() + "AdvancedCollectionDS";
      }
      if (presenterSequenceSetupManager.getDataSource(dataSourceName) != null) {
        java.util.logging.Logger.getLogger(getClass().toString()).log(Level.FINE,"Detected collection metadata for a datasource that is already registered (" + dataSourceName + "). Ignoring this repeated definition.");
        return;
      }
      entry.getValue().accept(new MetadataVisitorAdapter(){
        @Override public void visit(        final BasicCollectionMetadata metadata){
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new AdvancedCollectionDataSourceFactory(metadata),new AsyncCallbackAdapter(){
            @Override public void onSetupSuccess(            final DataSource baseDS){
              if (metadata.getAddType() == AddType.PERSIST) {
                FormBuilder.buildAdvancedCollectionForm(baseDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
            }
          }
));
          if (metadata.getAddType() == AddType.LOOKUP) {
            String lookupDSName=dataSourceName + "Lookup";
            presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(lookupDSName,new AdvancedCollectionLookupDataSourceFactory(metadata),new AsyncCallbackAdapter(){
              @Override public void onSetupSuccess(              DataSource lookupDS){
                FormBuilder.buildAdvancedCollectionForm(presenterSequenceSetupManager.getDataSource(dataSourceName),lookupDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
            }
));
          }
        }
        @Override public void visit(        final AdornedTargetCollectionMetadata metadata){
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new AdvancedCollectionDataSourceFactory(metadata),new NullAsyncCallbackAdapter()));
          String lookupDSName=dataSourceName + "Lookup";
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(lookupDSName,new AdvancedCollectionLookupDataSourceFactory(metadata),new AsyncCallbackAdapter(){
            @Override public void onSetupSuccess(            DataSource lookupDS){
              FormBuilder.buildAdvancedCollectionForm(presenterSequenceSetupManager.getDataSource(dataSourceName),lookupDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
            }
          }
));
        }
      }
);
    }
  }
}

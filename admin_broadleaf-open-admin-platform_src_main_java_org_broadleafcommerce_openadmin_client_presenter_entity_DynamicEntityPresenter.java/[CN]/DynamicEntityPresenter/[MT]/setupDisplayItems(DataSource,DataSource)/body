{
  getDisplay().build(entityDataSource,additionalDataSources);
  gridHelper.traverseTreeAndAddHandlers(getDisplay().getListDisplay().getGrid());
  formPresenter=new DynamicFormPresenter(display.getDynamicFormDisplay());
  ((PresentationLayerAssociatedDataSource)entityDataSource).setAssociatedGrid(display.getListDisplay().getGrid());
  for (  final Map.Entry<String,LookupMetadata> entry : lookupMetadatas.entrySet()) {
    if (entry.getKey().startsWith(getClass().getName())) {
      final String key=entry.getKey().substring(entry.getKey().indexOf("_") + 1,entry.getKey().length());
      final String dataSourceName=key + "Lookup";
      if (presenterSequenceSetupManager.containsDataSource(dataSourceName)) {
        java.util.logging.Logger.getLogger(getClass().toString()).log(Level.FINE,"Detected collection metadata for a datasource that is already registered (" + dataSourceName + "). Ignoring this repeated definition.");
        continue;
      }
      presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new ForeignKeyLookupDataSourceFactory(entry.getValue().getLookupForeignKey()),new AsyncCallbackAdapter(){
        @Override public void onSetupSuccess(        DataSource lookupDS){
          EntitySearchDialog searchView=new EntitySearchDialog((ListGridDataSource)lookupDS,true);
          String viewTitle;
          try {
            viewTitle=BLCMain.getMessageManager().getString(entry.getValue().getFriendlyName());
          }
 catch (          MissingResourceException e) {
            viewTitle=entry.getValue().getFriendlyName();
          }
          DynamicEntityDataSource parentDataSource;
          if (entry.getValue().getParentDataSourceName() == null || entry.getValue().getParentDataSourceName().length() == 0) {
            parentDataSource=(DynamicEntityDataSource)entityDataSource;
          }
 else {
            parentDataSource=presenterSequenceSetupManager.getDataSource(entry.getValue().getParentDataSourceName());
          }
          DynamicFormDisplay target;
          if (entry.getValue().getTargetDynamicFormDisplayId() == null || entry.getValue().getTargetDynamicFormDisplayId().length() == 0) {
            target=getDisplay().getDynamicFormDisplay();
          }
 else {
            Layout temp=FormBuilder.findMemberById((Layout)getDisplay(),entry.getValue().getTargetDynamicFormDisplayId());
            if (!(temp instanceof DynamicFormDisplay)) {
              throw new RuntimeException("The target destination for a foreign key lookup must be an instance of DynamicFormDisplay. The requested destination (" + entry.getValue().getTargetDynamicFormDisplayId() + ") is an instance of "+ temp.getClass().getName());
            }
            target=(DynamicFormDisplay)temp;
          }
          parentDataSource.getFormItemCallbackHandlerManager().addSearchFormItemCallback(key,searchView,viewTitle,target,entry.getValue().getLookupForeignKey(),null);
        }
      }
));
    }
  }
  List<Map.Entry<String,CollectionMetadata>> list=new LinkedList<Map.Entry<String,CollectionMetadata>>(collectionMetadatas.entrySet());
  Iterator<Map.Entry<String,CollectionMetadata>> itr=list.iterator();
  while (itr.hasNext()) {
    if (!itr.next().getKey().startsWith(getClass().getName())) {
      itr.remove();
    }
  }
  Collections.sort(list,new Comparator<Map.Entry<String,CollectionMetadata>>(){
    @Override public int compare(    Map.Entry<String,CollectionMetadata> o1,    Map.Entry<String,CollectionMetadata> o2){
      return o1.getValue().getOrder().compareTo(o2.getValue().getOrder());
    }
  }
);
  Map<String,CollectionMetadata> sortedMetadatas=new LinkedHashMap<String,CollectionMetadata>();
  for (  Map.Entry<String,CollectionMetadata> entry : list) {
    String key=entry.getKey();
    key=key.substring(key.indexOf("_") + 1,key.length());
    sortedMetadatas.put(key,entry.getValue());
  }
  for (  final Map.Entry<String,CollectionMetadata> entry : sortedMetadatas.entrySet()) {
    boolean shouldLoad=false;
    ClassTree classTree=((DynamicEntityDataSource)getDisplay().getListDisplay().getGrid().getDataSource()).getPolymorphicEntityTree();
    for (    String availableType : entry.getValue().getAvailableToTypes()) {
      ClassTree availableTypeResult=classTree.find(availableType);
      if (availableTypeResult != null) {
        shouldLoad=true;
        break;
      }
    }
    if (shouldLoad) {
      final String dataSourceName;
      if (entry.getValue().getDataSourceName() != null && entry.getValue().getDataSourceName().length() > 0) {
        dataSourceName=entry.getValue().getDataSourceName();
      }
 else {
        dataSourceName=entry.getKey() + "AdvancedCollectionDS";
      }
      if (presenterSequenceSetupManager.containsDataSource(dataSourceName)) {
        java.util.logging.Logger.getLogger(getClass().toString()).log(Level.FINE,"Detected collection metadata for a datasource that is already registered (" + dataSourceName + "). Ignoring this repeated definition.");
        continue;
      }
      entry.getValue().accept(new MetadataVisitorAdapter(){
        @Override public void visit(        final BasicCollectionMetadata metadata){
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new AdvancedCollectionDataSourceFactory(metadata,DynamicEntityPresenter.this),new AsyncCallbackAdapter(){
            @Override public void onSetupSuccess(            final DataSource baseDS){
              if (metadata.getAddMethodType() == AddMethodType.PERSIST) {
                FormBuilder.buildAdvancedCollectionForm(baseDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
            }
          }
));
          if (metadata.getAddMethodType() == AddMethodType.LOOKUP) {
            String lookupDSName=dataSourceName + "Lookup";
            presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(lookupDSName,new AdvancedCollectionLookupDataSourceFactory(metadata),new AsyncCallbackAdapter(){
              @Override public void onSetupSuccess(              DataSource lookupDS){
                FormBuilder.buildAdvancedCollectionForm(presenterSequenceSetupManager.getDataSource(dataSourceName),lookupDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
            }
));
          }
        }
        @Override public void visit(        final AdornedTargetCollectionMetadata metadata){
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new AdvancedCollectionDataSourceFactory(metadata,DynamicEntityPresenter.this),new NullAsyncCallbackAdapter()));
          String lookupDSName=dataSourceName + "Lookup";
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(lookupDSName,new AdvancedCollectionLookupDataSourceFactory(metadata),new AsyncCallbackAdapter(){
            @Override public void onSetupSuccess(            DataSource lookupDS){
              FormBuilder.buildAdvancedCollectionForm(presenterSequenceSetupManager.getDataSource(dataSourceName),lookupDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
            }
          }
));
        }
        @Override public void visit(        final MapMetadata metadata){
          final String lookupDSName=dataSourceName + "Lookup";
          if (metadata.getMapKeyOptionEntityClass() != null && metadata.getMapKeyOptionEntityClass().length() > 0) {
            presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(lookupDSName,new AdvancedCollectionLookupDataSourceFactory(metadata),new NullAsyncCallbackAdapter()));
          }
          presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new AdvancedCollectionDataSourceFactory(metadata,DynamicEntityPresenter.this),new AsyncCallbackAdapter(){
            @Override public void onSetupSuccess(            DataSource baseDS){
              if (metadata.getMapKeyOptionEntityClass() == null || metadata.getMapKeyOptionEntityClass().length() == 0) {
                FormBuilder.buildAdvancedCollectionForm(baseDS,metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
 else {
                FormBuilder.buildAdvancedCollectionForm(baseDS,presenterSequenceSetupManager.getDataSource(lookupDSName),metadata,entry.getKey(),DynamicEntityPresenter.this);
              }
            }
          }
));
        }
      }
);
    }
  }
}

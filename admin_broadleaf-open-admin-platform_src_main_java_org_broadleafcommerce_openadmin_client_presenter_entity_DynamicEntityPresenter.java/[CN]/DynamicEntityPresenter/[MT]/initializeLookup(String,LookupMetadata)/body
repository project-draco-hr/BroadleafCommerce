{
  final String dataSourceName=metadata.getDefaultDataSource().getDataURL() + "_" + propertyName+ "Lookup";
  if (presenterSequenceSetupManager.containsDataSource(dataSourceName)) {
    java.util.logging.Logger.getLogger(getClass().toString()).log(Level.FINE,"Detected collection metadata for a datasource that is already registered (" + dataSourceName + "). Ignoring this repeated definition.");
    return;
  }
  presenterSequenceSetupManager.addOrReplaceItem(new PresenterSetupItem(dataSourceName,new ForeignKeyLookupDataSourceFactory(metadata.getLookupForeignKey(),metadata.getCustomCriteria(),metadata.getUseServerSideInspectionCache()),new AsyncCallbackAdapter(){
    @Override public void onSetupSuccess(    DataSource lookupDS){
      EntitySearchDialog searchView=new EntitySearchDialog((ListGridDataSource)lookupDS,true);
      String viewTitle=BLCMain.getMessageManager().getString(metadata.getFriendlyName());
      if (viewTitle == null) {
        viewTitle=metadata.getFriendlyName();
      }
      DynamicEntityDataSource parentDataSource;
      if (metadata.getParentDataSourceName() == null || metadata.getParentDataSourceName().length() == 0) {
        parentDataSource=(DynamicEntityDataSource)metadata.getDefaultDataSource();
      }
 else {
        parentDataSource=presenterSequenceSetupManager.getDataSource(metadata.getParentDataSourceName());
      }
      DynamicFormDisplay target;
      if (metadata.getTargetDynamicFormDisplayId() == null || metadata.getTargetDynamicFormDisplayId().length() == 0) {
        target=getDisplay().getDynamicFormDisplay();
      }
 else {
        Layout temp=FormBuilder.findMemberById((Layout)getDisplay(),metadata.getTargetDynamicFormDisplayId());
        if (!(temp instanceof DynamicFormDisplay)) {
          throw new RuntimeException("The target destination for a foreign key lookup must be an instance of DynamicFormDisplay. The requested destination (" + metadata.getTargetDynamicFormDisplayId() + ") is an instance of "+ temp.getClass().getName());
        }
        target=(DynamicFormDisplay)temp;
      }
      parentDataSource.getFormItemCallbackHandlerManager().addSearchFormItemCallback(propertyName,searchView,viewTitle,target,metadata.getLookupForeignKey(),null);
    }
  }
));
}

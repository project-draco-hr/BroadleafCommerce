{
  formPresenter.bind();
  for (  PresenterModifier modifier : modifierList) {
    modifier.bind();
  }
  formPresenter.getSaveButtonHandlerRegistration().removeHandler();
  saveButtonHandlerRegistration=display.getDynamicFormDisplay().getSaveButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        saveClicked();
      }
    }
  }
);
  addClickHandlerRegistration=display.getListDisplay().getAddButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        addClicked();
      }
    }
  }
);
  removeClickHandlerRegistration=display.getListDisplay().getRemoveButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        SC.confirm("Are your sure you want to delete this entity?",new BooleanCallback(){
          @Override public void execute(          Boolean value){
            if (value) {
              removeClicked();
            }
          }
        }
);
      }
    }
  }
);
  fetchDataHandlerRegistration=display.getListDisplay().getGrid().addFetchDataHandler(new FetchDataHandler(){
    @Override public void onFilterData(    FetchDataEvent event){
      setStartState();
      formPresenter.disable();
      display.getListDisplay().getGrid().deselectAllRecords();
      for (      Map.Entry<String,SubPresentable> subPresentable : subPresentables.entrySet()) {
        subPresentable.getValue().disable();
      }
      lastSelectedRecord=null;
    }
  }
);
  selectionChangedHandlerRegistration=display.getListDisplay().getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      ListGridRecord selectedRecord=event.getSelectedRecord();
      if (event.getState() && selectedRecord != null) {
        if (!selectedRecord.equals(lastSelectedRecord)) {
          lastSelectedRecord=selectedRecord;
          if (selectedRecord.getAttributeAsStringArray("_type") == null) {
            formPresenter.disable();
            display.getListDisplay().getRemoveButton().disable();
          }
 else {
            formPresenter.setStartState();
            ((DynamicEntityDataSource)display.getListDisplay().getGrid().getDataSource()).resetPermanentFieldVisibilityBasedOnType(selectedRecord.getAttributeAsStringArray("_type"));
            String locked=selectedRecord.getAttribute("__locked");
            display.getDynamicFormDisplay().getFormOnlyDisplay().buildFields(display.getListDisplay().getGrid().getDataSource(),true,!(locked != null && locked.equals("true")),false,selectedRecord);
            display.getDynamicFormDisplay().getFormOnlyDisplay().getForm().editRecord(selectedRecord);
            display.getListDisplay().getRemoveButton().enable();
          }
          changeSelectionWrapper(selectedRecord);
          for (          Map.Entry<String,SubPresentable> subPresentable : subPresentables.entrySet()) {
            subPresentable.getValue().setStartState();
            subPresentable.getValue().load(selectedRecord,(DynamicEntityDataSource)display.getListDisplay().getGrid().getDataSource());
          }
          display.getDynamicFormDisplay().getSaveButton().disable();
          display.getDynamicFormDisplay().getRefreshButton().disable();
        }
      }
    }
  }
);
  entityTypeChangedHandlerRegistration=display.getListDisplay().getEntityType().addChangedHandler(new ChangedHandler(){
    @Override public void onChanged(    ChangedEvent event){
      ((DynamicEntityDataSource)display.getListDisplay().getGrid().getDataSource()).setDefaultNewEntityFullyQualifiedClassname((String)event.getItem().getValue());
    }
  }
);
  cellSavedHandlerRegistration=display.getListDisplay().getGrid().addCellSavedHandler(new CellSavedHandler(){
    @Override public void onCellSaved(    CellSavedEvent event){
      display.getListDisplay().getGrid().deselectAllRecords();
      display.getListDisplay().getGrid().selectRecord(event.getRecord());
    }
  }
);
  showArchivedButtonHandlerRegistration=display.getListDisplay().getShowArchivedButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      if (event.isLeftButtonDown()) {
        ((AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource()).setShowArchived(!((AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource()).isShowArchived());
        String title=((AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource()).isShowArchived() ? BLCMain.getMessageManager().getString("hideArchivedRecords") : BLCMain.getMessageManager().getString("showArchivedRecords");
        display.getListDisplay().getShowArchivedButton().setTitle(title);
        ((AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource()).getPersistencePerspective().setShowArchivedFields(((AbstractDynamicDataSource)display.getListDisplay().getGrid().getDataSource()).isShowArchived());
        display.getListDisplay().getGrid().invalidateCache();
      }
    }
  }
);
}

{
  for (  PersistenceManagerEventHandler handler : persistenceManagerEventHandlers) {
    PersistenceManagerEventHandlerResponse response=handler.preAdd(this,persistencePackage);
    if (PersistenceManagerEventHandlerResponse.PersistenceManagerEventHandlerResponseStatus.HANDLED_BREAK == response.getStatus()) {
      break;
    }
  }
  Entity response;
  try {
    checkRoot: {
      for (      CustomPersistenceHandler handler : getCustomPersistenceHandlers()) {
        if (handler.canHandleAdd(persistencePackage)) {
          if (!handler.willHandleSecurity(persistencePackage)) {
            adminRemoteSecurityService.securityCheck(persistencePackage.getCeilingEntityFullyQualifiedClassname(),EntityOperationType.ADD);
          }
          response=handler.add(persistencePackage,dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC));
          break checkRoot;
        }
      }
      adminRemoteSecurityService.securityCheck(persistencePackage.getCeilingEntityFullyQualifiedClassname(),EntityOperationType.ADD);
      PersistenceModule myModule=getCompatibleModule(persistencePackage.getPersistencePerspective().getOperationTypes().getAddType());
      response=myModule.add(persistencePackage);
    }
  }
 catch (  ServiceException e) {
    if (e.getCause() instanceof ValidationException) {
      response=((ValidationException)e.getCause()).getEntity();
    }
 else {
      throw e;
    }
  }
  if (!MapUtils.isEmpty(persistencePackage.getSubPackages())) {
    Class<?> entityClass;
    try {
      entityClass=Class.forName(response.getType()[0]);
    }
 catch (    ClassNotFoundException e) {
      throw new ServiceException(e);
    }
    Map<String,Object> idMetadata=getDynamicEntityDao().getIdMetadata(entityClass);
    String idProperty=(String)idMetadata.get("name");
    String idVal=response.findProperty(idProperty).getValue();
    Map<String,List<String>> subPackageValidationErrors=new HashMap<String,List<String>>();
    for (    Map.Entry<String,PersistencePackage> subPackage : persistencePackage.getSubPackages().entrySet()) {
      Entity subResponse;
      try {
        subPackage.getValue().getCustomCriteria()[1]=idVal;
        checkHandler: {
          for (          CustomPersistenceHandler handler : getCustomPersistenceHandlers()) {
            if (handler.canHandleAdd(subPackage.getValue())) {
              if (!handler.willHandleSecurity(subPackage.getValue())) {
                adminRemoteSecurityService.securityCheck(subPackage.getValue().getCeilingEntityFullyQualifiedClassname(),EntityOperationType.ADD);
              }
              subResponse=handler.add(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC));
              subPackage.getValue().setEntity(subResponse);
              break checkHandler;
            }
          }
          adminRemoteSecurityService.securityCheck(subPackage.getValue().getCeilingEntityFullyQualifiedClassname(),EntityOperationType.ADD);
          PersistenceModule subModule=getCompatibleModule(subPackage.getValue().getPersistencePerspective().getOperationTypes().getAddType());
          subResponse=subModule.add(persistencePackage);
          subPackage.getValue().setEntity(subResponse);
        }
      }
 catch (      ValidationException e) {
        subPackage.getValue().setEntity(e.getEntity());
      }
catch (      ServiceException e) {
        if (e.getCause() instanceof ValidationException) {
          response=((ValidationException)e.getCause()).getEntity();
        }
 else {
          throw e;
        }
      }
    }
    for (    Map.Entry<String,PersistencePackage> subPackage : persistencePackage.getSubPackages().entrySet()) {
      for (      Map.Entry<String,List<String>> error : subPackage.getValue().getEntity().getValidationErrors().entrySet()) {
        subPackageValidationErrors.put(subPackage.getKey() + DynamicEntityFormInfo.FIELD_SEPARATOR + error.getKey(),error.getValue());
      }
    }
    response.getValidationErrors().putAll(subPackageValidationErrors);
  }
  if (response.isValidationFailure()) {
    PersistenceResponse validationResponse=executeValidationProcessors(persistencePackage,new PersistenceResponse().withEntity(response));
    throw new ValidationException(validationResponse.getEntity(),"The entity has failed validation");
  }
  return executePostAddHandlers(persistencePackage,new PersistenceResponse().withEntity(response));
}

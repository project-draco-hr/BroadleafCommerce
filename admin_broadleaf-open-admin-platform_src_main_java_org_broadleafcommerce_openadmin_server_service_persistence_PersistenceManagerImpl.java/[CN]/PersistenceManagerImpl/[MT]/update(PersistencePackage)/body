{
  for (  PersistenceManagerEventHandler handler : persistenceManagerEventHandlers) {
    PersistenceManagerEventHandlerResponse response=handler.preUpdate(this,persistencePackage);
    if (PersistenceManagerEventHandlerResponse.PersistenceManagerEventHandlerResponseStatus.HANDLED_BREAK == response.getStatus()) {
      break;
    }
  }
  Entity response;
  try {
    checkRoot: {
      for (      CustomPersistenceHandler handler : getCustomPersistenceHandlers()) {
        if (handler.canHandleUpdate(persistencePackage)) {
          if (!handler.willHandleSecurity(persistencePackage)) {
            adminRemoteSecurityService.securityCheck(persistencePackage,EntityOperationType.UPDATE);
          }
          response=handler.update(persistencePackage,dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC));
          break checkRoot;
        }
      }
      adminRemoteSecurityService.securityCheck(persistencePackage,EntityOperationType.UPDATE);
      PersistenceModule myModule=getCompatibleModule(persistencePackage.getPersistencePerspective().getOperationTypes().getUpdateType());
      response=myModule.update(persistencePackage);
    }
  }
 catch (  ValidationException e) {
    response=e.getEntity();
  }
catch (  ServiceException e) {
    if (e.getCause() instanceof ValidationException) {
      response=((ValidationException)e.getCause()).getEntity();
    }
 else {
      throw e;
    }
  }
  Map<String,List<String>> subPackageValidationErrors=new HashMap<String,List<String>>();
  for (  Map.Entry<String,PersistencePackage> subPackage : persistencePackage.getSubPackages().entrySet()) {
    try {
      checkHandler: {
        for (        CustomPersistenceHandler handler : getCustomPersistenceHandlers()) {
          if (handler.canHandleUpdate(subPackage.getValue())) {
            Entity subResponse=handler.update(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC));
            subPackage.getValue().setEntity(subResponse);
            break checkHandler;
          }
        }
        PersistenceModule subModule=getCompatibleModule(subPackage.getValue().getPersistencePerspective().getOperationTypes().getUpdateType());
        Entity subResponse=subModule.update(persistencePackage);
        subPackage.getValue().setEntity(subResponse);
      }
    }
 catch (    ValidationException e) {
      subPackage.getValue().setEntity(e.getEntity());
    }
catch (    ServiceException e) {
      if (e.getCause() instanceof ValidationException) {
        response=((ValidationException)e.getCause()).getEntity();
      }
 else {
        throw e;
      }
    }
  }
  for (  Map.Entry<String,PersistencePackage> subPackage : persistencePackage.getSubPackages().entrySet()) {
    for (    Map.Entry<String,List<String>> error : subPackage.getValue().getEntity().getValidationErrors().entrySet()) {
      subPackageValidationErrors.put(subPackage.getKey() + DynamicEntityFormInfo.FIELD_SEPARATOR + error.getKey(),error.getValue());
    }
  }
  response.getValidationErrors().putAll(subPackageValidationErrors);
  if (response.isValidationFailure()) {
    PersistenceResponse validationResponse=executeValidationProcessors(persistencePackage,new PersistenceResponse().withEntity(response));
    throw new ValidationException(validationResponse.getEntity(),"The entity has failed validation");
  }
  return executePostUpdateHandlers(persistencePackage,new PersistenceResponse().withEntity(response));
}

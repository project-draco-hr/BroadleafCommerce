{
  StringTokenizer tokens=new StringTokenizer(fieldName,".");
  Class<?> componentClass=bean.getClass();
  Field field;
  Object value=bean;
  while (tokens.hasMoreTokens()) {
    String fieldNamePart=tokens.nextToken();
    String mapKey=null;
    if (fieldNamePart.contains(FieldManager.MAPFIELDSEPARATOR)) {
      mapKey=fieldNamePart.substring(fieldNamePart.indexOf(FieldManager.MAPFIELDSEPARATOR) + FieldManager.MAPFIELDSEPARATOR.length(),fieldNamePart.length());
      fieldNamePart=fieldNamePart.substring(0,fieldNamePart.indexOf(FieldManager.MAPFIELDSEPARATOR));
    }
    field=getSingleField(componentClass,fieldNamePart);
    if (field != null) {
      field.setAccessible(true);
      value=field.get(value);
      if (value != null && mapKey != null) {
        value=((Map)value).get(mapKey);
      }
      if (value != null) {
        componentClass=value.getClass();
      }
 else {
        break;
      }
    }
 else {
      throw new FieldNotAvailableException("Unable to find field (" + fieldNamePart + ") on the class ("+ componentClass+ ")");
    }
  }
  return value;
}

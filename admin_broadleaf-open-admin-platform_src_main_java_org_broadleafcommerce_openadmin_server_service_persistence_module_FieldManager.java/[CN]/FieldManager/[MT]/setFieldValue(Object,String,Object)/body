{
  StringTokenizer tokens=new StringTokenizer(fieldName,".");
  Class<?> componentClass=bean.getClass();
  Field field;
  Object value=bean;
  int count=tokens.countTokens();
  int j=0;
  StringBuilder sb=new StringBuilder();
  while (tokens.hasMoreTokens()) {
    String fieldNamePart=tokens.nextToken();
    sb.append(fieldNamePart);
    String mapKey=null;
    if (fieldNamePart.contains(FieldManager.MAPFIELDSEPARATOR)) {
      mapKey=fieldNamePart.substring(fieldNamePart.indexOf(FieldManager.MAPFIELDSEPARATOR) + FieldManager.MAPFIELDSEPARATOR.length(),fieldNamePart.length());
      fieldNamePart=fieldNamePart.substring(0,fieldNamePart.indexOf(FieldManager.MAPFIELDSEPARATOR));
    }
    field=getSingleField(componentClass,fieldNamePart);
    field.setAccessible(true);
    if (j == count - 1) {
      if (mapKey != null) {
        Map map=(Map)field.get(value);
        if (newValue == null) {
          map.remove(mapKey);
        }
 else {
          map.put(mapKey,newValue);
        }
      }
 else {
        field.set(value,newValue);
      }
    }
 else {
      Object myValue=field.get(value);
      if (myValue != null) {
        componentClass=myValue.getClass();
        value=myValue;
      }
 else {
        try {
          Object newEntity=entityConfiguration.createEntityInstance(field.getType().getName());
          SortableValue val=new SortableValue(bean,(Serializable)newEntity,j,sb.toString());
          middleFields.add(val);
          field.set(value,newEntity);
          componentClass=newEntity.getClass();
          value=newEntity;
        }
 catch (        Exception e) {
          Class<?>[] entities=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(field.getType());
          if (!ArrayUtils.isEmpty(entities)) {
            Object newEntity=entities[0].newInstance();
            SortableValue val=new SortableValue(bean,(Serializable)newEntity,j,sb.toString());
            middleFields.add(val);
            field.set(value,newEntity);
            componentClass=newEntity.getClass();
            value=newEntity;
            LOG.info("Unable to find a reference to (" + field.getType().getName() + ") in the EntityConfigurationManager. Using the most extended form of this class identified as ("+ entities[0].getName()+ ")");
          }
 else {
            Object newEntity=field.getType().newInstance();
            field.set(value,newEntity);
            componentClass=newEntity.getClass();
            value=newEntity;
            LOG.info("Unable to find a reference to (" + field.getType().getName() + ") in the EntityConfigurationManager. Using the type of this class.");
          }
        }
      }
    }
    sb.append(".");
    j++;
  }
  return value;
}

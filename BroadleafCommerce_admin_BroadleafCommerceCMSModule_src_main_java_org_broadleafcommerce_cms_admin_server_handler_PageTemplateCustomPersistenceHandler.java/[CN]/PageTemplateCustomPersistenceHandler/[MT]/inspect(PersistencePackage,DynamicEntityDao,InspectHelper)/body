{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    String pageTemplateId=persistencePackage.getCustomCriteria()[1];
    PageTemplate template=pageService.findPageTemplateById(Long.valueOf(pageTemplateId));
    ClassMetadata metadata=new ClassMetadata();
    metadata.setCeilingType(PageTemplate.class.getName());
    PolymorphicEntity entity=new PolymorphicEntity();
    entity.setName("PageTemplateImpl");
    entity.setType(PageTemplateImpl.class.getName());
    PolymorphicEntity[] entities=new PolymorphicEntity[]{entity};
    metadata.setPolymorphicEntities(entities);
    int groupCount=1;
    int fieldCount=0;
    List<Property> propertiesList=new ArrayList<Property>();
    List<FieldGroup> groups=template.getFieldGroups();
    for (    FieldGroup group : groups) {
      List<FieldDefinition> definitions=group.getFieldDefinitions();
      for (      FieldDefinition definition : definitions) {
        Property property=new Property();
        property.setName(definition.getName());
        FieldMetadata fieldMetadata=new FieldMetadata();
        property.setMetadata(fieldMetadata);
        fieldMetadata.setFieldType(definition.getFieldType());
        fieldMetadata.setMutable(true);
        fieldMetadata.setInheritedFromType(PageTemplateImpl.class.getName());
        fieldMetadata.setAvailableToTypes(new String[]{PageTemplateImpl.class.getName()});
        fieldMetadata.setCollection(false);
        fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
        fieldMetadata.setLength(definition.getMaxLength());
        if (definition.getFieldEnumeration() != null && !CollectionUtils.isEmpty(definition.getFieldEnumeration().getEnumerationItems())) {
          int count=definition.getFieldEnumeration().getEnumerationItems().size();
          String[][] enumItems=new String[count][2];
          for (int j=0; j < count; j++) {
            FieldEnumerationItem item=definition.getFieldEnumeration().getEnumerationItems().get(j);
            enumItems[j][0]=item.getName();
            enumItems[j][1]=item.getFriendlyName();
          }
          fieldMetadata.setEnumerationValues(enumItems);
        }
        FieldPresentationAttributes attributes=new FieldPresentationAttributes();
        fieldMetadata.setPresentationAttributes(attributes);
        attributes.setName(definition.getName());
        attributes.setFriendlyName(definition.getFriendlyName());
        attributes.setSecurityLevel(definition.getSecurityLevel() == null ? "" : definition.getSecurityLevel());
        attributes.setOrder(fieldCount++);
        attributes.setHidden(definition.getHiddenFlag());
        attributes.setGroup(group.getName());
        attributes.setGroupOrder(groupCount);
        attributes.setGroupCollapsed(group.getInitCollapsedFlag());
        attributes.setExplicitFieldType(SupportedFieldType.UNKNOWN);
        attributes.setLargeEntry(definition.getTextAreaFlag());
        attributes.setProminent(false);
        attributes.setColumnWidth(String.valueOf(definition.getColumnWidth()));
        attributes.setBroadleafEnumeration("");
        attributes.setReadOnly(false);
        if (definition.getValidationRegEx() != null) {
          Map<String,String> itemMap=new HashMap<String,String>();
          itemMap.put("regularExpression",definition.getValidationRegEx());
          itemMap.put("errorMessageKey",definition.getValidationErrorMesageKey());
          attributes.getValidationConfigurations().put("com.smartgwt.client.widgets.form.validator.RegExpValidator",itemMap);
        }
        propertiesList.add(property);
      }
      groupCount++;
      fieldCount=0;
    }
    Property property=new Property();
    property.setName("id");
    FieldMetadata fieldMetadata=new FieldMetadata();
    property.setMetadata(fieldMetadata);
    fieldMetadata.setFieldType(SupportedFieldType.ID);
    fieldMetadata.setSecondaryType(SupportedFieldType.INTEGER);
    fieldMetadata.setMutable(true);
    fieldMetadata.setInheritedFromType(PageTemplateImpl.class.getName());
    fieldMetadata.setAvailableToTypes(new String[]{PageTemplateImpl.class.getName()});
    fieldMetadata.setCollection(false);
    fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
    FieldPresentationAttributes attributes=new FieldPresentationAttributes();
    fieldMetadata.setPresentationAttributes(attributes);
    attributes.setName("id");
    attributes.setFriendlyName("ID");
    attributes.setSecurityLevel("");
    attributes.setHidden(true);
    attributes.setExplicitFieldType(SupportedFieldType.UNKNOWN);
    attributes.setLargeEntry(false);
    attributes.setProminent(false);
    attributes.setColumnWidth("*");
    attributes.setBroadleafEnumeration("");
    attributes.setReadOnly(true);
    propertiesList.add(property);
    Property[] properties=new Property[propertiesList.size()];
    properties=propertiesList.toArray(properties);
    Arrays.sort(properties,new Comparator<Property>(){
      public int compare(      Property o1,      Property o2){
        if (o1.getMetadata().getPresentationAttributes().getOrder() != null && o2.getMetadata().getPresentationAttributes().getOrder() != null) {
          return o1.getMetadata().getPresentationAttributes().getOrder().compareTo(o2.getMetadata().getPresentationAttributes().getOrder());
        }
 else         if (o1.getMetadata().getPresentationAttributes().getOrder() != null && o2.getMetadata().getPresentationAttributes().getOrder() == null) {
          return -1;
        }
 else         if (o1.getMetadata().getPresentationAttributes().getOrder() == null && o2.getMetadata().getPresentationAttributes().getOrder() != null) {
          return 1;
        }
 else         if (o1.getMetadata().getPresentationAttributes().getFriendlyName() != null && o2.getMetadata().getPresentationAttributes().getFriendlyName() != null) {
          return o1.getMetadata().getPresentationAttributes().getFriendlyName().compareTo(o2.getMetadata().getPresentationAttributes().getFriendlyName());
        }
 else {
          return o1.getName().compareTo(o2.getName());
        }
      }
    }
);
    metadata.setProperties(properties);
    DynamicResultSet results=new DynamicResultSet(metadata);
    return results;
  }
 catch (  Exception e) {
    LOG.error(e);
    throw new ServiceException("Unable to perform inspect for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

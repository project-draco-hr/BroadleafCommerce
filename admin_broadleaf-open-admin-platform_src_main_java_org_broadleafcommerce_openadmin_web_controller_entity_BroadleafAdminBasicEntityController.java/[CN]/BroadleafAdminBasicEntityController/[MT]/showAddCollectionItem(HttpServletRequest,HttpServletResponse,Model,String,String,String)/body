{
  String mainClassName=getClassNameForSection(sectionKey);
  ClassMetadata mainMetadata=service.getClassMetadata(mainClassName);
  for (  final Property p : mainMetadata.getProperties()) {
    if (p.getName().equals(collectionField)) {
      p.getMetadata().accept(new MetadataVisitor(){
        @Override public void visit(        BasicFieldMetadata fmd){
          try {
            String collectionClassName=fmd.getForeignKeyClass();
            ClassMetadata collectionMetadata=service.getClassMetadata(collectionClassName);
            PersistencePackageRequest request=PersistencePackageRequest.standard().withClassName(collectionClassName);
            Entity[] rows=service.getRecords(request);
            ListGrid listGrid=formService.buildListGrid(collectionMetadata,rows);
            listGrid.setListGridType("toOne");
            model.addAttribute("listGrid",listGrid);
            model.addAttribute("viewType","modalListGrid");
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public void visit(        BasicCollectionMetadata fmd){
          try {
            ForeignKey foreignKey=(ForeignKey)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
            PersistencePackageRequest request=PersistencePackageRequest.standard().withClassName(fmd.getCollectionCeilingEntity()).addForeignKey(foreignKey);
            ClassMetadata collectionMetadata=service.getClassMetadata(request);
            if (fmd.getAddMethodType().equals(AddMethodType.PERSIST)) {
              EntityForm entityForm=formService.createEntityForm(collectionMetadata);
              model.addAttribute("entityForm",entityForm);
              model.addAttribute("viewType","modalEntityForm");
            }
 else {
              Entity[] rows=service.getRecords(request);
              ListGrid listGrid=formService.buildListGrid(collectionMetadata,rows);
              listGrid.setListGridType("basicCollection");
              model.addAttribute("listGrid",listGrid);
              model.addAttribute("viewType","modalListGrid");
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public void visit(        AdornedTargetCollectionMetadata fmd){
          try {
            AdornedTargetList adornedList=(AdornedTargetList)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
            PersistencePackageRequest request=PersistencePackageRequest.adorned().withClassName(fmd.getCollectionCeilingEntity()).withAdornedList(adornedList);
            ClassMetadata collectionMetadata=service.getClassMetadata(request);
            Entity[] rows=service.getRecords(request);
            ListGrid listGrid=formService.buildListGrid(collectionMetadata,rows);
            EntityForm entityForm=formService.buildAdornedListForm(fmd,adornedList,id);
            model.addAttribute("listGrid",listGrid);
            model.addAttribute("entityForm",entityForm);
            if (fmd.getMaintainedAdornedTargetFields().length > 0) {
              listGrid.setListGridType("adornedTargetWithForm");
              model.addAttribute("viewType","modalAdornedListGridForm");
            }
 else {
              listGrid.setListGridType("adornedTarget");
              model.addAttribute("viewType","modalAdornedListGrid");
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public void visit(        MapMetadata fmd){
          try {
            MapStructure mapStructure=(MapStructure)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.MAPSTRUCTURE);
            ForeignKey foreignField=(ForeignKey)fmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
            PersistencePackageRequest request=PersistencePackageRequest.map().withClassName(fmd.getTargetClass()).withMapStructure(mapStructure).addForeignKey(foreignField);
            ClassMetadata collectionMetadata=service.getClassMetadata(request);
            EntityForm entityForm=formService.buildMapForm(fmd,mapStructure,collectionMetadata,id);
            model.addAttribute("entityForm",entityForm);
            model.addAttribute("viewType","modalMapEntityForm");
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
);
    }
  }
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  setModelAttributes(model,sectionKey);
  return "modules/modalContainer";
}

{
  String mainClassName=getClassNameForSection(sectionKey);
  ClassMetadata mainMetadata=service.getClassMetadata(mainClassName);
  Property collectionProperty=mainMetadata.getPMap().get(collectionField);
  FieldMetadata md=collectionProperty.getMetadata();
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(md);
  if (md instanceof BasicCollectionMetadata && ((BasicCollectionMetadata)md).getAddMethodType().equals(AddMethodType.PERSIST)) {
    BasicCollectionMetadata fmd=(BasicCollectionMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr);
    Entity entity=service.getRecord(fmd.getCollectionCeilingEntity(),collectionItemId);
    EntityForm entityForm=formService.buildEntityForm(collectionMetadata,entity);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modalEntityForm");
  }
 else   if (md instanceof AdornedTargetCollectionMetadata && ((AdornedTargetCollectionMetadata)md).getMaintainedAdornedTargetFields().length > 0) {
    AdornedTargetCollectionMetadata fmd=(AdornedTargetCollectionMetadata)md;
    EntityForm entityForm=formService.buildAdornedListForm(fmd,ppr.getAdornedList(),id);
    Entity entity=service.getAdvancedCollectionRecord(mainMetadata,id,collectionProperty,collectionItemId);
    formService.populateEntityFormFields(entityForm,entity);
    formService.populateAdornedEntityFormFields(entityForm,entity,ppr.getAdornedList());
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modalAdornedFormOnly");
  }
 else   if (md instanceof MapMetadata) {
    MapMetadata fmd=(MapMetadata)md;
    ClassMetadata collectionMetadata=service.getClassMetadata(ppr);
    Entity entity=service.getAdvancedCollectionRecord(mainMetadata,id,collectionProperty,collectionItemId);
    EntityForm entityForm=formService.buildMapForm(fmd,ppr.getMapStructure(),collectionMetadata,id);
    formService.populateEntityFormFields(entityForm,entity);
    formService.populateMapEntityFormFields(entityForm,entity);
    model.addAttribute("entityForm",entityForm);
    model.addAttribute("viewType","modalMapEntityForm");
  }
  model.addAttribute("currentUrl",request.getRequestURL().toString());
  model.addAttribute("modalHeaderType","updateCollectionItem");
  setModelAttributes(model,sectionKey);
  return "modules/modalContainer";
}

{
  Category currentCategory=(Category)model.get("currentCategory");
  Category rootCategory=(Category)model.get("rootCategory");
  int productPosition=0;
  List<Product> productList=catalogService.findActiveProductsByCategory(currentCategory);
  if (productList != null) {
    populateProducts(productList,currentCategory);
    model.addAttribute("products",productList);
  }
  productPosition=findProductPositionInList(product,productList);
  if (productPosition == 0) {
    currentCategory=product.getDefaultCategory();
    productList=catalogService.findActiveProductsByCategory(currentCategory);
    if (productList != null) {
      populateProducts(productList,currentCategory);
      model.addAttribute("products",productList);
    }
    String url=currentCategory.getGeneratedUrl();
    List<Category> categoryList=catalogService.getChildCategoryURLMapByCategoryId(rootCategory.getId()).get(url);
    if (categoryList != null && !addCategoryListToModel(categoryList,rootCategory,url,model)) {
      productPosition=findProductPositionInList(product,productList);
    }
  }
  if (productPosition != 0) {
    model.addAttribute("productError",false);
    model.addAttribute("currentProduct",product);
    model.addAttribute("productPosition",productPosition);
    if (productPosition != 1) {
      model.addAttribute("previousProduct",productList.get(productPosition - 2));
    }
    if (productPosition < productList.size()) {
      model.addAttribute("nextProduct",productList.get(productPosition));
    }
    model.addAttribute("totalProducts",productList.size());
  }
 else {
    model.addAttribute("productError",true);
  }
  WishlistRequest wishlistRequest=new WishlistRequest();
  wishlistRequest.setAddCategoryId(currentCategory.getId());
  wishlistRequest.setAddProductId(product.getId());
  wishlistRequest.setQuantity(1);
  wishlistRequest.setAddSkuId(product.getSkus().get(0).getId());
  model.addAttribute("wishlistRequest",wishlistRequest);
  return (productPosition != 0);
}

{
  if (request.getContainerItems().size() > 25) {
    throw buildException(USPSShippingPriceErrorCode.TOOMANYCONTAINERITEMS.getType(),USPSShippingPriceErrorCode.TOOMANYCONTAINERITEMS.getMessage());
  }
  for (  USPSContainerItemRequest itemRequest : request.getContainerItems()) {
    if (itemRequest.getWeight() == null) {
      throw buildException(USPSShippingPriceErrorCode.WEIGHTNOTSPECIFIED.getType(),USPSShippingPriceErrorCode.WEIGHTNOTSPECIFIED.getMessage());
    }
    if (itemRequest.getWeight().doubleValue() > 70D) {
      throw buildException(USPSShippingPriceErrorCode.OVERWEIGHT.getType(),USPSShippingPriceErrorCode.OVERWEIGHT.getMessage());
    }
    if (itemRequest.getContainerSize().equals(ContainerSizeType.REGULAR) && itemRequest.getContainerShape() == null) {
      throw buildException(USPSShippingPriceErrorCode.SHAPENOTSPECIFIED.getType(),USPSShippingPriceErrorCode.SHAPENOTSPECIFIED.getMessage());
    }
    if (itemRequest.getContainerSize().equals(ContainerSizeType.LARGE) && (itemRequest.getContainerShape().equals(ContainerShapeType.RECTANGULAR) || itemRequest.getContainerShape().equals(ContainerShapeType.NONRECTANGULAR))) {
      if (itemRequest.getDepth() == null || itemRequest.getHeight() == null || itemRequest.getWidth() == null) {
        throw buildException(USPSShippingPriceErrorCode.DIMENSIONSNOTSPECIFIED.getType(),USPSShippingPriceErrorCode.DIMENSIONSNOTSPECIFIED.getMessage());
      }
      if (itemRequest.getDimensionUnitOfMeasureType() == null) {
        throw buildException(USPSShippingPriceErrorCode.UNITTYPENOTSPECIFIED.getType(),USPSShippingPriceErrorCode.UNITTYPENOTSPECIFIED.getMessage());
      }
      if (!itemRequest.getDimensionUnitOfMeasureType().equals(DimensionUnitOfMeasureType.METERS) && !itemRequest.getDimensionUnitOfMeasureType().equals(DimensionUnitOfMeasureType.FEET) && !itemRequest.getDimensionUnitOfMeasureType().equals(DimensionUnitOfMeasureType.CENTIMETERS)&& !itemRequest.getDimensionUnitOfMeasureType().equals(DimensionUnitOfMeasureType.INCHES)) {
        throw buildException(USPSShippingPriceErrorCode.UNITTYPENOTSUPPORTED.getType(),USPSShippingPriceErrorCode.UNITTYPENOTSUPPORTED.getMessage());
      }
    }
    if (itemRequest.getContainerSize().equals(ContainerSizeType.LARGE) && itemRequest.getContainerShape().equals(ContainerShapeType.NONRECTANGULAR) && itemRequest.getGirth() == null) {
      throw buildException(USPSShippingPriceErrorCode.GIRTHNOTSPECIFIED.getType(),USPSShippingPriceErrorCode.GIRTHNOTSPECIFIED.getMessage());
    }
    if (itemRequest.getPackageId() == null) {
      throw buildException(USPSShippingPriceErrorCode.PACKAGEIDNOTSPECIFIED.getType(),USPSShippingPriceErrorCode.PACKAGEIDNOTSPECIFIED.getMessage());
    }
    if (itemRequest.getZipDestination() == null || itemRequest.getZipOrigination() == null) {
      throw buildException(USPSShippingPriceErrorCode.ZIPNOTSPECIFIED.getType(),USPSShippingPriceErrorCode.ZIPNOTSPECIFIED.getMessage());
    }
    if (itemRequest.getWeightUnitOfMeasureType() == null) {
      throw buildException(USPSShippingPriceErrorCode.UNITTYPENOTSPECIFIED.getType(),USPSShippingPriceErrorCode.UNITTYPENOTSPECIFIED.getMessage());
    }
    if (!itemRequest.getWeightUnitOfMeasureType().equals(WeightUnitOfMeasureType.KILOGRAMS) && !itemRequest.getWeightUnitOfMeasureType().equals(WeightUnitOfMeasureType.POUNDS)) {
      throw buildException(USPSShippingPriceErrorCode.UNITTYPENOTSUPPORTED.getType(),USPSShippingPriceErrorCode.UNITTYPENOTSUPPORTED.getMessage());
    }
    Calendar maxAdvance=Calendar.getInstance();
    maxAdvance.add(Calendar.DATE,3);
    if (itemRequest.getShipDate() != null && itemRequest.getShipDate().getTime() > maxAdvance.getTime().getTime()) {
      throw buildException(USPSShippingPriceErrorCode.SHIPDATETOOFAR.getType(),USPSShippingPriceErrorCode.SHIPDATETOOFAR.getMessage());
    }
  }
}

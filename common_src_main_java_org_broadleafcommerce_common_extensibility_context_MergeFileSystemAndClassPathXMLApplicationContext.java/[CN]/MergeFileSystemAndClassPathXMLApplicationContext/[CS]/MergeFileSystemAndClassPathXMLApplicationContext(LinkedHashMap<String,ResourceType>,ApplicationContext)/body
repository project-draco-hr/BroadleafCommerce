{
  super(parent);
  ResourceInputStream[] resources=new ResourceInputStream[locations.size()];
  int j=0;
  for (  Map.Entry<String,ResourceType> entry : locations.entrySet()) {
switch (entry.getValue()) {
case CLASSPATH:
      resources[j]=new ResourceInputStream(MergeClassPathXMLApplicationContext.class.getClassLoader().getResourceAsStream(entry.getKey()),entry.getKey());
    break;
case FILESYSTEM:
  try {
    File temp=new File(entry.getKey());
    resources[j]=new ResourceInputStream(new BufferedInputStream(new FileInputStream(temp)),entry.getKey());
  }
 catch (  FileNotFoundException e) {
    throw new FatalBeanException("Unable to merge context files",e);
  }
break;
}
j++;
}
ImportProcessor importProcessor=new ImportProcessor(this);
try {
resources=importProcessor.extract(resources);
}
 catch (MergeException e) {
throw new FatalBeanException("Unable to merge source and patch locations",e);
}
this.configResources=new MergeApplicationContextXmlConfigResource().getConfigResources(resources,null);
refresh();
}

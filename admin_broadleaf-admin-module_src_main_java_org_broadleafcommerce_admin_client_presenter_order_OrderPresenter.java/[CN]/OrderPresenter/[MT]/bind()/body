{
  super.bind();
  orderItemPresenter.bind();
  fulfillmentGroupPresenter.bind();
  paymentInfoPresenter.bind();
  additionalPaymentAttributesPresenter.bind();
  offerCodePresenter.bind();
  orderAdjustmentPresenter.bind();
  orderItemAdjustmentPresenter.bind();
  fulfillmentGroupAdjustmentPresenter.bind();
  feesPresenter.bind();
  paymentResponsePresenter.bind();
  paymentLogPresenter.bind();
  selectionChangedHandlerRegistration.removeHandler();
  display.getListDisplay().getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      ListGridRecord selectedRecord=event.getSelectedRecord();
      if (event.getState()) {
        if (!selectedRecord.equals(lastSelectedRecord)) {
          lastSelectedRecord=selectedRecord;
          if (selectedRecord.getAttributeAsStringArray("_type") == null) {
            formPresenter.disable();
            display.getListDisplay().getRemoveButton().disable();
          }
 else {
            formPresenter.setStartState();
            getPresenterSequenceSetupManager().getDataSource("orderDS").resetPermanentFieldVisibilityBasedOnType(selectedRecord.getAttributeAsStringArray("_type"));
            display.getDynamicFormDisplay().getFormOnlyDisplay().buildFields(display.getListDisplay().getGrid().getDataSource(),false,false,false,selectedRecord);
            display.getDynamicFormDisplay().getFormOnlyDisplay().getForm().editRecord(selectedRecord);
            display.getListDisplay().getRemoveButton().enable();
          }
          changeSelection(selectedRecord);
        }
      }
    }
  }
);
  getDisplay().getPaymentInfoDisplay().getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      ListGridRecord selectedRecord=event.getSelectedRecord();
      if (event.getState()) {
        additionalPaymentAttributesPresenter.load(selectedRecord,getPresenterSequenceSetupManager().getDataSource("paymentInfoDS"),null);
        String id=getPresenterSequenceSetupManager().getDataSource("paymentInfoDS").getPrimaryKeyValue(selectedRecord);
        getDisplay().getPaymentResponseDisplay().getGrid().fetchData(new Criteria("paymentInfoReferenceNumber",selectedRecord.getAttributeAsString("referenceNumber")));
        getDisplay().getPaymentLogDisplay().getGrid().fetchData(new Criteria("paymentInfoReferenceNumber",selectedRecord.getAttributeAsString("referenceNumber")));
      }
    }
  }
);
  getDisplay().getOrderItemsDisplay().getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      ListGridRecord selectedRecord=event.getSelectedRecord();
      if (event.getState()) {
        orderItemAdjustmentPresenter.load(selectedRecord,getPresenterSequenceSetupManager().getDataSource("orderItemDS"),null);
        feesPresenter.load(selectedRecord,getPresenterSequenceSetupManager().getDataSource("discreteOrderItemFeePriceDS"),null);
      }
    }
  }
);
  getDisplay().getFulfillmentGroupDisplay().getGrid().addSelectionChangedHandler(new SelectionChangedHandler(){
    @Override public void onSelectionChanged(    SelectionEvent event){
      ListGridRecord selectedRecord=event.getSelectedRecord();
      if (event.getState()) {
        fulfillmentGroupAdjustmentPresenter.load(selectedRecord,getPresenterSequenceSetupManager().getDataSource("fulfillmentGroupDS"),null);
      }
    }
  }
);
  getDisplay().getExportOrdersButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      AppServices.EXPORT.getExporters(AdminExporterType.ORDER,new AsyncCallback<List<AdminExporterDTO>>(){
        @Override public void onSuccess(        final List<AdminExporterDTO> result){
          if (result == null || result.size() == 0) {
            SC.say(BLCMain.getMessageManager().getString("noOrderExporters"));
          }
 else {
            ExportListSelectionDialog exportSelectionDialog=new ExportListSelectionDialog();
            exportSelectionDialog.search(BLCMain.getMessageManager().getString("selectExporterTitle"),result);
          }
        }
        @Override public void onFailure(        Throwable caught){
        }
      }
);
    }
  }
);
  setReadOnly(true);
  getDisplay().getListDisplay().getToolBar().enable();
}

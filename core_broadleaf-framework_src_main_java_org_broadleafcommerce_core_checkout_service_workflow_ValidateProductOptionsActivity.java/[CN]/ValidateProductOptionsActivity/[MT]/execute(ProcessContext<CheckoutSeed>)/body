{
  Order order=context.getSeedData().getOrder();
  for (  OrderItem i : order.getOrderItems()) {
    Map<String,OrderItemAttribute> attributeValues=i.getOrderItemAttributes();
    Product product=((DiscreteOrderItem)i).getProduct();
    if (product != null && product.getProductOptions() != null && product.getProductOptions().size() > 0) {
      for (      ProductOption productOption : product.getProductOptions()) {
        if (productOption.getRequired() && (productOption.getProductOptionValidationStrategyType() == null || productOption.getProductOptionValidationStrategyType().getRank() <= getProductOptionValidationStrategyType().getRank())) {
          if (attributeValues.get(productOption.getAttributeName()) == null || StringUtils.isEmpty(attributeValues.get(productOption.getAttributeName()).getValue())) {
            throw new RequiredAttributeNotProvidedException("Unable to validate cart, product  (" + product.getId() + ") required attribute was not provided: "+ productOption.getAttributeName());
          }
        }
        if (productOption.getProductOptionValidationType() != null && (productOption.getProductOptionValidationStrategyType() == null || productOption.getProductOptionValidationStrategyType().getRank() <= getProductOptionValidationStrategyType().getRank())) {
          productOptionValidationService.validate(productOption,attributeValues.get(productOption.getAttributeName()).getValue());
        }
        if ((productOption.getProductOptionValidationStrategyType() != null && productOption.getProductOptionValidationStrategyType().getRank() > getProductOptionValidationStrategyType().getRank())) {
          try {
            productOptionValidationService.validate(productOption,(attributeValues.get(productOption.getAttributeName()) != null) ? attributeValues.get(productOption.getAttributeName()).getValue() : null);
          }
 catch (          ProductOptionValidationException e) {
            ActivityMessageDTO msg=new ActivityMessageDTO(MessageType.PRODUCT_OPTION.getType(),1,e.getMessage());
            ((ActivityMessages)context).getActivityMessages().add(msg);
          }
        }
      }
    }
  }
  return context;
}

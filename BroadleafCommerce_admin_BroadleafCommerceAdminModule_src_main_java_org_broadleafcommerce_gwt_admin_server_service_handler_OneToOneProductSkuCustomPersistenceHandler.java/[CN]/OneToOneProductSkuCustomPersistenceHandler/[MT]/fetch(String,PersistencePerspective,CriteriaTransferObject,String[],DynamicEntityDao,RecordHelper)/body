{
  try {
    Class<?>[] entityClasses=dynamicEntityDao.getAllPolymorphicEntitiesFromCeiling(Product.class);
    Map<String,FieldMetadata> productProperties=dynamicEntityDao.getMergedProperties(Product.class.getName(),entityClasses,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),null,"");
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,Product.class.getName(),productProperties);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,Product.class.getName());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Product.class);
    Entity[] entities=helper.getRecords(productProperties,records,null,null);
    Map<String,FieldMetadata> skuProperties=getMergedProperties(Sku.class,dynamicEntityDao,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields());
    List<Serializable> skus=new ArrayList<Serializable>();
    for (    Serializable record : records) {
      Sku sku=((Product)record).getAllSkus().get(0);
      skus.add(sku);
    }
    Entity[] skuEntities=helper.getRecords(skuProperties,skus,null,null);
    for (int j=0; j < entities.length; j++) {
      entities[j].mergeProperties("allSkus",skuEntities[j]);
      String[] both=(String[])ArrayUtils.addAll(entities[j].getType(),skuEntities[j].getType());
      entities[j].setType(both);
    }
    int totalRecords=helper.getTotalRecords(ceilingEntityFullyQualifiedClassname,cto,ctoConverter);
    DynamicResultSet response=new DynamicResultSet(null,entities,totalRecords);
    return response;
  }
 catch (  Exception e) {
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

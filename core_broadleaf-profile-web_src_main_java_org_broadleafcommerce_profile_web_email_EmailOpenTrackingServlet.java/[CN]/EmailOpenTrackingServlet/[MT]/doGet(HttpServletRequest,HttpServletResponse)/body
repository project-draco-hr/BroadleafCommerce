{
  String url=request.getPathInfo();
  Long emailId=null;
  String imageUrl="";
  if (url != null) {
    String[] items=url.split("/");
    emailId=Long.valueOf(items[1]);
    StringBuffer sb=new StringBuffer();
    for (int j=2; j < items.length; j++) {
      sb.append("/");
      sb.append(items[j]);
    }
    imageUrl=sb.toString();
  }
  if (emailId != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("service() => Recording Open for Email[" + emailId + "]");
    }
    WebApplicationContext context=WebApplicationContextUtils.getWebApplicationContext(getServletContext());
    EmailTrackingManager emailTrackingManager=(EmailTrackingManager)context.getBean("blEmailTrackingManager");
    String userAgent=request.getHeader("USER-AGENT");
    Map<String,String> extraValues=new HashMap<String,String>();
    extraValues.put("userAgent",userAgent);
    emailTrackingManager.recordOpen(emailId,extraValues);
  }
  if ("".equals(imageUrl)) {
    response.setContentType("image/gif");
    BufferedInputStream bis=null;
    OutputStream out=response.getOutputStream();
    try {
      bis=new BufferedInputStream(EmailOpenTrackingServlet.class.getResourceAsStream("clear_dot.gif"));
      boolean eof=false;
      while (!eof) {
        int temp=bis.read();
        if (temp == -1) {
          eof=true;
        }
 else {
          out.write(temp);
        }
      }
    }
  finally {
      if (bis != null) {
        try {
          bis.close();
        }
 catch (        Throwable e) {
          LOG.error("Unable to close output stream in EmailOpenTrackingServlet",e);
        }
      }
    }
  }
 else {
    RequestDispatcher dispatcher=request.getRequestDispatcher(imageUrl);
    dispatcher.forward(request,response);
  }
}

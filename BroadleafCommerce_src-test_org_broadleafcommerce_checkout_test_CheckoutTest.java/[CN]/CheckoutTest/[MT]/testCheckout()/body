{
  Order order=new OrderImpl();
  FulfillmentGroup group=new FulfillmentGroupImpl();
  List<FulfillmentGroup> groups=new ArrayList<FulfillmentGroup>();
  groups.add(group);
  order.setFulfillmentGroups(groups);
  Money total=new Money(5D);
  group.setPrice(total);
  OrderItem item=new DiscreteOrderItemImpl();
  item.setPrice(new Money(10D));
  item.setQuantity(1);
  List<OrderItem> items=new ArrayList<OrderItem>();
  items.add(item);
  order.setOrderItems(items);
  order.setTotalShipping(new Money(0D));
  PaymentInfo payment=new PaymentInfoImpl();
  Address address=new AddressImpl();
  address.setAddressLine1("123 Test Rd");
  address.setCity("Dallas");
  address.setFirstName("Jeff");
  address.setLastName("Fischer");
  address.setPostalCode("75240");
  address.setPrimaryPhone("972-978-9067");
  State state=new StateImpl();
  state.setAbbreviation("TX");
  address.setState(state);
  payment.setAddress(address);
  payment.setAmount(new Money(15D + (15D * 0.05D)));
  payment.setReferenceNumber("1234");
  CreditCardPaymentInfo cc=new CreditCardPaymentInfoImpl();
  cc.setExpirationMonth(11);
  cc.setExpirationYear(2011);
  cc.setPan("1111111111111111");
  cc.setCvvCode("123");
  cc.setReferenceNumber("1234");
  Map<PaymentInfo,Referenced> map=new HashMap<PaymentInfo,Referenced>();
  map.put(payment,cc);
  checkoutService.performCheckout(order,map);
  assert(order.getTotal().greaterThan(order.getSubTotal()));
  assert(order.getTotalTax().equals(order.getSubTotal().multiply(0.05D)));
  assert(order.getTotal().equals(order.getSubTotal().add(order.getTotalTax())));
}

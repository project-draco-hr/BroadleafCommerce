{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(StructuredContent.class.getName(),persistencePerspective);
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,StructuredContent.class.getName(),originalProps);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,StructuredContent.class.getName());
    PersistentEntityCriteria countCriteria=ctoConverter.convert(new CriteriaTransferObjectCountWrapper(cto).wrap(),StructuredContent.class.getName());
    Criteria criteria=dynamicEntityDao.getCriteria(queryCriteria,StructuredContent.class);
    Criteria count=dynamicEntityDao.getCriteria(countCriteria,StructuredContent.class);
    List<StructuredContent> contents=structuredContentService.findContentItems(getSandBox(),criteria);
    Long totalRecords=structuredContentService.countContentItems(getSandBox(),count);
    List<Serializable> convertedList=new ArrayList<Serializable>();
    convertedList.addAll(contents);
    Entity[] structuredContentEntities=helper.getRecords(originalProps,convertedList);
    for (    Entity entity : structuredContentEntities) {
      if ("true".equals(entity.findProperty("lockedFlag").getValue())) {
        Property property=new Property();
        property.setName("locked");
        property.setValue("[ISOMORPHIC]/../admin/images/lock_page.png");
        entity.addProperty(property);
      }
 else {
        Property property=new Property();
        property.setName("locked");
        property.setValue(entity.findProperty("lockedFlag").getValue());
        entity.addProperty(property);
      }
    }
    for (int j=0; j < structuredContentEntities.length; j++) {
      addRulesToEntity(contents.get(j),structuredContentEntities[j]);
    }
    DynamicResultSet response=new DynamicResultSet(structuredContentEntities,totalRecords.intValue());
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to perform fetch for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

{
  mergedProperties=helper.getSimpleMergedProperties(StructuredContent.class.getName(),persistencePerspective);
  BasicFieldMetadata fieldMetadata=new BasicFieldMetadata();
  fieldMetadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
  fieldMetadata.setMutable(true);
  fieldMetadata.setInheritedFromType(StructuredContentImpl.class.getName());
  fieldMetadata.setAvailableToTypes(new String[]{StructuredContentImpl.class.getName()});
  fieldMetadata.setForeignKeyCollection(false);
  fieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  PersistencePackage fetchPackage=new PersistencePackage();
  fetchPackage.setCeilingEntityFullyQualifiedClassname(Locale.class.getName());
  PersistencePerspective fetchPerspective=new PersistencePerspective();
  fetchPackage.setPersistencePerspective(fetchPerspective);
  fetchPerspective.setAdditionalForeignKeys(new ForeignKey[]{});
  fetchPerspective.setOperationTypes(new OperationTypes(OperationType.BASIC,OperationType.BASIC,OperationType.BASIC,OperationType.BASIC,OperationType.BASIC));
  fetchPerspective.setAdditionalNonPersistentProperties(new String[]{});
  DynamicResultSet resultSet=((PersistenceManager)helper).fetch(fetchPackage,new CriteriaTransferObject());
  String[][] enums=new String[resultSet.getRecords().length][2];
  int j=0;
  for (  Entity entity : resultSet.getRecords()) {
    enums[j][0]=entity.findProperty("localeCode").getValue();
    enums[j][1]=entity.findProperty("friendlyName").getValue();
    j++;
  }
  fieldMetadata.setEnumerationValues(enums);
  fieldMetadata.setName("locale");
  fieldMetadata.setFriendlyName("StructuredContentCustomPersistenceHandler_Locale");
  fieldMetadata.setGroup("StructuredContentCustomPersistenceHandler_Description");
  fieldMetadata.setOrder(3);
  fieldMetadata.setTab("General");
  fieldMetadata.setTabOrder(100);
  fieldMetadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  fieldMetadata.setProminent(true);
  fieldMetadata.setBroadleafEnumeration("");
  fieldMetadata.setReadOnly(false);
  fieldMetadata.setVisibility(VisibilityEnum.VISIBLE_ALL);
  fieldMetadata.setRequiredOverride(true);
  mergedProperties.put("locale",fieldMetadata);
  BasicFieldMetadata contentTypeFieldMetadata=new BasicFieldMetadata();
  contentTypeFieldMetadata.setFieldType(SupportedFieldType.EXPLICIT_ENUMERATION);
  contentTypeFieldMetadata.setMutable(true);
  contentTypeFieldMetadata.setInheritedFromType(StructuredContentTypeImpl.class.getName());
  contentTypeFieldMetadata.setAvailableToTypes(new String[]{StructuredContentTypeImpl.class.getName()});
  contentTypeFieldMetadata.setForeignKeyCollection(false);
  contentTypeFieldMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  PersistencePackage contentTypeFetchPackage=new PersistencePackage();
  contentTypeFetchPackage.setCeilingEntityFullyQualifiedClassname(StructuredContentType.class.getName());
  PersistencePerspective contentTypeFetchPerspective=new PersistencePerspective();
  contentTypeFetchPackage.setPersistencePerspective(contentTypeFetchPerspective);
  contentTypeFetchPerspective.setAdditionalForeignKeys(new ForeignKey[]{});
  contentTypeFetchPerspective.setOperationTypes(new OperationTypes(OperationType.BASIC,OperationType.BASIC,OperationType.BASIC,OperationType.BASIC,OperationType.BASIC));
  contentTypeFetchPerspective.setAdditionalNonPersistentProperties(new String[]{});
  DynamicResultSet contentTypeResultSet=((PersistenceManager)helper).fetch(contentTypeFetchPackage,new CriteriaTransferObject());
  String[][] contentTypeEnums=new String[contentTypeResultSet.getRecords().length][2];
  int i=0;
  for (  Entity entity : contentTypeResultSet.getRecords()) {
    contentTypeEnums[i][0]=entity.findProperty("id").getValue();
    contentTypeEnums[i][1]=entity.findProperty("name").getValue();
    i++;
  }
  contentTypeFieldMetadata.setEnumerationValues(contentTypeEnums);
  contentTypeFieldMetadata.setName("structuredContentType_Grid");
  contentTypeFieldMetadata.setFriendlyName("StructuredContentCustomPersistenceHandler_Content_Type");
  contentTypeFieldMetadata.setGroup("StructuredContentCustomPersistenceHandler_Description");
  contentTypeFieldMetadata.setOrder(2);
  contentTypeFieldMetadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  contentTypeFieldMetadata.setProminent(true);
  contentTypeFieldMetadata.setBroadleafEnumeration("");
  contentTypeFieldMetadata.setReadOnly(false);
  contentTypeFieldMetadata.setVisibility(VisibilityEnum.FORM_HIDDEN);
  contentTypeFieldMetadata.setRequiredOverride(true);
  mergedProperties.put("structuredContentType_Grid",contentTypeFieldMetadata);
  BasicFieldMetadata iconMetadata=new BasicFieldMetadata();
  iconMetadata.setFieldType(SupportedFieldType.ASSET);
  iconMetadata.setMutable(true);
  iconMetadata.setInheritedFromType(StructuredContentImpl.class.getName());
  iconMetadata.setAvailableToTypes(new String[]{StructuredContentImpl.class.getName()});
  iconMetadata.setForeignKeyCollection(false);
  iconMetadata.setMergedPropertyType(MergedPropertyType.PRIMARY);
  iconMetadata.setName("picture");
  iconMetadata.setFriendlyName("StructuredContentCustomPersistenceHandler_Lock");
  iconMetadata.setGroup("StructuredContentCustomPersistenceHandler_Locked_Details");
  iconMetadata.setExplicitFieldType(SupportedFieldType.UNKNOWN);
  iconMetadata.setProminent(true);
  iconMetadata.setBroadleafEnumeration("");
  iconMetadata.setReadOnly(false);
  iconMetadata.setVisibility(VisibilityEnum.FORM_HIDDEN);
  iconMetadata.setColumnWidth("30");
  iconMetadata.setOrder(0);
  iconMetadata.setRequiredOverride(true);
  mergedProperties.put("locked",iconMetadata);
  mergedProperties.put("timeRule",createHiddenField("timeRule"));
  mergedProperties.put("requestRule",createHiddenField("requestRule"));
  mergedProperties.put("customerRule",createHiddenField("customerRule"));
  mergedProperties.put("productRule",createHiddenField("productRule"));
}

{
  String[] componentProperties=((ComponentType)type).getPropertyNames();
  List<String> componentPropertyNames=new ArrayList<String>();
  for (  String componentProperty : componentProperties) {
    componentPropertyNames.add(componentProperty);
  }
  Type[] componentTypes=((ComponentType)type).getSubtypes();
  List<Type> componentPropertyTypes=new ArrayList<Type>();
  for (  Type componentType : componentTypes) {
    componentPropertyTypes.add(componentType);
  }
  Map<String,FieldPresentationAttributes> componentPresentationAttributes=getFieldPresentationAttributes(returnedClass,presentationOverrides);
  PersistentClass persistentClass=getPersistentClass(targetClass.getName());
  @SuppressWarnings("unchecked") Iterator<Property> componentPropertyIterator=((Component)persistentClass.getProperty(propertyName).getValue()).getPropertyIterator();
  Map<String,FieldMetadata> newFields=new HashMap<String,FieldMetadata>();
  buildProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,componentPresentationAttributes,componentPropertyIterator,metadata,newFields,componentPropertyNames,componentPropertyTypes,idProperty,populateManyToOneFields,includeFields,excludeFields,propertyName + ".",metadataOverrides,presentationOverrides);
  Map<String,FieldMetadata> convertedFields=new HashMap<String,FieldMetadata>();
  for (  String key : newFields.keySet()) {
    convertedFields.put(propertyName + "." + key,newFields.get(key));
  }
  fields.putAll(convertedFields);
}

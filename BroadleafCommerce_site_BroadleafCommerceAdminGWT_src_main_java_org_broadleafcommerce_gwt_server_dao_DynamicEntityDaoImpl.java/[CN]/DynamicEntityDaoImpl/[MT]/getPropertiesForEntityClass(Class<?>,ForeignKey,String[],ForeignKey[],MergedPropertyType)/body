{
  Map<String,FieldPresentationAttributes> presentationAttributes=getFieldPresentationAttributes(targetClass);
  PersistentClass persistentClass=getPersistentClass(targetClass.getName());
  ClassMetadata metadata=sessionFactory.getClassMetadata(targetClass);
  Map<String,FieldMetadata> fields=new HashMap<String,FieldMetadata>();
  List<String> propertyNames=new ArrayList<String>();
  String idProperty=metadata.getIdentifierPropertyName();
  for (  String propertyName : metadata.getPropertyNames()) {
    propertyNames.add(propertyName);
  }
  propertyNames.add(idProperty);
  for (  String propertyName : propertyNames) {
    Type type=metadata.getPropertyType(propertyName);
    boolean isPropertyForeignKey=false;
    if (foreignField != null) {
      isPropertyForeignKey=foreignField.getManyToField().equals(propertyName);
    }
    int additionalForeignKeyIndexPosition=-1;
    if (additionalForeignFields != null) {
      additionalForeignKeyIndexPosition=Arrays.binarySearch(additionalForeignFields,new ForeignKey(propertyName,null,null),new Comparator<ForeignKey>(){
        public int compare(        ForeignKey o1,        ForeignKey o2){
          return o1.getManyToField().compareTo(o2.getManyToField());
        }
      }
);
    }
    if ((!type.isAnyType() && !type.isEntityType() && !type.isAssociationType()&& !type.isCollectionType()&& !type.isComponentType()) || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0 || presentationAttributes.containsKey(propertyName)) {
      FieldPresentationAttributes presentationAttribute=presentationAttributes.get(propertyName);
      SupportedFieldType explicitType=null;
      if (presentationAttribute != null) {
        explicitType=presentationAttribute.getFieldType();
      }
      Class<?> returnedClass=type.getReturnedClass();
      if ((explicitType != null && explicitType.equals(SupportedFieldType.BOOLEAN)) || returnedClass.equals(Boolean.class)) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.BOOLEAN,type,targetClass,presentationAttribute,mergedPropertyType));
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.INTEGER)) || returnedClass.equals(Byte.class) || returnedClass.equals(Short.class)|| returnedClass.equals(Integer.class)|| returnedClass.equals(Long.class)) {
        if (propertyName.equals(idProperty)) {
          fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.ID,type,targetClass,presentationAttribute,mergedPropertyType));
        }
 else {
          fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType));
        }
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.DATE)) || returnedClass.equals(Calendar.class) || returnedClass.equals(Date.class)|| returnedClass.equals(Timestamp.class)) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.DATE,type,targetClass,presentationAttribute,mergedPropertyType));
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.STRING)) || returnedClass.equals(Character.class) || returnedClass.equals(String.class)) {
        if (propertyName.equals(idProperty)) {
          fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.ID,type,targetClass,presentationAttribute,mergedPropertyType));
        }
 else {
          fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType));
        }
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.DECIMAL)) || returnedClass.equals(Double.class) || returnedClass.equals(BigDecimal.class)) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.DECIMAL,type,targetClass,presentationAttribute,mergedPropertyType));
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.DECIMAL)) || returnedClass.equals(Money.class)) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.MONEY,type,targetClass,presentationAttribute,mergedPropertyType));
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.FOREIGN_KEY)) || foreignField != null && isPropertyForeignKey) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.FOREIGN_KEY,type,targetClass,presentationAttribute,mergedPropertyType));
        ClassMetadata foreignMetadata;
        foreignMetadata=sessionFactory.getClassMetadata(Class.forName(foreignField.getForeignKeyClass()));
        fields.get(propertyName).setComplexIdProperty(foreignMetadata.getIdentifierPropertyName());
        fields.get(propertyName).setProvidedForeignKeyClass(foreignField.getForeignKeyClass());
        continue;
      }
      if ((explicitType != null && explicitType.equals(SupportedFieldType.ADDITIONAL_FOREIGN_KEY)) || additionalForeignFields != null && additionalForeignKeyIndexPosition >= 0) {
        fields.put(propertyName,getFieldMetadata(propertyName,persistentClass,SupportedFieldType.ADDITIONAL_FOREIGN_KEY,type,targetClass,presentationAttribute,mergedPropertyType));
        ClassMetadata foreignMetadata;
        foreignMetadata=sessionFactory.getClassMetadata(Class.forName(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass()));
        fields.get(propertyName).setComplexIdProperty(foreignMetadata.getIdentifierPropertyName());
        fields.get(propertyName).setProvidedForeignKeyClass(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass());
        continue;
      }
    }
  }
  FieldPresentationAttributes presentationAttribute=new FieldPresentationAttributes();
  presentationAttribute.setFieldType(SupportedFieldType.STRING);
  presentationAttribute.setHidden(true);
  for (  String additionalNonPersistentProperty : additionalNonPersistentProperties) {
    fields.put(additionalNonPersistentProperty,getFieldMetadata(additionalNonPersistentProperty,persistentClass,SupportedFieldType.STRING,null,targetClass,presentationAttribute,mergedPropertyType));
  }
  return fields;
}

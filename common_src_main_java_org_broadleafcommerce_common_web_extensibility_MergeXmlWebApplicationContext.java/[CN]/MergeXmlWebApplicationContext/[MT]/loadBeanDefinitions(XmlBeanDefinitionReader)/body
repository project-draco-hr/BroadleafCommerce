{
  String[] broadleafConfigLocations=StandardConfigLocations.retrieveAll(standardLocationTypes);
  ArrayList<ResourceInputStream> sources=new ArrayList<ResourceInputStream>(20);
  for (  String location : broadleafConfigLocations) {
    InputStream source=MergeXmlWebApplicationContext.class.getClassLoader().getResourceAsStream(location);
    if (source != null) {
      sources.add(new ResourceInputStream(source,location));
    }
  }
  ResourceInputStream[] filteredSources=new ResourceInputStream[]{};
  filteredSources=sources.toArray(filteredSources);
  String patchLocation=getPatchLocation();
  String[] patchLocations=StringUtils.tokenizeToStringArray(patchLocation,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);
  List<ResourceInputStream> patchList=new ArrayList<ResourceInputStream>();
  for (int i=0; i < patchLocations.length; i++) {
    ResourceInputStream patch;
    if (patchLocations[i].startsWith("classpath")) {
      InputStream is=MergeXmlWebApplicationContext.class.getClassLoader().getResourceAsStream(patchLocations[i].substring("classpath*:".length(),patchLocations[i].length()));
      patch=new ResourceInputStream(is,patchLocations[i]);
    }
 else {
      Resource resource=getResourceByPath(patchLocations[i]);
      patch=new ResourceInputStream(resource.getInputStream(),patchLocations[i]);
    }
    if (patch == null || patch.available() <= 0) {
      patchList.addAll(getResourcesFromPatternResolver(patchLocations[i]));
    }
 else {
      patchList.add(patch);
    }
  }
  ImportProcessor importProcessor=new ImportProcessor(this);
  ResourceInputStream[] patchArray;
  try {
    filteredSources=importProcessor.extract(filteredSources);
    patchArray=importProcessor.extract(patchList.toArray(new ResourceInputStream[patchList.size()]));
  }
 catch (  MergeException e) {
    throw new FatalBeanException("Unable to merge source and patch locations",e);
  }
  Resource[] resources=new MergeApplicationContextXmlConfigResource().getConfigResources(filteredSources,patchArray);
  reader.loadBeanDefinitions(resources);
}

{
  if (!canHandlePersistence(populateValueRequest)) {
    return false;
  }
  try {
switch (populateValueRequest.getMetadata().getFieldType()) {
case BOOLEAN:
      boolean v=Boolean.valueOf(populateValueRequest.getRequestedValue());
    try {
      populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),v);
    }
 catch (    IllegalArgumentException e) {
      char c=v ? 'Y' : 'N';
      populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),c);
    }
  break;
case DATE:
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),populateValueRequest.getDataFormatProvider().getSimpleDateFormatter().parse(populateValueRequest.getRequestedValue()));
break;
case DECIMAL:
if (BigDecimal.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),new BigDecimal(new Double(populateValueRequest.getRequestedValue())));
}
 else {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),new Double(populateValueRequest.getRequestedValue()));
}
break;
case MONEY:
if (BigDecimal.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),new BigDecimal(new Double(populateValueRequest.getRequestedValue())));
}
 else if (Double.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),new Double(populateValueRequest.getRequestedValue()));
}
 else {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),new Money(new Double(populateValueRequest.getRequestedValue())));
}
break;
case INTEGER:
if (int.class.isAssignableFrom(populateValueRequest.getReturnType()) || Integer.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),Integer.valueOf(populateValueRequest.getRequestedValue()));
}
 else if (byte.class.isAssignableFrom(populateValueRequest.getReturnType()) || Byte.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),Byte.valueOf(populateValueRequest.getRequestedValue()));
}
 else if (short.class.isAssignableFrom(populateValueRequest.getReturnType()) || Short.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),Short.valueOf(populateValueRequest.getRequestedValue()));
}
 else if (long.class.isAssignableFrom(populateValueRequest.getReturnType()) || Long.class.isAssignableFrom(populateValueRequest.getReturnType())) {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),Long.valueOf(populateValueRequest.getRequestedValue()));
}
break;
case STRING:
case EMAIL:
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),populateValueRequest.getRequestedValue());
break;
case FOREIGN_KEY:
{
Serializable foreignInstance;
if (StringUtils.isEmpty(populateValueRequest.getRequestedValue())) {
foreignInstance=null;
}
 else {
if (SupportedFieldType.INTEGER.toString().equals(populateValueRequest.getMetadata().getSecondaryType().toString())) {
foreignInstance=populateValueRequest.getPersistenceManager().getDynamicEntityDao().retrieve(Class.forName(populateValueRequest.getMetadata().getForeignKeyClass()),Long.valueOf(populateValueRequest.getRequestedValue()));
}
 else {
foreignInstance=populateValueRequest.getPersistenceManager().getDynamicEntityDao().retrieve(Class.forName(populateValueRequest.getMetadata().getForeignKeyClass()),populateValueRequest.getRequestedValue());
}
}
if (Collection.class.isAssignableFrom(populateValueRequest.getReturnType())) {
Collection collection;
try {
collection=(Collection)populateValueRequest.getFieldManager().getFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName());
}
 catch (FieldNotAvailableException e) {
throw new IllegalArgumentException(e);
}
if (!collection.contains(foreignInstance)) {
collection.add(foreignInstance);
}
}
 else if (Map.class.isAssignableFrom(populateValueRequest.getReturnType())) {
throw new IllegalArgumentException("Map structures are not supported for foreign key fields.");
}
 else {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),foreignInstance);
}
break;
}
case ADDITIONAL_FOREIGN_KEY:
{
Serializable foreignInstance;
if (StringUtils.isEmpty(populateValueRequest.getRequestedValue())) {
foreignInstance=null;
}
 else {
if (SupportedFieldType.INTEGER.toString().equals(populateValueRequest.getMetadata().getSecondaryType().toString())) {
foreignInstance=populateValueRequest.getPersistenceManager().getDynamicEntityDao().retrieve(Class.forName(populateValueRequest.getMetadata().getForeignKeyClass()),Long.valueOf(populateValueRequest.getRequestedValue()));
}
 else {
foreignInstance=populateValueRequest.getPersistenceManager().getDynamicEntityDao().retrieve(Class.forName(populateValueRequest.getMetadata().getForeignKeyClass()),populateValueRequest.getRequestedValue());
}
}
if (Collection.class.isAssignableFrom(populateValueRequest.getReturnType())) {
Collection collection;
try {
collection=(Collection)populateValueRequest.getFieldManager().getFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName());
}
 catch (FieldNotAvailableException e) {
throw new IllegalArgumentException(e);
}
if (!collection.contains(foreignInstance)) {
collection.add(foreignInstance);
}
}
 else if (Map.class.isAssignableFrom(populateValueRequest.getReturnType())) {
throw new IllegalArgumentException("Map structures are not supported for foreign key fields.");
}
 else {
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),foreignInstance);
}
break;
}
case ID:
if (populateValueRequest.getSetId()) {
switch (populateValueRequest.getMetadata().getSecondaryType()) {
case INTEGER:
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),Long.valueOf(populateValueRequest.getRequestedValue()));
break;
case STRING:
populateValueRequest.getFieldManager().setFieldValue(populateValueRequest.getRequestedInstance(),populateValueRequest.getProperty().getName(),populateValueRequest.getRequestedValue());
break;
}
}
break;
}
}
 catch (Exception e) {
throw new PersistenceException(e);
}
return true;
}

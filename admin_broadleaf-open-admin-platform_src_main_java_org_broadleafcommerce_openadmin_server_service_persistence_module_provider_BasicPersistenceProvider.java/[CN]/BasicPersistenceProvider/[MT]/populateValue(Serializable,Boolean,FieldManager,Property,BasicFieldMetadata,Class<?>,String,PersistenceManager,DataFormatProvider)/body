{
  try {
switch (metadata.getFieldType()) {
case BOOLEAN:
      boolean v=Boolean.valueOf(value);
    try {
      fieldManager.setFieldValue(instance,property.getName(),v);
    }
 catch (    IllegalArgumentException e) {
      char c=v ? 'Y' : 'N';
      fieldManager.setFieldValue(instance,property.getName(),c);
    }
  break;
case DATE:
fieldManager.setFieldValue(instance,property.getName(),dataFormatProvider.getSimpleDateFormatter().parse(value));
break;
case DECIMAL:
if (BigDecimal.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),new BigDecimal(new Double(value)));
}
 else {
fieldManager.setFieldValue(instance,property.getName(),new Double(value));
}
break;
case MONEY:
if (BigDecimal.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),new BigDecimal(new Double(value)));
}
 else if (Double.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),new Double(value));
}
 else {
fieldManager.setFieldValue(instance,property.getName(),new Money(new Double(value)));
}
break;
case INTEGER:
if (int.class.isAssignableFrom(returnType) || Integer.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),Integer.valueOf(value));
}
 else if (byte.class.isAssignableFrom(returnType) || Byte.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),Byte.valueOf(value));
}
 else if (short.class.isAssignableFrom(returnType) || Short.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),Short.valueOf(value));
}
 else if (long.class.isAssignableFrom(returnType) || Long.class.isAssignableFrom(returnType)) {
fieldManager.setFieldValue(instance,property.getName(),Long.valueOf(value));
}
break;
case EMAIL:
fieldManager.setFieldValue(instance,property.getName(),value);
break;
case FOREIGN_KEY:
{
Serializable foreignInstance;
if (StringUtils.isEmpty(value)) {
foreignInstance=null;
}
 else {
if (SupportedFieldType.INTEGER.toString().equals(metadata.getSecondaryType().toString())) {
foreignInstance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(metadata.getForeignKeyClass()),Long.valueOf(value));
}
 else {
foreignInstance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(metadata.getForeignKeyClass()),value);
}
}
if (Collection.class.isAssignableFrom(returnType)) {
Collection collection;
try {
collection=(Collection)fieldManager.getFieldValue(instance,property.getName());
}
 catch (FieldNotAvailableException e) {
throw new IllegalArgumentException(e);
}
if (!collection.contains(foreignInstance)) {
collection.add(foreignInstance);
}
}
 else if (Map.class.isAssignableFrom(returnType)) {
throw new IllegalArgumentException("Map structures are not supported for foreign key fields.");
}
 else {
fieldManager.setFieldValue(instance,property.getName(),foreignInstance);
}
break;
}
case ADDITIONAL_FOREIGN_KEY:
{
Serializable foreignInstance;
if (StringUtils.isEmpty(value)) {
foreignInstance=null;
}
 else {
if (SupportedFieldType.INTEGER.toString().equals(metadata.getSecondaryType().toString())) {
foreignInstance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(metadata.getForeignKeyClass()),Long.valueOf(value));
}
 else {
foreignInstance=persistenceManager.getDynamicEntityDao().retrieve(Class.forName(metadata.getForeignKeyClass()),value);
}
}
if (Collection.class.isAssignableFrom(returnType)) {
Collection collection;
try {
collection=(Collection)fieldManager.getFieldValue(instance,property.getName());
}
 catch (FieldNotAvailableException e) {
throw new IllegalArgumentException(e);
}
if (!collection.contains(foreignInstance)) {
collection.add(foreignInstance);
}
}
 else if (Map.class.isAssignableFrom(returnType)) {
throw new IllegalArgumentException("Map structures are not supported for foreign key fields.");
}
 else {
fieldManager.setFieldValue(instance,property.getName(),foreignInstance);
}
break;
}
case ID:
if (setId) {
switch (metadata.getSecondaryType()) {
case INTEGER:
fieldManager.setFieldValue(instance,property.getName(),Long.valueOf(value));
break;
case STRING:
fieldManager.setFieldValue(instance,property.getName(),value);
break;
}
}
break;
}
}
 catch (Exception e) {
throw new PersistenceException(e);
}
}

{
  if (!canHandleSearchMapping(addSearchMappingRequest)) {
    return false;
  }
  AssociationPath associationPath;
  int dotIndex=addSearchMappingRequest.getPropertyName().lastIndexOf('.');
  StringBuilder property;
  Class clazz;
  try {
    clazz=Class.forName(addSearchMappingRequest.getMergedProperties().get(addSearchMappingRequest.getPropertyName()).getInheritedFromType());
  }
 catch (  ClassNotFoundException e) {
    throw new PersistenceException(e);
  }
  Field field=addSearchMappingRequest.getFieldManager().getField(clazz,addSearchMappingRequest.getPropertyName());
  Class<?> targetType=null;
  if (field != null) {
    targetType=field.getType();
  }
  if (dotIndex >= 0) {
    property=new StringBuilder(addSearchMappingRequest.getPropertyName().substring(dotIndex + 1,addSearchMappingRequest.getPropertyName().length()));
    String prefix=addSearchMappingRequest.getPropertyName().substring(0,dotIndex);
    StringTokenizer tokens=new StringTokenizer(prefix,".");
    List<AssociationPathElement> elementList=new ArrayList<AssociationPathElement>(20);
    StringBuilder sb=new StringBuilder(150);
    StringBuilder pathBuilder=new StringBuilder(150);
    while (tokens.hasMoreElements()) {
      String token=tokens.nextToken();
      sb.append(token);
      pathBuilder.append(token);
      field=addSearchMappingRequest.getFieldManager().getField(clazz,pathBuilder.toString());
      Embedded embedded=field.getAnnotation(Embedded.class);
      if (embedded != null) {
        sb.append('.');
      }
 else {
        elementList.add(new AssociationPathElement(sb.toString()));
        sb=new StringBuilder(150);
      }
      pathBuilder.append('.');
    }
    if (!elementList.isEmpty()) {
      AssociationPathElement[] elements=elementList.toArray(new AssociationPathElement[elementList.size()]);
      associationPath=new AssociationPath(elements);
    }
 else {
      property=property.insert(0,sb.toString());
      associationPath=AssociationPath.ROOT;
    }
  }
 else {
    property=new StringBuilder(addSearchMappingRequest.getPropertyName());
    associationPath=AssociationPath.ROOT;
  }
  String convertedProperty=property.toString();
  BasicFieldMetadata metadata=(BasicFieldMetadata)addSearchMappingRequest.getMergedProperties().get(addSearchMappingRequest.getPropertyName());
switch (metadata.getFieldType()) {
case BOOLEAN:
    if (targetType == null || targetType.equals(Boolean.class) || targetType.equals(boolean.class)) {
      addSearchMappingRequest.getRequestedCtoConverter().addBooleanMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
    }
 else {
      addSearchMappingRequest.getRequestedCtoConverter().addCharacterMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
    }
  break;
case DATE:
addSearchMappingRequest.getRequestedCtoConverter().addDateMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty,addSearchMappingRequest.getDataFormatProvider());
break;
case DECIMAL:
addSearchMappingRequest.getRequestedCtoConverter().addDecimalMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
case MONEY:
addSearchMappingRequest.getRequestedCtoConverter().addDecimalMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
case INTEGER:
addSearchMappingRequest.getRequestedCtoConverter().addLongMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
default :
addSearchMappingRequest.getRequestedCtoConverter().addStringLikeMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
case STRING:
case EMAIL:
addSearchMappingRequest.getRequestedCtoConverter().addStringLikeMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
case FOREIGN_KEY:
if (addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues().length > 0) {
ForeignKey foreignKey=(ForeignKey)addSearchMappingRequest.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
if (metadata.getForeignKeyCollection()) {
if (ForeignKeyRestrictionType.COLLECTION_SIZE_EQ.toString().equals(foreignKey.getRestrictionType().toString())) {
addSearchMappingRequest.getRequestedCtoConverter().addCollectionSizeEqMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),AssociationPath.ROOT,addSearchMappingRequest.getPropertyName());
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addLongMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
}
 else if (addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues()[0] == null || "null".equals(addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues()[0])) {
addSearchMappingRequest.getRequestedCtoConverter().addNullMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,addSearchMappingRequest.getPropertyName());
}
 else if (metadata.getSecondaryType() == SupportedFieldType.STRING) {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addStringEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addLongEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
}
 else {
addSearchMappingRequest.getRequestedCtoConverter().addEmptyMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName());
}
break;
case ADDITIONAL_FOREIGN_KEY:
if (addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues().length > 0) {
int additionalForeignKeyIndexPosition=Arrays.binarySearch(addSearchMappingRequest.getPersistencePerspective().getAdditionalForeignKeys(),new ForeignKey(addSearchMappingRequest.getPropertyName(),null,null),new Comparator<ForeignKey>(){
@Override public int compare(ForeignKey o1,ForeignKey o2){
return o1.getManyToField().compareTo(o2.getManyToField());
}
}
);
ForeignKey foreignKey=null;
if (additionalForeignKeyIndexPosition >= 0) {
foreignKey=addSearchMappingRequest.getPersistencePerspective().getAdditionalForeignKeys()[additionalForeignKeyIndexPosition];
}
if (metadata.getForeignKeyCollection()) {
if (foreignKey != null && ForeignKeyRestrictionType.COLLECTION_SIZE_EQ.toString().equals(foreignKey.getRestrictionType().toString())) {
addSearchMappingRequest.getRequestedCtoConverter().addCollectionSizeEqMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),AssociationPath.ROOT,addSearchMappingRequest.getPropertyName());
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addLongMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
}
 else if (addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues()[0] == null || "null".equals(addSearchMappingRequest.getRequestedCto().get(addSearchMappingRequest.getPropertyName()).getFilterValues()[0])) {
addSearchMappingRequest.getRequestedCtoConverter().addNullMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,addSearchMappingRequest.getPropertyName());
}
 else if (metadata.getSecondaryType() == SupportedFieldType.STRING) {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addStringEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(addSearchMappingRequest.getPropertyName()));
addSearchMappingRequest.getRequestedCtoConverter().addLongEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),foreignCategory,metadata.getForeignKeyProperty());
}
}
 else {
addSearchMappingRequest.getRequestedCtoConverter().addEmptyMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName());
}
break;
case ID:
switch (metadata.getSecondaryType()) {
case INTEGER:
addSearchMappingRequest.getRequestedCtoConverter().addLongEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
case STRING:
addSearchMappingRequest.getRequestedCtoConverter().addStringEQMapping(addSearchMappingRequest.getCeilingEntityFullyQualifiedClassname(),addSearchMappingRequest.getPropertyName(),associationPath,convertedProperty);
break;
}
break;
}
return true;
}

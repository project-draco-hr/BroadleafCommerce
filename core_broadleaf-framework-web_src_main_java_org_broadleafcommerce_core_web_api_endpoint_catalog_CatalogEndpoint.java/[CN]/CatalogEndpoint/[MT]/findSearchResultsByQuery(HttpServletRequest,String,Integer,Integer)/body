{
  try {
    if (StringUtils.isNotEmpty(q)) {
      q=StringUtils.trim(q);
      q=exploitProtectionService.cleanString(q);
    }
 else {
      throw BroadleafWebServicesException.build(HttpStatus.BAD_REQUEST.value()).addMessage(BroadleafWebServicesException.SEARCH_QUERY_EMPTY);
    }
  }
 catch (  ServiceException e) {
    throw BroadleafWebServicesException.build(HttpStatus.BAD_REQUEST.value()).addMessage(BroadleafWebServicesException.SEARCH_QUERY_MALFORMED,q);
  }
  List<SearchFacetDTO> availableFacets=getSearchService().getSearchFacets();
  SearchCriteria searchCriteria=facetService.buildSearchCriteria(request,availableFacets);
  searchCriteria.setPageSize(pageSize);
  searchCriteria.setPage(page);
  try {
    SearchResult result=null;
    result=getSearchService().findSearchResultsByQuery(q,searchCriteria);
    facetService.setActiveFacetResults(result.getFacets(),request);
    SearchResultsWrapper wrapper=(SearchResultsWrapper)context.getBean(SearchResultsWrapper.class.getName());
    wrapper.wrapDetails(result,request);
    return wrapper;
  }
 catch (  ServiceException e) {
    throw BroadleafWebServicesException.build(HttpStatus.INTERNAL_SERVER_ERROR.value()).addMessage(BroadleafWebServicesException.SEARCH_ERROR);
  }
}

{
  try {
    if (StringUtils.isNotEmpty(q)) {
      q=StringUtils.trim(q);
      q=exploitProtectionService.cleanString(q);
    }
 else {
      throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).type(MediaType.TEXT_PLAIN).entity("Search query was empty. Set parameter 'q' to query for a product. (e.g. q=My Product Name).").build());
    }
  }
 catch (  ServiceException e) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).type(MediaType.TEXT_PLAIN).entity("The search query: " + q + " was incorrect or malformed.").build());
  }
  List<SearchFacetDTO> availableFacets=searchService.getSearchFacets();
  ProductSearchCriteria searchCriteria=facetService.buildSearchCriteria(request,availableFacets);
  try {
    ProductSearchResult result=null;
    result=searchService.findProductsByQuery(q,searchCriteria);
    facetService.setActiveFacetResults(result.getFacets(),request);
    SearchResultsWrapper wrapper=(SearchResultsWrapper)context.getBean(SearchResultsWrapper.class.getName());
    wrapper.wrapDetails(result,request);
    return wrapper;
  }
 catch (  ServiceException e) {
    throw new WebApplicationException(Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("Problem occured executing search.").build());
  }
}

{
  String name=element.getAttributeValue("name");
  String mappingPrefix=element.getAttributeValue("mapping-prefix");
  boolean async=element.hasAttribute("async");
  boolean defer=element.hasAttribute("defer");
  NestableNode parent=element.getParent();
  List<String> files=new ArrayList<String>();
  for (  String file : element.getAttributeValue("files").split(",")) {
    files.add(file.trim());
  }
  List<String> additionalBundleFiles=bundlingService.getAdditionalBundleFiles(name);
  if (additionalBundleFiles != null) {
    files.addAll(additionalBundleFiles);
  }
  if (getBundleEnabled()) {
    String bundleResourceName=bundlingService.resolveBundleResourceName(name,mappingPrefix,files);
    String bundleUrl=getBundleUrl(arguments,bundleResourceName);
    Element e=getElement(bundleUrl,async,defer);
    parent.insertAfter(element,e);
  }
 else {
    for (    String file : files) {
      file=file.trim();
      Expression expression=(Expression)StandardExpressions.getExpressionParser(arguments.getConfiguration()).parseExpression(arguments.getConfiguration(),arguments,"@{'" + mappingPrefix + file+ "'}");
      String value=(String)expression.execute(arguments.getConfiguration(),arguments);
      Element e=getElement(value,async,defer);
      parent.insertBefore(element,e);
    }
  }
  parent.removeChild(element);
  return ProcessorResult.OK;
}

{
  Collection<GrantedAuthority> newAuthorities=new HashSet<GrantedAuthority>();
  if (roleNameSubstitutions != null && !roleNameSubstitutions.isEmpty()) {
    for (    GrantedAuthority authority : authorities) {
      if (roleNameSubstitutions.containsKey(authority.getAuthority())) {
        String[] roles=roleNameSubstitutions.get(authority.getAuthority());
        for (        String role : roles) {
          newAuthorities.add(new SimpleGrantedAuthority(role.trim()));
        }
        if (additiveRoleNameSubstitutions) {
          newAuthorities.add(authority);
        }
      }
 else {
        newAuthorities.add(authority);
      }
    }
  }
 else {
    newAuthorities.addAll(authorities);
  }
  String email=(String)ctx.getObjectAttribute("mail");
  UserDetails userDetails=null;
  if (useEmailAddressAsUsername) {
    if (email != null) {
      userDetails=super.mapUserFromContext(ctx,email,newAuthorities);
    }
  }
  if (userDetails == null) {
    userDetails=super.mapUserFromContext(ctx,username,newAuthorities);
  }
  String password=userDetails.getPassword();
  if (password == null) {
    password=userDetails.getUsername();
  }
  BroadleafExternalAuthenticationUserDetails broadleafUser=new BroadleafExternalAuthenticationUserDetails(userDetails.getUsername(),password,userDetails.getAuthorities());
  broadleafUser.setFirstName((String)ctx.getObjectAttribute("givenName"));
  broadleafUser.setLastName((String)ctx.getObjectAttribute("sn"));
  broadleafUser.setEmail(email);
  return broadleafUser;
}

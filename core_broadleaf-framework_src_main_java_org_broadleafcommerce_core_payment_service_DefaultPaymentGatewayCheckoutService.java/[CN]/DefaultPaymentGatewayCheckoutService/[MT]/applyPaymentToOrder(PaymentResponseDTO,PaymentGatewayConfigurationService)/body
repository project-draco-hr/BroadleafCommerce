{
  if (!responseDTO.isValid()) {
    throw new IllegalArgumentException("Invalid payment responses cannot be parsed into the order payment domain");
  }
  if (configService == null) {
    throw new IllegalArgumentException("Config service cannot be null");
  }
  Long orderId=Long.parseLong(responseDTO.getOrderId());
  Order order=orderService.findOrderById(orderId);
  Customer customer=order.getCustomer();
  if (customer.isAnonymous()) {
    GatewayCustomerDTO<PaymentResponseDTO> gatewayCustomer=responseDTO.getCustomer();
    if (StringUtils.isEmpty(customer.getFirstName())) {
      customer.setFirstName(gatewayCustomer.getFirstName());
    }
    if (StringUtils.isEmpty(customer.getLastName())) {
      customer.setLastName(gatewayCustomer.getLastName());
    }
    if (StringUtils.isEmpty(customer.getEmailAddress())) {
      customer.setEmailAddress(gatewayCustomer.getEmail());
    }
  }
  if (!configService.handlesMultiplePayments()) {
    PaymentGatewayType gateway=configService.getGatewayType();
    for (    OrderPayment payment : order.getPayments()) {
      if (payment.getGatewayType().equals(gateway)) {
        markPaymentAsInvalid(payment.getId());
      }
    }
  }
  OrderPayment payment=orderPaymentService.create();
  payment.setType(responseDTO.getPaymentType());
  payment.setAmount(responseDTO.getAmount());
  PaymentTransaction transaction=orderPaymentService.createTransaction();
  transaction.setAmount(responseDTO.getAmount());
  transaction.setRawResponse(responseDTO.getRawResponse());
  transaction.setSuccess(responseDTO.isSuccessful());
  payment.addTransaction(transaction);
  payment=orderPaymentService.save(payment);
  orderService.addPaymentToOrder(order,payment,null);
  return payment.getId();
}

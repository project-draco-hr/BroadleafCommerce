{
  Address billingAddress=tempBillingAddress;
  if (responseDTO.getBillTo() != null && isUseBillingAddressFromGateway()) {
    billingAddress=addressService.create();
    AddressDTO<PaymentResponseDTO> billToDTO=responseDTO.getBillTo();
    billingAddress.setFirstName(billToDTO.getAddressFirstName());
    billingAddress.setLastName(billToDTO.getAddressLastName());
    billingAddress.setAddressLine1(billToDTO.getAddressLine1());
    billingAddress.setAddressLine2(billToDTO.getAddressLine2());
    billingAddress.setCity(billToDTO.getAddressCityLocality());
    State state=null;
    if (billToDTO.getAddressStateRegion() != null) {
      state=stateService.findStateByAbbreviation(billToDTO.getAddressStateRegion());
    }
    if (state == null) {
      LOG.warn("The given state from the response: " + billToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE");
    }
    billingAddress.setState(state);
    billingAddress.setPostalCode(billToDTO.getAddressPostalCode());
    Country country=null;
    if (billToDTO.getAddressCountryCode() != null) {
      country=countryService.findCountryByAbbreviation(billToDTO.getAddressCountryCode());
    }
    if (country == null) {
      LOG.warn("The given country from the response: " + billToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY");
    }
    billingAddress.setCountry(country);
    if (billToDTO.getAddressPhone() != null) {
      Phone billingPhone=phoneService.create();
      billingPhone.setPhoneNumber(billToDTO.getAddressPhone());
      billingAddress.setPhonePrimary(billingPhone);
    }
  }
  payment.setBillingAddress(billingAddress);
}

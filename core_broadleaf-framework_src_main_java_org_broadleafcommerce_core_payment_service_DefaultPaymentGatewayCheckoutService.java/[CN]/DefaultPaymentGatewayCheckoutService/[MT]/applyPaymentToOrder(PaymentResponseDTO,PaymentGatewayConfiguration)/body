{
  if (!responseDTO.isValid()) {
    throw new IllegalArgumentException("Invalid payment responses cannot be parsed into the order payment domain");
  }
  if (config == null) {
    throw new IllegalArgumentException("Config service cannot be null");
  }
  Long orderId=Long.parseLong(responseDTO.getOrderId());
  Order order=orderService.findOrderById(orderId);
  if (!OrderStatus.IN_PROCESS.equals(order.getStatus()) && !OrderStatus.CSR_OWNED.equals(order.getStatus())) {
    throw new IllegalArgumentException("Cannot apply another payment to an Order that is not IN_PROCESS or CSR_OWNED");
  }
  Customer customer=order.getCustomer();
  if (customer.isAnonymous()) {
    GatewayCustomerDTO<PaymentResponseDTO> gatewayCustomer=responseDTO.getCustomer();
    if (StringUtils.isEmpty(customer.getFirstName()) && gatewayCustomer != null) {
      customer.setFirstName(gatewayCustomer.getFirstName());
    }
    if (StringUtils.isEmpty(customer.getLastName()) && gatewayCustomer != null) {
      customer.setLastName(gatewayCustomer.getLastName());
    }
    if (StringUtils.isEmpty(customer.getEmailAddress()) && gatewayCustomer != null) {
      customer.setEmailAddress(gatewayCustomer.getEmail());
    }
  }
  GatewayCustomerDTO<PaymentResponseDTO> gatewayCustomer=responseDTO.getCustomer();
  if (order.getEmailAddress() == null && gatewayCustomer != null) {
    order.setEmailAddress(gatewayCustomer.getEmail());
  }
  populateShippingInfo(responseDTO,order);
  OrderPayment payment=orderPaymentService.create();
  payment.setType(responseDTO.getPaymentType());
  payment.setPaymentGatewayType(responseDTO.getPaymentGatewayType());
  payment.setAmount(responseDTO.getAmount());
  List<OrderPayment> paymentsToInvalidate=new ArrayList<OrderPayment>();
  Address tempBillingAddress=null;
  if (!config.handlesMultiplePayments()) {
    PaymentGatewayType gateway=config.getGatewayType();
    for (    OrderPayment p : order.getPayments()) {
      if (PaymentGatewayType.TEMPORARY.equals(p.getGatewayType()) || (p.isFinalPayment() && payment.isFinalPayment()) || (p.getGatewayType() != null && p.getGatewayType().equals(gateway))) {
        paymentsToInvalidate.add(p);
        if (PaymentType.CREDIT_CARD.equals(p.getType()) && PaymentGatewayType.TEMPORARY.equals(p.getGatewayType())) {
          tempBillingAddress=p.getBillingAddress();
        }
      }
    }
  }
  for (  OrderPayment invalid : paymentsToInvalidate) {
    markPaymentAsInvalid(invalid.getId());
  }
  populateBillingInfo(responseDTO,payment,tempBillingAddress);
  PaymentTransaction transaction=orderPaymentService.createTransaction();
  transaction.setAmount(responseDTO.getAmount());
  transaction.setRawResponse(responseDTO.getRawResponse());
  transaction.setSuccess(responseDTO.isSuccessful());
  transaction.setType(responseDTO.getPaymentTransactionType());
  for (  Entry<String,String> entry : responseDTO.getResponseMap().entrySet()) {
    transaction.getAdditionalFields().put(entry.getKey(),entry.getValue());
  }
  if (PaymentType.CREDIT_CARD.equals(responseDTO.getPaymentType()) && responseDTO.getCreditCard() != null && responseDTO.getCreditCard().creditCardPopulated()) {
    transaction.getAdditionalFields().put(PaymentAdditionalFieldType.NAME_ON_CARD.getType(),responseDTO.getCreditCard().getCreditCardHolderName());
    transaction.getAdditionalFields().put(PaymentAdditionalFieldType.CARD_TYPE.getType(),responseDTO.getCreditCard().getCreditCardType());
    transaction.getAdditionalFields().put(PaymentAdditionalFieldType.EXP_DATE.getType(),responseDTO.getCreditCard().getCreditCardExpDate());
    transaction.getAdditionalFields().put(PaymentAdditionalFieldType.LAST_FOUR.getType(),responseDTO.getCreditCard().getCreditCardLastFour());
  }
  payment.setOrder(order);
  transaction.setOrderPayment(payment);
  payment.addTransaction(transaction);
  payment=orderPaymentService.save(payment);
  if (transaction.getSuccess()) {
    orderService.addPaymentToOrder(order,payment,null);
  }
 else {
    handleUnsuccessfulTransaction(payment);
  }
  return payment.getId();
}

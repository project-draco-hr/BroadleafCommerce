{
  String[] customCriteria=persistencePackage.getCustomCriteria();
  if (customCriteria != null && customCriteria.length > 0) {
    LOG.warn("custom persistence handlers and custom criteria not supported for add types other than BASIC");
  }
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  Entity entity=persistencePackage.getEntity();
  AdornedTargetList adornedTargetList=(AdornedTargetList)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
  if (!adornedTargetList.getMutable()) {
    throw new SecurityServiceException("Field is not mutable");
  }
  Entity payload;
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=persistenceManager.getDynamicEntityDao().getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    Class<?>[] entities2=persistenceManager.getPolymorphicEntities(adornedTargetList.getAdornedTargetEntityClassname());
    Map<String,FieldMetadata> mergedProperties=persistenceManager.getDynamicEntityDao().getMergedProperties(adornedTargetList.getAdornedTargetEntityClassname(),entities2,null,new String[]{},new ForeignKey[]{},MergedPropertyType.ADORNEDTARGETLIST,false,new String[]{},new String[]{},null,"");
    CriteriaTransferObject ctoInserted=new CriteriaTransferObject();
    FilterAndSortCriteria filterCriteriaInsertedLinked=ctoInserted.get(adornedTargetList.getCollectionFieldName());
    String linkedPath;
    String targetPath;
    if (adornedTargetList.getInverse()) {
      linkedPath=adornedTargetList.getTargetObjectPath() + "." + adornedTargetList.getTargetIdProperty();
      targetPath=adornedTargetList.getLinkedObjectPath() + "." + adornedTargetList.getLinkedIdProperty();
    }
 else {
      targetPath=adornedTargetList.getTargetObjectPath() + "." + adornedTargetList.getTargetIdProperty();
      linkedPath=adornedTargetList.getLinkedObjectPath() + "." + adornedTargetList.getLinkedIdProperty();
    }
    filterCriteriaInsertedLinked.setFilterValue(entity.findProperty(adornedTargetList.getInverse() ? targetPath : linkedPath).getValue());
    FilterAndSortCriteria filterCriteriaInsertedTarget=ctoInserted.get(adornedTargetList.getCollectionFieldName() + "Target");
    filterCriteriaInsertedTarget.setFilterValue(entity.findProperty(adornedTargetList.getInverse() ? linkedPath : targetPath).getValue());
    List<FilterMapping> filterMappingsInserted=getAdornedTargetFilterMappings(persistencePerspective,ctoInserted,mergedProperties,adornedTargetList);
    List<Serializable> recordsInserted=getPersistentRecords(adornedTargetList.getAdornedTargetEntityClassname(),filterMappingsInserted,ctoInserted.getFirstResult(),ctoInserted.getMaxResults());
    if (recordsInserted.size() > 0) {
      payload=getRecords(mergedPropertiesTarget,recordsInserted,mergedProperties,adornedTargetList.getTargetObjectPath())[0];
    }
 else {
      Serializable instance=createPopulatedAdornedTargetInstance(adornedTargetList,entity);
      instance=createPopulatedInstance(instance,entity,mergedProperties,false,persistencePackage.isValidateUnsubmittedProperties());
      instance=createPopulatedInstance(instance,entity,mergedPropertiesTarget,false,persistencePackage.isValidateUnsubmittedProperties());
      FieldManager fieldManager=getFieldManager();
      if (fieldManager.getField(instance.getClass(),"id") != null) {
        fieldManager.setFieldValue(instance,"id",null);
      }
      if (adornedTargetList.getSortField() != null) {
        CriteriaTransferObject cto=new CriteriaTransferObject();
        FilterAndSortCriteria filterCriteria=cto.get(adornedTargetList.getCollectionFieldName());
        filterCriteria.setFilterValue(entity.findProperty(adornedTargetList.getInverse() ? targetPath : linkedPath).getValue());
        FilterAndSortCriteria sortCriteria=cto.get(adornedTargetList.getSortField());
        sortCriteria.setSortAscending(adornedTargetList.getSortAscending());
        List<FilterMapping> filterMappings=getAdornedTargetFilterMappings(persistencePerspective,cto,mergedProperties,adornedTargetList);
        int totalRecords=getTotalRecords(adornedTargetList.getAdornedTargetEntityClassname(),filterMappings);
        Class<?> type=fieldManager.getField(instance.getClass(),adornedTargetList.getSortField()).getType();
        boolean isBigDecimal=BigDecimal.class.isAssignableFrom(type);
        fieldManager.setFieldValue(instance,adornedTargetList.getSortField(),isBigDecimal ? new BigDecimal(totalRecords + 1) : Long.valueOf(totalRecords + 1));
      }
      instance=persistenceManager.getDynamicEntityDao().merge(instance);
      persistenceManager.getDynamicEntityDao().clear();
      List<Serializable> recordsInserted2=getPersistentRecords(adornedTargetList.getAdornedTargetEntityClassname(),filterMappingsInserted,ctoInserted.getFirstResult(),ctoInserted.getMaxResults());
      payload=getRecords(mergedPropertiesTarget,recordsInserted2,mergedProperties,adornedTargetList.getTargetObjectPath())[0];
    }
  }
 catch (  Exception e) {
    throw new ServiceException("Problem adding new entity : " + e.getMessage(),e);
  }
  return payload;
}

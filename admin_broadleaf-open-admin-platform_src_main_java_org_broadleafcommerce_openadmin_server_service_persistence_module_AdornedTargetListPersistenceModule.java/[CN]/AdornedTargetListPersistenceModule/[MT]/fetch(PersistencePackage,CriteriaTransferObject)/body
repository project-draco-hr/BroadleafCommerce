{
  PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  AdornedTargetList adornedTargetList=(AdornedTargetList)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
  Entity[] payload;
  int totalRecords;
  try {
    Class<?>[] entities=persistenceManager.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedPropertiesTarget=persistenceManager.getDynamicEntityDao().getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,null,persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
    AdornedTargetRetrieval adornedTargetRetrieval=new AdornedTargetRetrieval(persistencePerspective,adornedTargetList,cto).invokeForFetch();
    List<Serializable> records=adornedTargetRetrieval.getRecords();
    Map<String,FieldMetadata> mergedProperties=adornedTargetRetrieval.getMergedProperties();
    BaseCtoConverter ctoConverter=adornedTargetRetrieval.getCtoConverter();
    payload=getRecords(mergedPropertiesTarget,records,mergedProperties,adornedTargetList.getTargetObjectPath());
    totalRecords=getTotalRecords(persistencePackage,cto,ctoConverter);
  }
 catch (  Exception e) {
    LOG.error("Problem fetching results for " + adornedTargetList.getAdornedTargetEntityClassname(),e);
    throw new ServiceException("Unable to fetch results for " + adornedTargetList.getAdornedTargetEntityClassname(),e);
  }
  DynamicResultSet results=new DynamicResultSet(null,payload,totalRecords);
  return results;
}

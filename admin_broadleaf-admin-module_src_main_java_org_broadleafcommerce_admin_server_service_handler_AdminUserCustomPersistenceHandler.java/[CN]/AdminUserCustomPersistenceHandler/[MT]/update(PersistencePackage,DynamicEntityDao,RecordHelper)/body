{
  Entity entity=persistencePackage.getEntity();
  try {
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> adminProperties=helper.getSimpleMergedProperties(AdminUser.class.getName(),persistencePerspective);
    Object primaryKey=helper.getPrimaryKey(entity,adminProperties);
    AdminUser adminInstance=(AdminUser)dynamicEntityDao.retrieve(Class.forName(entity.getType()[0]),primaryKey);
    dynamicEntityDao.detach(adminInstance);
    adminInstance=(AdminUser)helper.createPopulatedInstance(adminInstance,entity,adminProperties,false);
    adminInstance.setUnencodedPassword(adminInstance.getPassword());
    adminInstance.setPassword(null);
    if (!adminRemoteSecurityService.getPersistentAdminUser().getId().equals(adminInstance.getId())) {
      adminRemoteSecurityService.securityCheck(persistencePackage.getCeilingEntityFullyQualifiedClassname(),EntityOperationType.UPDATE);
    }
    boolean validated=helper.validate(entity,adminInstance,adminProperties);
    if (validated) {
      adminInstance=adminSecurityService.saveAdminUser(adminInstance);
      Entity adminEntity=helper.getRecord(adminProperties,adminInstance,null,null);
      return adminEntity;
    }
 else {
      return entity;
    }
  }
 catch (  Exception e) {
    LOG.error("Unable to update entity for " + entity.getType()[0],e);
    throw new ServiceException("Unable to update entity for " + entity.getType()[0],e);
  }
}

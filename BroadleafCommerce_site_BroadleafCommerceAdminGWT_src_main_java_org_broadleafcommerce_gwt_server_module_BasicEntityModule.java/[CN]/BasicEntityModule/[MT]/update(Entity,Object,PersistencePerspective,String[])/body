{
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(entity.getType());
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(entity.getType(),entities,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalNonPersistentForeignKeys(),MergedPropertyType.PRIMARY);
    if (primaryKey == null) {
      String idProperty=null;
      for (      String property : mergedProperties.keySet()) {
        if (mergedProperties.get(property).getFieldType().equals(SupportedFieldType.ID)) {
          idProperty=property;
          break;
        }
      }
      if (idProperty == null) {
        throw new RuntimeException("Could not find a primary key property in the passed entity with type: " + entity.getType());
      }
      for (      Property property : entity.getProperties()) {
        if (property.getName().equals(idProperty)) {
          primaryKey=Long.valueOf(property.getValue());
          break;
        }
      }
      if (primaryKey == null) {
        throw new RuntimeException("Could not find the primary key property (" + idProperty + ") in the passed entity with type: "+ entity.getType());
      }
    }
    Serializable instance=dynamicEntityDao.retrieve(Class.forName(entity.getType()),primaryKey);
    instance=createPopulatedInstance(instance,entity,mergedProperties,false);
    persistInstance: {
      for (      CustomPersistenceHandler handler : customPersistenceHandlers) {
        if (handler.canHandleUpdate(entity.getType())) {
          instance=handler.update(instance,customCriteria,dynamicEntityDao);
          break persistInstance;
        }
      }
      instance=dynamicEntityDao.merge(instance);
    }
    List<Serializable> entityList=new ArrayList<Serializable>();
    entityList.add(instance);
    return getRecords(mergedProperties,entityList,null,null)[0];
  }
 catch (  ServiceException e) {
    LOG.error("Problem editing entity",e);
    throw e;
  }
catch (  Exception e) {
    LOG.error("Problem editing entity",e);
    throw new ServiceException("Problem updating entity : " + e.getMessage(),e);
  }
}

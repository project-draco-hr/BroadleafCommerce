{
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(entity.getType());
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(entity.getType(),entities,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalNonPersistentForeignKeys(),MergedPropertyType.PRIMARY);
    String idProperty=null;
    for (    String property : mergedProperties.keySet()) {
      if (mergedProperties.get(property).getFieldType().equals(SupportedFieldType.ID)) {
        idProperty=property;
        break;
      }
    }
    if (idProperty == null) {
      throw new RuntimeException("Could not find a primary key property in the passed entity with type: " + entity.getType());
    }
    Object primaryKey=null;
    for (    Property property : entity.getProperties()) {
      if (property.getName().equals(idProperty)) {
        primaryKey=Long.valueOf(property.getValue());
      }
    }
    if (primaryKey == null) {
      throw new RuntimeException("Could not find the primary key property (" + idProperty + ") in the passed entity with type: "+ entity.getType());
    }
    Serializable instance=dynamicEntityDao.retrieve(Class.forName(entity.getType()),primaryKey);
switch (persistencePerspective.getOperationTypes().getRemoveType()) {
case FOREIGNKEY:
      for (      Property property : entity.getProperties()) {
        String originalPropertyName=new String(property.getName());
        if (PropertyUtils.getPropertyDescriptor(instance,property.getName()) == null) {
          if (property.getName().startsWith("is")) {
            property.setName(property.getName().substring(2,3).toLowerCase() + property.getName().substring(3,property.getName().length()));
          }
        }
        if (PropertyUtils.getPropertyDescriptor(instance,property.getName()) == null) {
          LOG.warn("Unable to find a bean property for the reported property: " + originalPropertyName + ". Ignoring property.");
          continue;
        }
        if (SupportedFieldType.FOREIGN_KEY.equals(mergedProperties.get(originalPropertyName).getFieldType())) {
          String value=property.getValue();
          Serializable foreignInstance=dynamicEntityDao.retrieve(Class.forName(entity.getType()),Long.valueOf(value));
          Collection collection=(Collection)PropertyUtils.getProperty(instance,property.getName());
          collection.remove(foreignInstance);
          break;
        }
      }
    break;
case ENTITY:
  persistInstance: {
    for (    CustomPersistenceHandler handler : customPersistenceHandlers) {
      if (handler.canHandleRemove(entity.getType())) {
        handler.remove(instance,customCriteria,dynamicEntityDao);
        break persistInstance;
      }
    }
    dynamicEntityDao.remove(instance);
  }
break;
}
}
 catch (ServiceException e) {
LOG.error("Problem removing entity",e);
throw e;
}
catch (Exception e) {
LOG.error("Problem removing entity",e);
throw new ServiceException("Problem removing entity : " + e.getMessage(),e);
}
}

{
  Entity[] payload;
  int totalRecords;
  try {
    Class<?>[] entities=dynamicEntityRemoteService.getPolymorphicEntities(ceilingEntityFullyQualifiedClassname);
    Map<String,FieldMetadata> mergedProperties=getMergedProperties(ceilingEntityFullyQualifiedClassname,entities,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalNonPersistentForeignKeys(),MergedPropertyType.PRIMARY);
    for (    CustomPersistenceHandler handler : customPersistenceHandlers) {
      if (handler.canHandleFetch(ceilingEntityFullyQualifiedClassname)) {
        CustomFetchResponse response=handler.fetch(ceilingEntityFullyQualifiedClassname,cto,customCriteria,dynamicEntityDao);
        payload=getRecords(mergedProperties,response.getRecords(),null,null);
        totalRecords=response.getTotalRecords();
        DynamicResultSet results=new DynamicResultSet(null,payload,totalRecords);
        return results;
      }
    }
    BaseCtoConverter ctoConverter=getCtoConverter(cto,ceilingEntityFullyQualifiedClassname,mergedProperties);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,ceilingEntityFullyQualifiedClassname);
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,Class.forName(ceilingEntityFullyQualifiedClassname));
    payload=getRecords(mergedProperties,records,null,null);
    totalRecords=getTotalRecords(ceilingEntityFullyQualifiedClassname,cto,ctoConverter);
  }
 catch (  ServiceException e) {
    LOG.error("Problem fetching results for " + ceilingEntityFullyQualifiedClassname,e);
    throw e;
  }
catch (  Exception e) {
    LOG.error("Problem fetching results for " + ceilingEntityFullyQualifiedClassname,e);
    throw new ServiceException("Unable to fetch results for " + ceilingEntityFullyQualifiedClassname,e);
  }
  DynamicResultSet results=new DynamicResultSet(null,payload,totalRecords);
  return results;
}

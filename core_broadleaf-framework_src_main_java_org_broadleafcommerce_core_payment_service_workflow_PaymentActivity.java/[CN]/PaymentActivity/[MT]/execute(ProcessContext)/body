{
  CombinedPaymentContextSeed seed=((WorkflowPaymentContext)context).getSeedData();
  Map<PaymentInfo,Referenced> infos=seed.getInfos();
  Money transactionTotal, remainingTotal;
  if (seed.getTransactionAmount() != null) {
    transactionTotal=seed.getTransactionAmount();
    remainingTotal=seed.getTransactionAmount();
  }
 else {
    transactionTotal=seed.getOrderTotal();
    remainingTotal=seed.getOrderTotal();
  }
  Map<PaymentInfo,Referenced> replaceItems=new HashMap<PaymentInfo,Referenced>();
  try {
    Iterator<PaymentInfo> itr=infos.keySet().iterator();
    while (itr.hasNext()) {
      PaymentInfo info=itr.next();
      if (paymentService.isValidCandidate(info.getType())) {
        Referenced referenced=infos.get(info);
        itr.remove();
        infos.remove(info);
        PaymentContextImpl paymentContext=new PaymentContextImpl(transactionTotal,remainingTotal,info,referenced,userName);
        PaymentResponseItem paymentResponseItem;
        if (seed.getActionType().equals(PaymentActionType.AUTHORIZE)) {
          try {
            paymentResponseItem=paymentService.authorize(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.AUTHORIZEANDDEBIT)) {
          try {
            paymentResponseItem=paymentService.authorizeAndDebit(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.BALANCE)) {
          try {
            paymentResponseItem=paymentService.balance(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.CREDIT)) {
          try {
            paymentResponseItem=paymentService.credit(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.DEBIT)) {
          try {
            paymentResponseItem=paymentService.debit(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.VOID)) {
          try {
            paymentResponseItem=paymentService.voidPayment(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.REVERSEAUTHORIZE)) {
          try {
            paymentResponseItem=paymentService.reverseAuthorize(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else         if (seed.getActionType().equals(PaymentActionType.PARTIALPAYMENT)) {
          try {
            paymentResponseItem=paymentService.partialPayment(paymentContext);
          }
  finally {
            referenced.setReferenceNumber(info.getReferenceNumber());
            replaceItems.put(info,referenced);
          }
        }
 else {
          referenced.setReferenceNumber(info.getReferenceNumber());
          replaceItems.put(info,referenced);
          throw new PaymentException("Module (" + paymentService.getClass().getName() + ") does not support payment type of: "+ seed.getActionType().toString());
        }
        if (getRollbackHandler() != null && automaticallyRegisterRollbackHandlerForPayment) {
          Map<String,Object> myState=new HashMap<String,Object>();
          if (getStateConfiguration() != null && !getStateConfiguration().isEmpty()) {
            myState.putAll(getStateConfiguration());
          }
          myState.put(ROLLBACK_ACTIONTYPE,seed.getActionType());
          myState.put(ROLLBACK_PAYMENTCONTEXT,paymentContext);
          myState.put(ROLLBACK_RESPONSEITEM,paymentResponseItem);
          ActivityStateManagerImpl.getStateManager().registerState(this,context,getRollbackHandler(),myState);
        }
        if (paymentResponseItem != null) {
          if (paymentResponseItem.getTransactionAmount() == null || paymentResponseItem.getTransactionTimestamp() == null || paymentResponseItem.getTransactionSuccess() == null) {
            throw new PaymentException("The PaymentResponseItem instance did not contain one or more of the following: transactionAmount, transactionTimestamp or transactionSuccess");
          }
          seed.getPaymentResponse().addPaymentResponseItem(info,paymentResponseItem);
          if (paymentResponseItem.getTransactionSuccess()) {
            remainingTotal=remainingTotal.subtract(paymentResponseItem.getTransactionAmount());
          }
 else {
            if (paymentResponseItem.getTransactionAmount().lessThan(transactionTotal.getAmount())) {
              throw new InsufficientFundsException(String.format("Transaction amount was [%s] but paid amount was [%s]",transactionTotal.getAmount(),paymentResponseItem.getTransactionAmount()));
            }
          }
        }
      }
    }
  }
  finally {
    infos.putAll(replaceItems);
  }
  return context;
}

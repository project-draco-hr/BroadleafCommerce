{
  HydratedCacheManagerImpl manager=HydratedCacheManagerImpl.getInstance();
  HydrationDescriptor descriptor=((HydratedAnnotationManager)manager).getHydrationDescriptor(entity);
  if (descriptor.getHydratedMutators() != null && descriptor.getHydratedMutators().size() > 0) {
    Method[] idMutators=descriptor.getIdMutators();
    String cacheRegion=descriptor.getCacheRegion();
    for (    String field : descriptor.getHydratedMutators().keySet()) {
      try {
        Object fieldVal=descriptor.getHydratedMutators().get(field).getMutators()[0].invoke(entity,new Object[]{});
        Serializable entityId=(Serializable)idMutators[0].invoke(entity,new Object[]{});
        ((HydratedCacheManager)manager).addHydratedCacheElementItem(cacheRegion,entityId,field,fieldVal);
      }
 catch (      InvocationTargetException e) {
        if (e.getTargetException() != null && e.getTargetException() instanceof CacheFactoryException) {
          LOG.warn("Unable to setup the hydrated cache for an entity. " + e.getTargetException().getMessage());
        }
 else {
          throw new RuntimeException("There was a problem while replacing a hydrated cache item - field(" + field + ") : entity("+ entity.getClass().getName()+ ")",e);
        }
      }
catch (      Exception e) {
        throw new RuntimeException("There was a problem while replacing a hydrated cache item - field(" + field + ") : entity("+ entity.getClass().getName()+ ")",e);
      }
    }
  }
}

{
  String contentType=element.getAttributeValue("contentType");
  String extensionFieldName=element.getAttributeValue("extensionFieldName");
  String extensionFieldValue=element.getAttributeValue("extensionFieldValue");
  if (StringUtils.isEmpty(contentType) && (StringUtils.isEmpty(extensionFieldName) || StringUtils.isEmpty(extensionFieldValue))) {
    throw new IllegalArgumentException("The content processor must have a non-empty attribute value for either 1) 'contentType' or 2) 'extensionFieldName' and 'extensionFieldValue'");
  }
  String contentName=element.getAttributeValue("contentName");
  String maxResultsStr=element.getAttributeValue("maxResults");
  Integer maxResults=null;
  if (maxResultsStr != null) {
    maxResults=Ints.tryParse(maxResultsStr);
  }
  if (maxResults == null) {
    maxResults=Integer.MAX_VALUE;
  }
  String contentListVar=getAttributeValue(element,"contentListVar","contentList");
  String contentItemVar=getAttributeValue(element,"contentItemVar","contentItem");
  String numResultsVar=getAttributeValue(element,"numResultsVar","numResults");
  String fieldFilters=element.getAttributeValue("fieldFilters");
  final String sorts=element.getAttributeValue("sorts");
  IWebContext context=(IWebContext)arguments.getContext();
  HttpServletRequest request=context.getHttpServletRequest();
  BroadleafRequestContext blcContext=BroadleafRequestContext.getBroadleafRequestContext();
  Map<String,Object> mvelParameters=buildMvelParameters(request,arguments,element);
  SandBox currentSandbox=blcContext.getSandbox();
  List<StructuredContentDTO> contentItems;
  StructuredContentType structuredContentType=null;
  if (contentType != null) {
    structuredContentType=structuredContentService.findStructuredContentTypeByName(contentType);
  }
  Locale locale=blcContext.getLocale();
  contentItems=getContentItems(contentName,maxResults,request,mvelParameters,currentSandbox,structuredContentType,locale,extensionFieldName,extensionFieldValue,arguments,element);
  if (contentItems.size() > 0) {
    if (StringUtils.isNotEmpty(sorts)) {
      Collections.sort(contentItems,new Comparator<StructuredContentDTO>(){
        @Override public int compare(        StructuredContentDTO o1,        StructuredContentDTO o2){
          AssignationSequence sortAssignments=StandardExpressionProcessor.parseAssignationSequence(arguments,sorts,false);
          CompareToBuilder compareBuilder=new CompareToBuilder();
          for (          Assignation sortAssignment : sortAssignments) {
            String property=sortAssignment.getLeft().getStringRepresentation();
            Object val1=o1.getPropertyValue(property);
            Object val2=o2.getPropertyValue(property);
            if (StandardExpressionProcessor.executeExpression(arguments,sortAssignment.getRight()).equals("ASCENDING")) {
              compareBuilder.append(val1,val2);
            }
 else {
              compareBuilder.append(val2,val1);
            }
          }
          return compareBuilder.toComparison();
        }
      }
);
    }
    List<Map<String,Object>> contentItemFields=new ArrayList<Map<String,Object>>();
    for (    StructuredContentDTO item : contentItems) {
      if (StringUtils.isNotEmpty(fieldFilters)) {
        AssignationSequence assignments=StandardExpressionProcessor.parseAssignationSequence(arguments,fieldFilters,false);
        boolean valid=true;
        for (        Assignation assignment : assignments) {
          if (ObjectUtils.notEqual(StandardExpressionProcessor.executeExpression(arguments,assignment.getRight()),item.getValues().get(assignment.getLeft().getValue()))) {
            LOG.info("Excluding content " + item.getId() + " based on the property value of "+ assignment.getLeft().getValue());
            valid=false;
            break;
          }
        }
        if (valid) {
          contentItemFields.add(item.getValues());
        }
      }
 else {
        contentItemFields.add(item.getValues());
      }
    }
    addToModel(arguments,contentItemVar,contentItemFields.get(0));
    addToModel(arguments,contentListVar,contentItemFields);
    addToModel(arguments,numResultsVar,contentItems.size());
  }
 else {
    if (LOG.isInfoEnabled()) {
      LOG.info("**************************The contentItems is null*************************");
    }
    addToModel(arguments,contentItemVar,null);
    addToModel(arguments,contentListVar,null);
    addToModel(arguments,numResultsVar,0);
  }
}

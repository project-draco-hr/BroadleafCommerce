{
  Order order=findOrderById(orderId);
  if (automaticallyMergeLikeItems) {
    OrderItem item=findMatchingItem(order,orderItemRequestDTO);
    if (item != null) {
      orderItemRequestDTO.setQuantity(item.getQuantity() + orderItemRequestDTO.getQuantity());
      orderItemRequestDTO.setOrderItemId(item.getId());
      try {
        return updateItemQuantity(orderId,orderItemRequestDTO,priceOrder);
      }
 catch (      RemoveFromCartException e) {
        throw new AddToCartException("Unexpected error - system tried to remove item while adding to cart",e);
      }
catch (      UpdateCartException e) {
        throw new AddToCartException("Could not update quantity for matched item",e);
      }
    }
  }
  try {
    CartOperationRequest cartOpRequest=new CartOperationRequest(findOrderById(orderId),orderItemRequestDTO,priceOrder);
    ProcessContext<CartOperationRequest> context=(ProcessContext<CartOperationRequest>)addItemWorkflow.doActivities(cartOpRequest);
    List<ActivityMessageDTO> orderMessages=new ArrayList<ActivityMessageDTO>();
    orderMessages.addAll(((ActivityMessages)context).getActivityMessages());
    if (CollectionUtils.isNotEmpty(orderItemRequestDTO.getChildOrderItems())) {
      for (      OrderItemRequestDTO childRequest : orderItemRequestDTO.getChildOrderItems()) {
        childRequest.setParentOrderItemId(context.getSeedData().getOrderItem().getId());
        CartOperationRequest childCartOpRequest=new CartOperationRequest(context.getSeedData().getOrder(),childRequest,priceOrder);
        ProcessContext<CartOperationRequest> childContext=(ProcessContext<CartOperationRequest>)addItemWorkflow.doActivities(childCartOpRequest);
        orderMessages.addAll(((ActivityMessages)childContext).getActivityMessages());
      }
    }
    context.getSeedData().getOrder().setOrderMessages(orderMessages);
    return context.getSeedData().getOrder();
  }
 catch (  WorkflowException e) {
    throw new AddToCartException("Could not add to cart",getCartOperationExceptionRootCause(e));
  }
}

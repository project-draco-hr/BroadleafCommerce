{
  clearOffersandAdjustments(order);
  List<Offer> filteredOffers=filterOffers(offers,order.getCustomer());
  if ((filteredOffers == null) || (filteredOffers.isEmpty())) {
    order.assignOrderItemsFinalPrice();
    order.setSubTotal(order.calculateOrderItemsFinalPrice());
  }
 else {
    List<CandidateOrderOffer> qualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
    List<CandidateItemOffer> qualifiedItemOffers=new ArrayList<CandidateItemOffer>();
    order.setSubTotal(order.calculateOrderItemsCurrentPrice());
    List<DiscreteOrderItem> discreteOrderItems=order.getDiscountableDiscreteOrderItems();
    for (    Offer offer : filteredOffers) {
      if (offer.getType().equals(OfferType.ORDER)) {
        checkSubItems: {
          if (couldOfferApplyToOrder(offer,order)) {
            createCandidateOrderOffer(order,qualifiedOrderOffers,offer);
            break checkSubItems;
          }
          for (          DiscreteOrderItem discreteOrderItem : discreteOrderItems) {
            if (couldOfferApplyToOrder(offer,order,discreteOrderItem)) {
              createCandidateOrderOffer(order,qualifiedOrderOffers,offer);
              break checkSubItems;
            }
          }
          for (          FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
            if (couldOfferApplyToOrder(offer,order,fulfillmentGroup)) {
              createCandidateOrderOffer(order,qualifiedOrderOffers,offer);
              break checkSubItems;
            }
          }
        }
      }
 else       if (offer.getType().equals(OfferType.ORDER_ITEM)) {
        for (        DiscreteOrderItem discreteOrderItem : discreteOrderItems) {
          checkSubItems: {
            if (couldOfferApplyToOrder(offer,order,discreteOrderItem)) {
              createCandidateItemOffer(qualifiedItemOffers,offer,discreteOrderItem);
              break checkSubItems;
            }
            for (            FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
              if (couldOfferApplyToOrder(offer,order,discreteOrderItem,fulfillmentGroup)) {
                createCandidateItemOffer(qualifiedItemOffers,offer,discreteOrderItem);
                break checkSubItems;
              }
            }
          }
        }
      }
 else       if (offer.getType().equals(OfferType.FULFILLMENT_GROUP)) {
        for (        FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
          checkSubItems: {
            if (couldOfferApplyToOrder(offer,order,fulfillmentGroup)) {
              createCandidateFulfillmentGroupOffer(offer,fulfillmentGroup);
              break checkSubItems;
            }
            for (            DiscreteOrderItem discreteOrderItem : discreteOrderItems) {
              if (couldOfferApplyToOrder(offer,order,discreteOrderItem,fulfillmentGroup)) {
                createCandidateFulfillmentGroupOffer(offer,fulfillmentGroup);
                break checkSubItems;
              }
            }
          }
        }
      }
    }
    if ((qualifiedItemOffers.isEmpty()) && (qualifiedOrderOffers.isEmpty())) {
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
    }
 else {
      if (!qualifiedItemOffers.isEmpty()) {
        Collections.sort(qualifiedItemOffers,new BeanComparator("discountAmount",Collections.reverseOrder()));
        Collections.sort(qualifiedItemOffers,new BeanComparator("priority"));
        applyAllItemOffers(qualifiedItemOffers,discreteOrderItems);
      }
      if (!qualifiedOrderOffers.isEmpty()) {
        Collections.sort(qualifiedOrderOffers,new BeanComparator("discountAmount",Collections.reverseOrder()));
        Collections.sort(qualifiedOrderOffers,new BeanComparator("priority"));
        qualifiedOrderOffers=removeTrailingNotCombinableOrderOffers(qualifiedOrderOffers);
        applyAllOrderOffers(qualifiedOrderOffers,order);
      }
      order.assignOrderItemsFinalPrice();
      order.setSubTotal(order.calculateOrderItemsFinalPrice());
      if ((!qualifiedOrderOffers.isEmpty()) && (!qualifiedItemOffers.isEmpty())) {
        List<CandidateOrderOffer> finalQualifiedOrderOffers=new ArrayList<CandidateOrderOffer>();
        order.removeAllOrderAdjustments();
        for (        CandidateOrderOffer condidateOrderOffer : qualifiedOrderOffers) {
          if (couldOfferApplyToOrder(condidateOrderOffer.getOffer(),order)) {
            finalQualifiedOrderOffers.add(condidateOrderOffer);
          }
        }
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("discountedPrice"));
        Collections.sort(finalQualifiedOrderOffers,new BeanComparator("priority"));
        if (!finalQualifiedOrderOffers.isEmpty()) {
          applyAllOrderOffers(finalQualifiedOrderOffers,order);
        }
      }
    }
  }
}

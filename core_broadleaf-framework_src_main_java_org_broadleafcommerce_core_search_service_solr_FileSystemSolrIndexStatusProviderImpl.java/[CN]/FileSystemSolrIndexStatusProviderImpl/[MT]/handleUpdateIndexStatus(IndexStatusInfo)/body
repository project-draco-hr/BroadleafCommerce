{
  try {
    if (searchService instanceof SolrSearchServiceImpl) {
      String solrHome=((SolrSearchServiceImpl)searchService).getSolrHomePath();
      File statusFile=new File(new File(solrHome),"solr_status.xml");
      boolean exists=statusFile.exists();
      DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      dbf.setIgnoringElementContentWhitespace(true);
      dbf.setNamespaceAware(true);
      if (builder == null) {
        builder=dbf.newDocumentBuilder();
      }
      Document document;
      Element indexElement;
      if (exists) {
        document=builder.parse(statusFile);
        NodeList temp1=(NodeList)xPath.evaluate("/status/index",document,XPathConstants.NODESET);
        indexElement=(Element)temp1.item(0);
      }
 else {
        document=builder.newDocument();
        Element root=document.createElement("status");
        document.appendChild(root);
        indexElement=document.createElement("index");
        indexElement.setAttribute("dateProcessed","");
        root.appendChild(indexElement);
      }
      String dateString=format.format(status.getLastIndexDate());
      if (!dateString.equals(indexElement.getAttribute("dateProcessed"))) {
        indexElement.setAttribute("dateProcessed",dateString);
        NodeList children=(NodeList)xPath.evaluate("info",indexElement,XPathConstants.NODESET);
        for (int j=0; j < children.getLength(); j++) {
          indexElement.removeChild(children.item(j));
        }
        children=indexElement.getChildNodes();
        for (int j=0; j < children.getLength(); j++) {
          if (children.item(j).getNodeName().equalsIgnoreCase("#text")) {
            indexElement.removeChild(children.item(j));
          }
        }
      }
      for (      Map.Entry<String,String> entry : status.getAdditionalInfo().entrySet()) {
        NodeList infos=(NodeList)xPath.evaluate("info[@key='" + entry.getKey() + "']",indexElement,XPathConstants.NODESET);
        if (infos.getLength() == 0) {
          Element addlInfo=document.createElement("info");
          addlInfo.setAttribute("key",entry.getKey());
          addlInfo.setAttribute("val",entry.getValue());
          indexElement.appendChild(addlInfo);
        }
      }
      TransformerFactory tFactory=TransformerFactory.newInstance();
      Transformer xmlTransformer=tFactory.newTransformer();
      xmlTransformer.setOutputProperty(OutputKeys.VERSION,"1.0");
      xmlTransformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");
      xmlTransformer.setOutputProperty(OutputKeys.METHOD,"xml");
      xmlTransformer.setOutputProperty(OutputKeys.INDENT,"yes");
      DOMSource source=new DOMSource(document);
      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(statusFile,false),"UTF-8"));
      StreamResult result=new StreamResult(writer);
      xmlTransformer.transform(source,result);
    }
  }
 catch (  ParserConfigurationException e) {
    throw ExceptionHelper.refineException(e);
  }
catch (  SAXException e) {
    throw ExceptionHelper.refineException(e);
  }
catch (  IOException e) {
    throw ExceptionHelper.refineException(e);
  }
catch (  XPathExpressionException e) {
    throw ExceptionHelper.refineException(e);
  }
catch (  TransformerException e) {
    throw ExceptionHelper.refineException(e);
  }
}

{
  Boolean includeField=true;
  boolean shouldTest=!StringUtils.isEmpty(prefix) && (!isComponentPrefix || prefix.split("\\.").length > 1);
  if (shouldTest) {
    Field testField=getFieldManager().getField(targetClass,propertyName);
    if (testField == null) {
      Class<?>[] entities;
      try {
        entities=getAllPolymorphicEntitiesFromCeiling(Class.forName(ceilingEntityFullyQualifiedClassname));
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
      for (      Class<?> clazz : entities) {
        testField=getFieldManager().getField(clazz,propertyName);
        if (testField != null) {
          break;
        }
      }
      String testProperty=prefix + propertyName;
      if (testField == null) {
        testField=getFieldManager().getField(targetClass,testProperty);
      }
      if (testField == null) {
        for (        Class<?> clazz : entities) {
          testField=getFieldManager().getField(clazz,testProperty);
          if (testField != null) {
            break;
          }
        }
      }
    }
    if (testField != null) {
      Class<?> testType=testField.getType();
      for (      Class<?> parentClass : parentClasses) {
        if (parentClass.isAssignableFrom(testType) || testType.isAssignableFrom(parentClass)) {
          includeField=false;
          break;
        }
      }
      if (includeField && (targetClass.isAssignableFrom(testType) || testType.isAssignableFrom(targetClass))) {
        includeField=false;
      }
    }
  }
  return includeField;
}

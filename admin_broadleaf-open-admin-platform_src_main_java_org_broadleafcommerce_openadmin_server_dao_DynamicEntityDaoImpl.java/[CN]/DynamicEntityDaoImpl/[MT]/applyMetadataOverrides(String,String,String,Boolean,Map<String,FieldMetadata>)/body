{
  if (fieldMetadataOverrides != null && configurationKey != null) {
    Map<String,Map<String,FieldMetadata>> configuredOverrides=fieldMetadataOverrides.get(configurationKey);
    if (configuredOverrides != null) {
      Map<String,FieldMetadata> entityOverrides=configuredOverrides.get(ceilingEntityFullyQualifiedClassname);
      if (entityOverrides != null) {
        for (        String propertyName : entityOverrides.keySet()) {
          final FieldMetadata localMetadata=entityOverrides.get(propertyName);
          Boolean excluded=localMetadata.getExcluded();
          if (excluded == null) {
            excluded=false;
          }
          for (          String key : mergedProperties.keySet()) {
            String testKey=prefix + key;
            if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && excluded) {
              FieldMetadata metadata=mergedProperties.get(key);
              metadata.setExcluded(true);
              continue;
            }
            if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !excluded) {
              FieldMetadata metadata=mergedProperties.get(key);
              if (!isParentExcluded) {
                metadata.setExcluded(false);
              }
            }
            if (key.equals(propertyName)) {
              FieldMetadata serverMetadata=mergedProperties.get(key);
              serverMetadata.accept(new MetadataVisitorAdapter(){
                @Override public void visit(                BasicFieldMetadata serverMetadata){
                  BasicFieldMetadata override=(BasicFieldMetadata)localMetadata;
                  if (override.getFriendlyName() != null) {
                    serverMetadata.setFriendlyName(override.getFriendlyName());
                  }
                  if (override.getSecurityLevel() != null) {
                    serverMetadata.setSecurityLevel(override.getSecurityLevel());
                  }
                  if (override.getVisibility() != null) {
                    serverMetadata.setVisibility(override.getVisibility());
                  }
                  if (override.getOrder() != null) {
                    serverMetadata.setOrder(override.getOrder());
                  }
                  if (override.getExplicitFieldType() != null) {
                    serverMetadata.setExplicitFieldType(override.getExplicitFieldType());
                    serverMetadata.setFieldType(override.getExplicitFieldType());
                  }
                  if (override.getGroup() != null) {
                    serverMetadata.setGroup(override.getGroup());
                  }
                  if (override.getGroupCollapsed() != null) {
                    serverMetadata.setGroupCollapsed(override.getGroupCollapsed());
                  }
                  if (override.getGroupOrder() != null) {
                    serverMetadata.setGroupOrder(override.getGroupOrder());
                  }
                  if (override.isLargeEntry() != null) {
                    serverMetadata.setLargeEntry(override.isLargeEntry());
                  }
                  if (override.isProminent() != null) {
                    serverMetadata.setProminent(override.isProminent());
                  }
                  if (override.getColumnWidth() != null) {
                    serverMetadata.setColumnWidth(override.getColumnWidth());
                  }
                  if (!StringUtils.isEmpty(override.getBroadleafEnumeration()) && !override.getBroadleafEnumeration().equals(serverMetadata.getBroadleafEnumeration())) {
                    serverMetadata.setBroadleafEnumeration(override.getBroadleafEnumeration());
                    try {
                      setupBroadleafEnumeration(override.getBroadleafEnumeration(),serverMetadata);
                    }
 catch (                    Exception e) {
                      throw new RuntimeException(e);
                    }
                  }
                  if (override.getReadOnly() != null) {
                    serverMetadata.setReadOnly(override.getReadOnly());
                  }
                  if (override.getExcluded() != null) {
                    serverMetadata.setExcluded(override.getExcluded());
                  }
                  if (isParentExcluded) {
                    serverMetadata.setExcluded(true);
                  }
                  if (override.getTooltip() != null) {
                    serverMetadata.setTooltip(override.getTooltip());
                  }
                  if (override.getHelpText() != null) {
                    serverMetadata.setHelpText(override.getHelpText());
                  }
                  if (override.getHint() != null) {
                    serverMetadata.setHint(override.getHint());
                  }
                  if (override.getRequiredOverride() != null) {
                    serverMetadata.setRequiredOverride(override.getRequiredOverride());
                  }
                  if (override.getValidationConfigurations() != null) {
                    serverMetadata.setValidationConfigurations(override.getValidationConfigurations());
                  }
                  if (override.getLength() != null) {
                    serverMetadata.setLength(override.getLength());
                  }
                  if (override.getUnique() != null) {
                    serverMetadata.setUnique(override.getUnique());
                  }
                  if (override.getScale() != null) {
                    serverMetadata.setScale(override.getScale());
                  }
                  if (override.getPrecision() != null) {
                    serverMetadata.setPrecision(override.getPrecision());
                  }
                }
                @Override public void visit(                BasicCollectionMetadata metadata){
                }
                @Override public void visit(                AdornedTargetCollectionMetadata metadata){
                }
                @Override public void visit(                MapMetadata metadata){
                }
              }
);
            }
          }
        }
      }
    }
  }
}

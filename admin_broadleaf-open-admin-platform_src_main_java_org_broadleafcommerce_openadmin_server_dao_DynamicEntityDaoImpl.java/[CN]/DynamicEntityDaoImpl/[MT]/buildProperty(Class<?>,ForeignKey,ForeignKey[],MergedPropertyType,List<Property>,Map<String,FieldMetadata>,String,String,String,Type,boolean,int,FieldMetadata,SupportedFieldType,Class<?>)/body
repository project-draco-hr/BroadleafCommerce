{
  if (explicitType != null && explicitType != SupportedFieldType.UNKNOWN && explicitType != SupportedFieldType.BOOLEAN && explicitType != SupportedFieldType.INTEGER && explicitType != SupportedFieldType.DATE && explicitType != SupportedFieldType.STRING && explicitType != SupportedFieldType.MONEY && explicitType != SupportedFieldType.DECIMAL && explicitType != SupportedFieldType.FOREIGN_KEY && explicitType != SupportedFieldType.ADDITIONAL_FOREIGN_KEY) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,explicitType,type,targetClass,presentationAttribute,mergedPropertyType));
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.BOOLEAN || returnedClass.equals(Boolean.class) || returnedClass.equals(Character.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.BOOLEAN,type,targetClass,presentationAttribute,mergedPropertyType));
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.INTEGER || returnedClass.equals(Byte.class) || returnedClass.equals(Short.class) || returnedClass.equals(Integer.class) || returnedClass.equals(Long.class)) {
    if (propertyName.equals(idProperty)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.ID,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType));
    }
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.DATE || returnedClass.equals(Calendar.class) || returnedClass.equals(Date.class) || returnedClass.equals(Timestamp.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.DATE,type,targetClass,presentationAttribute,mergedPropertyType));
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.STRING || returnedClass.equals(String.class)) {
    if (propertyName.equals(idProperty)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.ID,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType));
    }
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.MONEY || returnedClass.equals(Money.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.MONEY,type,targetClass,presentationAttribute,mergedPropertyType));
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.DECIMAL || returnedClass.equals(Double.class) || returnedClass.equals(BigDecimal.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.DECIMAL,type,targetClass,presentationAttribute,mergedPropertyType));
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.FOREIGN_KEY || foreignField != null && isPropertyForeignKey) {
    ClassMetadata foreignMetadata;
    try {
      foreignMetadata=getSessionFactory().getClassMetadata(Class.forName(foreignField.getForeignKeyClass()));
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    Class<?> foreignResponseType=foreignMetadata.getIdentifierType().getReturnedClass();
    if (foreignResponseType.equals(String.class)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.FOREIGN_KEY,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.FOREIGN_KEY,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType));
    }
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyProperty(foreignMetadata.getIdentifierPropertyName());
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyClass(foreignField.getForeignKeyClass());
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyDisplayValueProperty(foreignField.getDisplayValueProperty());
  }
 else   if (explicitType != null && explicitType == SupportedFieldType.ADDITIONAL_FOREIGN_KEY || additionalForeignFields != null && additionalForeignKeyIndexPosition >= 0) {
    ClassMetadata foreignMetadata;
    try {
      foreignMetadata=getSessionFactory().getClassMetadata(Class.forName(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass()));
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    Class<?> foreignResponseType=foreignMetadata.getIdentifierType().getReturnedClass();
    if (foreignResponseType.equals(String.class)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.ADDITIONAL_FOREIGN_KEY,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,componentProperties,SupportedFieldType.ADDITIONAL_FOREIGN_KEY,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType));
    }
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyProperty(foreignMetadata.getIdentifierPropertyName());
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyClass(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass());
    ((BasicFieldMetadata)fields.get(propertyName)).setForeignKeyDisplayValueProperty(additionalForeignFields[additionalForeignKeyIndexPosition].getDisplayValueProperty());
  }
}

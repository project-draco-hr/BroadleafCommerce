{
  String[] componentProperties=((ComponentType)type).getPropertyNames();
  List<String> componentPropertyNames=Arrays.asList(componentProperties);
  Type[] componentTypes=((ComponentType)type).getSubtypes();
  List<Type> componentPropertyTypes=Arrays.asList(componentTypes);
  String tempPrefix="";
  int pos=prefix.indexOf(".");
  if (pos > 0 && pos < prefix.length() - 1) {
    tempPrefix=prefix.substring(pos + 1,prefix.length());
  }
  Map<String,FieldMetadata> componentPresentationAttributes=metadata.getFieldPresentationAttributes(targetClass,returnedClass,this,tempPrefix + propertyName + ".");
  if (isParentExcluded) {
    for (    String key : componentPresentationAttributes.keySet()) {
      LOG.debug("buildComponentProperties:Excluding " + key + " because the parent was excluded");
      componentPresentationAttributes.get(key).setExcluded(true);
    }
  }
  PersistentClass persistentClass=getPersistentClass(targetClass.getName());
  Property property;
  try {
    property=persistentClass.getProperty(propertyName);
  }
 catch (  MappingException e) {
    property=persistentClass.getProperty(prefix + propertyName);
  }
  Iterator componentPropertyIterator=((org.hibernate.mapping.Component)property.getValue()).getPropertyIterator();
  List<Property> componentPropertyList=new ArrayList<Property>();
  while (componentPropertyIterator.hasNext()) {
    componentPropertyList.add((Property)componentPropertyIterator.next());
  }
  Map<String,FieldMetadata> newFields=new HashMap<String,FieldMetadata>();
  buildProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,componentPresentationAttributes,componentPropertyList,newFields,componentPropertyNames,componentPropertyTypes,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,parentClasses,propertyName + ".",isParentExcluded);
  Map<String,FieldMetadata> convertedFields=new HashMap<String,FieldMetadata>();
  for (  String key : newFields.keySet()) {
    convertedFields.put(propertyName + "." + key,newFields.get(key));
  }
  fields.putAll(convertedFields);
}

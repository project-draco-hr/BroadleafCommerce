{
  int j=0;
  for (  String propertyName : propertyNames) {
    Type type=propertyTypes.get(j);
    boolean isPropertyForeignKey=testForeignProperty(foreignField,prefix,propertyName);
    int additionalForeignKeyIndexPosition=findAdditionalForeignKeyIndex(additionalForeignFields,prefix,propertyName);
    j++;
    if (!type.isAnyType() && !type.isCollectionType() || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0 || presentationAttributes.containsKey(propertyName)) {
      FieldPresentationAttributes presentationAttribute=presentationAttributes.get(propertyName);
      Boolean amIExcluded=isParentExcluded || !testPropertyInclusion(presentationAttribute);
      Boolean includeField=testPropertyRecursion(prefix,parentClasses,propertyName,targetClass,ceilingEntityFullyQualifiedClassname);
      SupportedFieldType explicitType=null;
      if (presentationAttribute != null) {
        explicitType=presentationAttribute.getExplicitFieldType();
      }
      Class<?> returnedClass=type.getReturnedClass();
      checkProp: {
        if (type.isComponentType() && includeField) {
          buildComponentProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,fields,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,propertyName,type,returnedClass,parentClasses,amIExcluded);
          break checkProp;
        }
        if (type.isEntityType() && !returnedClass.isAssignableFrom(targetClass) && populateManyToOneFields&& includeField) {
          buildEntityProperties(fields,foreignField,additionalForeignFields,additionalNonPersistentProperties,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,propertyName,returnedClass,targetClass,parentClasses,prefix,amIExcluded);
          break checkProp;
        }
      }
      if (includeField || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0) {
        buildProperty(targetClass,foreignField,additionalForeignFields,mergedPropertyType,componentProperties,fields,idProperty,prefix,propertyName,type,isPropertyForeignKey,additionalForeignKeyIndexPosition,presentationAttribute,explicitType,returnedClass);
      }
    }
  }
}

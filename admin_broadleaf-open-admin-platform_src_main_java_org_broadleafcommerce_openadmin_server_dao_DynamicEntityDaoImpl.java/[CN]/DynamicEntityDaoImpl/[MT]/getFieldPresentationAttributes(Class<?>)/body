{
  Map<String,FieldMetadata> attributes=new HashMap<String,FieldMetadata>();
  Field[] fields=getAllFields(targetClass);
  for (  Field field : fields) {
    AdminPresentation annot=field.getAnnotation(AdminPresentation.class);
    AdminPresentationCollection annotColl=field.getAnnotation(AdminPresentationCollection.class);
    if (annot != null) {
      BasicFieldMetadata metadata=new BasicFieldMetadata();
      metadata.setName(field.getName());
      metadata.setFriendlyName(annot.friendlyName());
      metadata.setSecurityLevel(annot.securityLevel());
      metadata.setVisibility(annot.visibility());
      metadata.setOrder(annot.order());
      metadata.setExplicitFieldType(annot.fieldType());
      metadata.setGroup(annot.group());
      metadata.setGroupOrder(annot.groupOrder());
      metadata.setGroupCollapsed(annot.groupCollapsed());
      metadata.setLargeEntry(annot.largeEntry());
      metadata.setProminent(annot.prominent());
      metadata.setColumnWidth(annot.columnWidth());
      metadata.setBroadleafEnumeration(annot.broadleafEnumeration());
      metadata.setReadOnly(annot.readOnly());
      metadata.setExcluded(annot.excluded());
      metadata.setTooltip(annot.tooltip());
      metadata.setHelpText(annot.helpText());
      metadata.setHint(annot.hint());
      metadata.setRequiredOverride(annot.requiredOverride() == RequiredOverride.IGNORED ? null : annot.requiredOverride() == RequiredOverride.REQUIRED);
      if (annot.validationConfigurations().length != 0) {
        ValidationConfiguration[] configurations=annot.validationConfigurations();
        for (        ValidationConfiguration configuration : configurations) {
          ConfigurationItem[] items=configuration.configurationItems();
          Map<String,String> itemMap=new HashMap<String,String>();
          for (          ConfigurationItem item : items) {
            itemMap.put(item.itemName(),item.itemValue());
          }
          metadata.getValidationConfigurations().put(configuration.validationImplementation(),itemMap);
        }
      }
      attributes.put(field.getName(),metadata);
    }
 else     if (annotColl != null) {
      CollectionMetadata metadata=new CollectionMetadata();
      metadata.setAddType(annotColl.addType());
      org.broadleafcommerce.openadmin.client.dto.OperationTypes dtoOperationTypes=new org.broadleafcommerce.openadmin.client.dto.OperationTypes();
      if (annotColl.addType() == AddType.LOOKUP) {
        dtoOperationTypes.setRemoveType(OperationType.NONDESTRUCTIVEREMOVE);
      }
      PersistencePerspective persistencePerspective=new PersistencePerspective(dtoOperationTypes,new String[]{},new ForeignKey[]{});
      metadata.setPersistencePerspective(persistencePerspective);
      String foreignKeyName=null;
      OneToMany oneToMany=field.getAnnotation(OneToMany.class);
      ManyToMany manyToMany=field.getAnnotation(ManyToMany.class);
      checkForeignKeyName: {
        if (!StringUtils.isEmpty(annotColl.manyToField())) {
          foreignKeyName=annotColl.manyToField();
          break checkForeignKeyName;
        }
        if (oneToMany != null && !StringUtils.isEmpty(oneToMany.mappedBy())) {
          foreignKeyName=oneToMany.mappedBy();
          break checkForeignKeyName;
        }
        if (manyToMany != null && !StringUtils.isEmpty(manyToMany.mappedBy())) {
          foreignKeyName=manyToMany.mappedBy();
          break checkForeignKeyName;
        }
        if (StringUtils.isEmpty(foreignKeyName)) {
          throw new IllegalArgumentException("Unable to infer a ManyToOne field name for the @AdminPresentationCollection annotated field(" + field.getName() + "). If not using the mappedBy property of @OneToMany or @ManyToMany, please make sure to explicitly define the manyToField property");
        }
      }
      ForeignKey foreignKey=new ForeignKey(foreignKeyName,targetClass.getName(),null,ForeignKeyRestrictionType.ID_EQ,annotColl.displayValueProperty());
      persistencePerspective.addPersistencePerspectiveItem(PersistencePerspectiveItemType.FOREIGNKEY,foreignKey);
      String ceiling=null;
      checkCeiling: {
        if (oneToMany != null && oneToMany.targetEntity() != void.class) {
          ceiling=oneToMany.targetEntity().getName();
          break checkCeiling;
        }
        if (manyToMany != null && manyToMany.targetEntity() != void.class) {
          ceiling=manyToMany.targetEntity().getName();
          break checkCeiling;
        }
      }
      if (!StringUtils.isEmpty(ceiling)) {
        metadata.setCollectionCeilingEntity(ceiling);
      }
      metadata.setExcluded(annotColl.excluded());
      metadata.setFriendlyName(annotColl.friendlyName());
      metadata.setSecurityLevel(annotColl.securityLevel());
      metadata.setOrder(annotColl.order());
      if (!StringUtils.isEmpty(annotColl.targetUIElementId())) {
        metadata.setTargetElementId(annotColl.targetUIElementId());
      }
      if (!StringUtils.isEmpty(annotColl.dataSourceName())) {
        metadata.setDataSourceName(annotColl.dataSourceName());
      }
      attributes.put(field.getName(),metadata);
    }
 else {
      BasicFieldMetadata metadata=new BasicFieldMetadata();
      metadata.setName(field.getName());
      metadata.setExcluded(false);
      attributes.put(field.getName(),metadata);
    }
  }
  return attributes;
}

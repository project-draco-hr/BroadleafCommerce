{
  Map<String,FieldMetadata> attributes=new HashMap<String,FieldMetadata>();
  Field[] fields=getAllFields(targetClass);
  for (  Field field : fields) {
    AdminPresentation annot=field.getAnnotation(AdminPresentation.class);
    AdminPresentationCollection annotColl=field.getAnnotation(AdminPresentationCollection.class);
    AdminPresentationAdornedTargetCollection adornedTargetCollection=field.getAnnotation(AdminPresentationAdornedTargetCollection.class);
    AdminPresentationMap map=field.getAnnotation(AdminPresentationMap.class);
    if (annot != null) {
      buildBasicMetadata(attributes,field,annot);
    }
 else     if (annotColl != null) {
      BasicCollectionMetadataOverride override=new BasicCollectionMetadataOverride();
      override.setAddMethodType(annotColl.addType());
      override.setConfigurationKey(annotColl.configurationKey());
      override.setManyToField(annotColl.manyToField());
      override.setCustomCriteria(annotColl.customCriteria());
      override.setDataSourceName(annotColl.dataSourceName());
      override.setExcluded(annotColl.excluded());
      override.setFriendlyName(annotColl.friendlyName());
      override.setMutable(annotColl.mutable());
      override.setOrder(annotColl.order());
      override.setSecurityLevel(annotColl.securityLevel());
      override.setTargetElementId(annotColl.targetUIElementId());
      override.setAddType(annotColl.operationTypes().addType());
      override.setFetchType(annotColl.operationTypes().fetchType());
      override.setRemoveType(annotColl.operationTypes().removeType());
      override.setUpdateType(annotColl.operationTypes().updateType());
      override.setInspectType(annotColl.operationTypes().inspectType());
      buildCollectionMetadata(targetClass,attributes,field,override);
    }
 else     if (adornedTargetCollection != null) {
      AdornedTargetCollectionMetadataOverride override=new AdornedTargetCollectionMetadataOverride();
      override.setConfigurationKey(adornedTargetCollection.configurationKey());
      override.setGridVisibleFields(adornedTargetCollection.gridVisibleFields());
      override.setIgnoreAdornedProperties(adornedTargetCollection.ignoreAdornedProperties());
      override.setMaintainedAdornedTargetFields(adornedTargetCollection.maintainedAdornedTargetFields());
      override.setParentObjectIdProperty(adornedTargetCollection.parentObjectIdProperty());
      override.setParentObjectProperty(adornedTargetCollection.parentObjectProperty());
      override.setSortAscending(adornedTargetCollection.sortAscending());
      override.setSortProperty(adornedTargetCollection.sortProperty());
      override.setTargetObjectIdProperty(adornedTargetCollection.targetObjectIdProperty());
      override.setTargetObjectProperty(adornedTargetCollection.targetObjectProperty());
      override.setCustomCriteria(adornedTargetCollection.customCriteria());
      override.setDataSourceName(adornedTargetCollection.dataSourceName());
      override.setExcluded(adornedTargetCollection.excluded());
      override.setFriendlyName(adornedTargetCollection.friendlyName());
      override.setMutable(adornedTargetCollection.mutable());
      override.setOrder(adornedTargetCollection.order());
      override.setSecurityLevel(adornedTargetCollection.securityLevel());
      override.setTargetElementId(adornedTargetCollection.targetUIElementId());
      override.setAddType(adornedTargetCollection.operationTypes().addType());
      override.setFetchType(adornedTargetCollection.operationTypes().fetchType());
      override.setRemoveType(adornedTargetCollection.operationTypes().removeType());
      override.setUpdateType(adornedTargetCollection.operationTypes().updateType());
      override.setInspectType(adornedTargetCollection.operationTypes().inspectType());
      buildAdornedTargetCollectionMetadata(targetClass,attributes,field,override);
    }
 else     if (map != null) {
      MapMetadataOverride override=new MapMetadataOverride();
      override.setConfigurationKey(map.configurationKey());
      override.setDeleteEntityUponRemove(map.deleteEntityUponRemove());
      override.setKeyClass(map.keyClass().getName());
      override.setKeyPropertyFriendlyName(map.keyPropertyFriendlyName());
      if (!ArrayUtils.isEmpty(map.keys())) {
        String[][] keys=new String[map.keys().length][2];
        for (int j=0; j < keys.length; j++) {
          keys[j][0]=map.keys()[j].keyName();
          keys[j][1]=map.keys()[j].friendlyKeyName();
        }
        override.setKeys(keys);
      }
      override.setMapKeyOptionEntityClass(map.mapKeyOptionEntityClass().getName());
      override.setMapKeyOptionEntityDisplayField(map.mapKeyOptionEntityDisplayField());
      override.setMapKeyOptionEntityValueField(map.mapKeyOptionEntityValueField());
      override.setMediaField(map.mediaField());
      override.setSimpleValue(map.isSimpleValue());
      override.setValueClass(map.valueClass().getName());
      override.setValuePropertyFriendlyName(map.valuePropertyFriendlyName());
      override.setCustomCriteria(map.customCriteria());
      override.setDataSourceName(map.dataSourceName());
      override.setExcluded(map.excluded());
      override.setFriendlyName(map.friendlyName());
      override.setMutable(map.mutable());
      override.setOrder(map.order());
      override.setSecurityLevel(map.securityLevel());
      override.setTargetElementId(map.targetUIElementId());
      override.setAddType(map.operationTypes().addType());
      override.setFetchType(map.operationTypes().fetchType());
      override.setRemoveType(map.operationTypes().removeType());
      override.setUpdateType(map.operationTypes().updateType());
      override.setInspectType(map.operationTypes().inspectType());
      buildMapMetadata(targetClass,attributes,field,override);
    }
 else {
      BasicFieldMetadata metadata=new BasicFieldMetadata();
      metadata.setName(field.getName());
      metadata.setExcluded(false);
      attributes.put(field.getName(),metadata);
    }
  }
  return attributes;
}

{
  Map<String,FieldMetadata> mergedProperties=getMergedPropertiesRecursively(ceilingEntityFullyQualifiedClassname,entities,foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,populateManyToOneFields,includeFields,excludeFields,configurationKey,new ArrayList<Class<?>>(),prefix,false);
  final List<String> removeKeys=new ArrayList<String>();
  for (  final String key : mergedProperties.keySet()) {
    if (mergedProperties.get(key).getExcluded() != null && mergedProperties.get(key).getExcluded()) {
      mergedProperties.get(key).accept(new MetadataVisitorAdapter(){
        @Override public void visit(        BasicFieldMetadata metadata){
          if (metadata.getExplicitFieldType() == null || (key.contains(".") && metadata.getExplicitFieldType() != SupportedFieldType.ADDITIONAL_FOREIGN_KEY)) {
            removeKeys.add(key);
          }
        }
        @Override public void visit(        AdornedTargetCollectionMetadata metadata){
          removeKeys.add(key);
        }
        @Override public void visit(        BasicCollectionMetadata metadata){
          removeKeys.add(key);
        }
        @Override public void visit(        MapMetadata metadata){
          removeKeys.add(key);
        }
      }
);
    }
  }
  for (  String removeKey : removeKeys) {
    mergedProperties.remove(removeKey);
  }
  return mergedProperties;
}

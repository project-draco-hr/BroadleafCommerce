{
  Map<String,FieldMetadata> mergedProperties=getMergedPropertiesRecursively(ceilingEntityFullyQualifiedClassname,entities,foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,populateManyToOneFields,includeFields,excludeFields,configurationKey,new ArrayList<Class<?>>(),prefix,false);
  final List<String> removeKeys=new ArrayList<String>();
  for (  final String key : mergedProperties.keySet()) {
    if (mergedProperties.get(key).getExcluded() != null && mergedProperties.get(key).getExcluded()) {
      removeKeys.add(key);
    }
  }
  for (  String removeKey : removeKeys) {
    mergedProperties.remove(removeKey);
  }
  Set<String> keys=new HashSet<String>(mergedProperties.keySet());
  for (  Class<?> targetClass : entities) {
    for (    String key : keys) {
      LateStageAddMetadataRequest amr=new LateStageAddMetadataRequest(key,null,targetClass,this,"");
      boolean foundOneOrMoreHandlers=false;
      for (      FieldMetadataProvider fieldMetadataProvider : fieldMetadataProviders) {
        FieldProviderResponse response=fieldMetadataProvider.lateStageAddMetadata(amr,mergedProperties);
        if (FieldProviderResponse.NOT_HANDLED != response) {
          foundOneOrMoreHandlers=true;
        }
        if (FieldProviderResponse.HANDLED_BREAK == response) {
          break;
        }
      }
      if (!foundOneOrMoreHandlers) {
        defaultFieldMetadataProvider.lateStageAddMetadata(amr,mergedProperties);
      }
    }
  }
  return mergedProperties;
}

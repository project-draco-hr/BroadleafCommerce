{
  int j=0;
  for (  String propertyName : propertyNames) {
    Type type=propertyTypes.get(j);
    boolean isPropertyForeignKey=testForeignProperty(foreignField,prefix,propertyName);
    int additionalForeignKeyIndexPosition=findAdditionalForeignKeyIndex(additionalForeignFields,prefix,propertyName);
    j++;
    Field myField=FieldManager.getSingleField(targetClass,propertyName);
    if (!type.isAnyType() && !type.isCollectionType() || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0 || presentationAttributes.containsKey(propertyName)) {
      if (myField != null && (myField.getAnnotation(AdminPresentationCollection.class) != null || myField.getAnnotation(AdminPresentationAdornedTargetCollection.class) != null)) {
        if (StringUtils.isEmpty(prefix)) {
          CollectionMetadata fieldMetadata=(CollectionMetadata)presentationAttributes.get(propertyName);
          if (StringUtils.isEmpty(fieldMetadata.getCollectionCeilingEntity())) {
            fieldMetadata.setCollectionCeilingEntity(type.getReturnedClass().getName());
          }
          fieldMetadata.setInheritedFromType(targetClass.getName());
          fieldMetadata.setAvailableToTypes(new String[]{targetClass.getName()});
          fields.put(propertyName,fieldMetadata);
        }
      }
 else {
        FieldMetadata presentationAttribute=presentationAttributes.get(propertyName);
        Boolean amIExcluded=isParentExcluded || !testPropertyInclusion(presentationAttribute);
        Boolean includeField=testPropertyRecursion(prefix,parentClasses,propertyName,targetClass,ceilingEntityFullyQualifiedClassname);
        SupportedFieldType explicitType=null;
        if (presentationAttribute != null && presentationAttribute instanceof BasicFieldMetadata) {
          explicitType=((BasicFieldMetadata)presentationAttribute).getExplicitFieldType();
        }
        Class<?> returnedClass=type.getReturnedClass();
        checkProp: {
          if (type.isComponentType() && includeField) {
            buildComponentProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,fields,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,propertyName,type,returnedClass,parentClasses,amIExcluded,prefix);
            break checkProp;
          }
          if (type.isEntityType() && !returnedClass.isAssignableFrom(targetClass) && populateManyToOneFields&& includeField) {
            buildEntityProperties(fields,foreignField,additionalForeignFields,additionalNonPersistentProperties,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,propertyName,returnedClass,targetClass,parentClasses,prefix,amIExcluded);
            break checkProp;
          }
        }
        if (includeField || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0) {
          buildProperty(targetClass,foreignField,additionalForeignFields,mergedPropertyType,componentProperties,fields,idProperty,prefix,propertyName,type,isPropertyForeignKey,additionalForeignKeyIndexPosition,presentationAttribute,explicitType,returnedClass);
        }
      }
    }
  }
}

{
  int j=0;
  Comparator<String> propertyComparator=new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      if (o1.equals(o2) || o1.startsWith(o2 + FieldManager.MAPFIELDSEPARATOR) || o2.startsWith(o1 + FieldManager.MAPFIELDSEPARATOR)) {
        return 0;
      }
      return o1.compareTo(o2);
    }
  }
;
  List<String> presentationKeyList=new ArrayList<String>(presentationAttributes.keySet());
  Collections.sort(presentationKeyList);
  for (  String propertyName : propertyNames) {
    final Type type=propertyTypes.get(j);
    boolean isPropertyForeignKey=testForeignProperty(foreignField,prefix,propertyName);
    int additionalForeignKeyIndexPosition=findAdditionalForeignKeyIndex(additionalForeignFields,prefix,propertyName);
    j++;
    Field myField=getFieldManager().getField(targetClass,propertyName);
    if (myField == null) {
      myField=getFieldManager().getField(targetClass,prefix + propertyName);
    }
    if (!type.isAnyType() && !type.isCollectionType() || isPropertyForeignKey || additionalForeignKeyIndexPosition >= 0 || Collections.binarySearch(presentationKeyList,propertyName,propertyComparator) >= 0) {
      if (myField != null) {
        AdminPresentationMap map=myField.getAnnotation(AdminPresentationMap.class);
        AdminPresentationAdornedTargetCollection adornedTargetCollection=myField.getAnnotation(AdminPresentationAdornedTargetCollection.class);
        AdminPresentationCollection collection=myField.getAnnotation(AdminPresentationCollection.class);
        if (map != null && !ArrayUtils.isEmpty(map.mapDisplayFields())) {
          for (          Map.Entry<String,FieldMetadata> entry : presentationAttributes.entrySet()) {
            if (entry.getKey().startsWith(propertyName + FieldManager.MAPFIELDSEPARATOR)) {
              TypeLocatorImpl typeLocator=new TypeLocatorImpl(new TypeResolver());
              Type myType=null;
              SupportedFieldType fieldType=((BasicFieldMetadata)entry.getValue()).getExplicitFieldType();
              Class<?> basicJavaType=getBasicJavaType(fieldType);
              if (basicJavaType != null) {
                myType=typeLocator.basic(basicJavaType);
              }
              if (myType == null) {
                java.lang.reflect.Type genericType=myField.getGenericType();
                if (genericType instanceof ParameterizedType) {
                  ParameterizedType pType=(ParameterizedType)genericType;
                  Class<?> clazz=(Class<?>)pType.getActualTypeArguments()[1];
                  Class<?>[] entities=getAllPolymorphicEntitiesFromCeiling(clazz);
                  if (!ArrayUtils.isEmpty(entities)) {
                    myType=typeLocator.entity(entities[entities.length - 1]);
                  }
                }
              }
              if (myType == null) {
                throw new IllegalArgumentException("Unable to establish the type for the property (" + entry.getKey() + ")");
              }
              buildBasicProperty(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,presentationAttributes,componentProperties,fields,idProperty,false,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,parentClasses,prefix,isParentExcluded,entry.getKey(),myType,isPropertyForeignKey,additionalForeignKeyIndexPosition);
            }
          }
        }
        if (adornedTargetCollection != null || collection != null || (map != null && (ArrayUtils.isEmpty(map.mapDisplayFields()) || map.allowMapFieldOverflowPresentation()))) {
          handleAdvancedField(targetClass,presentationAttributes,fields,propertyName,type);
        }
 else         if (map == null) {
          buildBasicProperty(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,presentationAttributes,componentProperties,fields,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,parentClasses,prefix,isParentExcluded,propertyName,type,isPropertyForeignKey,additionalForeignKeyIndexPosition);
        }
      }
    }
  }
}

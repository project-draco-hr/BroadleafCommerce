{
  PropertyBuilder propertyBuilder=new PropertyBuilder(){
    @Override public Map<String,FieldMetadata> execute(    Boolean overridePopulateManyToOne){
      Map<String,FieldMetadata> mergedProperties=new HashMap<String,FieldMetadata>();
      Boolean classAnnotatedPopulateManyToOneFields;
      if (overridePopulateManyToOne != null) {
        classAnnotatedPopulateManyToOneFields=overridePopulateManyToOne;
      }
 else {
        classAnnotatedPopulateManyToOneFields=populateManyToOneFields;
      }
      buildPropertiesFromPolymorphicEntities(entities,foreignField,additionalNonPersistentProperties,additionalForeignFields,mergedPropertyType,classAnnotatedPopulateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,mergedProperties,parentClasses,prefix,isParentExcluded);
      return mergedProperties;
    }
  }
;
  Map<String,FieldMetadata> mergedProperties=metadata.overrideMetadata(entities,propertyBuilder,prefix,isParentExcluded,ceilingEntityFullyQualifiedClassname,configurationKey,this);
  applyIncludesAndExcludes(includeFields,excludeFields,prefix,isParentExcluded,mergedProperties);
  applyForeignKeyPrecedence(foreignField,additionalForeignFields,mergedProperties);
  return mergedProperties;
}

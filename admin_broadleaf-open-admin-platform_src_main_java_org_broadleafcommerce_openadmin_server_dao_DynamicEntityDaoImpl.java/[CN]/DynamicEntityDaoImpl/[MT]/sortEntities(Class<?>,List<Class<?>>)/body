{
  Class<?>[] sortedEntities=new Class<?>[entities.size()];
  List<Class<?>> stageItems=new ArrayList<Class<?>>();
  stageItems.add(ceilingClass);
  int j=0;
  while (j < sortedEntities.length) {
    List<Class<?>> newStageItems=new ArrayList<Class<?>>();
    boolean topLevelClassFound=false;
    for (    Class<?> stageItem : stageItems) {
      Iterator<Class<?>> itr=entities.iterator();
      while (itr.hasNext()) {
        Class<?> entity=itr.next();
        checkitem: {
          if (ArrayUtils.contains(entity.getInterfaces(),stageItem) || entity.equals(stageItem)) {
            topLevelClassFound=true;
            break checkitem;
          }
          if (topLevelClassFound) {
            continue;
          }
          if (entity.getSuperclass().equals(stageItem) && j > 0) {
            break checkitem;
          }
          continue;
        }
        sortedEntities[j]=entity;
        itr.remove();
        j++;
        newStageItems.add(entity);
      }
    }
    if (newStageItems.isEmpty()) {
      throw new IllegalArgumentException("There was a gap in the inheritance hierarchy for (" + ceilingClass.getName() + ")");
    }
    stageItems=newStageItems;
  }
  ArrayUtils.reverse(sortedEntities);
  return sortedEntities;
}

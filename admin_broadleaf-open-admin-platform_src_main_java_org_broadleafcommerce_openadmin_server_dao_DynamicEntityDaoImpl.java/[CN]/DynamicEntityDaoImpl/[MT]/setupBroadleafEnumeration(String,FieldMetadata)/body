{
  Map<String,String> enumVals=new TreeMap<String,String>();
  Class<?> broadleafEnumeration=Class.forName(broadleafEnumerationClass);
  Method typeMethod=broadleafEnumeration.getMethod("getType",new Class<?>[]{});
  Method friendlyTypeMethod=broadleafEnumeration.getMethod("getFriendlyType",new Class<?>[]{});
  Field types=getFieldManager().getField(broadleafEnumeration,"TYPES");
  if (types != null) {
    Map typesMap=(Map)types.get(null);
    for (    Object value : typesMap.values()) {
      enumVals.put((String)friendlyTypeMethod.invoke(value,new Object[]{}),(String)typeMethod.invoke(value,new Object[]{}));
    }
  }
 else {
    Field[] fields=getAllFields(broadleafEnumeration);
    for (    Field field : fields) {
      boolean isStatic=Modifier.isStatic(field.getModifiers());
      if (isStatic && field.getType().isAssignableFrom(broadleafEnumeration)) {
        enumVals.put((String)friendlyTypeMethod.invoke(field.get(null),new Object[]{}),(String)typeMethod.invoke(field.get(null),new Object[]{}));
      }
    }
  }
  String[][] enumerationValues=new String[enumVals.size()][2];
  int j=0;
  for (  String key : enumVals.keySet()) {
    enumerationValues[j][0]=enumVals.get(key);
    enumerationValues[j][1]=key;
    j++;
  }
  fieldMetadata.setEnumerationValues(enumerationValues);
  fieldMetadata.setEnumerationClass(broadleafEnumerationClass);
}

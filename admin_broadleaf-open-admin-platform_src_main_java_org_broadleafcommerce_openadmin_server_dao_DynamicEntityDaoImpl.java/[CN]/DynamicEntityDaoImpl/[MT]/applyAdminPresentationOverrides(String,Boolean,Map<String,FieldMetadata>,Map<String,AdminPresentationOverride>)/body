{
  for (  String propertyName : presentationOverrides.keySet()) {
    AdminPresentation annot=presentationOverrides.get(propertyName).value();
    for (    String key : mergedProperties.keySet()) {
      String testKey=prefix + key;
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && annot.excluded()) {
        FieldMetadata metadata=mergedProperties.get(key);
        FieldPresentationAttributes attr=metadata.getPresentationAttributes();
        if (attr == null) {
          metadata.setPresentationAttributes(new FieldPresentationAttributes());
          attr=metadata.getPresentationAttributes();
        }
        attr.setExcluded(true);
        continue;
      }
      if ((testKey.startsWith(propertyName + ".") || testKey.equals(propertyName)) && !annot.excluded()) {
        FieldMetadata metadata=mergedProperties.get(key);
        FieldPresentationAttributes attr=metadata.getPresentationAttributes();
        if (attr == null) {
          metadata.setPresentationAttributes(new FieldPresentationAttributes());
          attr=metadata.getPresentationAttributes();
        }
        if (!isParentExcluded) {
          attr.setExcluded(false);
        }
      }
      if (key.equals(propertyName)) {
        FieldMetadata metadata=mergedProperties.get(key);
        FieldPresentationAttributes attr=metadata.getPresentationAttributes();
        attr.setFriendlyName(annot.friendlyName());
        attr.setSecurityLevel(annot.securityLevel());
        attr.setVisibility(annot.visibility());
        attr.setOrder(annot.order());
        attr.setExplicitFieldType(annot.fieldType());
        if (annot.fieldType() != SupportedFieldType.UNKNOWN) {
          metadata.setFieldType(annot.fieldType());
        }
        attr.setGroup(annot.group());
        attr.setGroupCollapsed(annot.groupCollapsed());
        attr.setGroupOrder(annot.groupOrder());
        attr.setLargeEntry(annot.largeEntry());
        attr.setProminent(annot.prominent());
        attr.setColumnWidth(annot.columnWidth());
        if (!StringUtils.isEmpty(annot.broadleafEnumeration()) && !annot.broadleafEnumeration().equals(attr.getBroadleafEnumeration())) {
          attr.setBroadleafEnumeration(annot.broadleafEnumeration());
          setupBroadleafEnumeration(annot.broadleafEnumeration(),metadata);
        }
        attr.setReadOnly(annot.readOnly());
        attr.setExcluded(isParentExcluded ? true : annot.excluded());
        attr.setTooltip(annot.tooltip());
        attr.setHelpText(annot.helpText());
        attr.setHint(annot.hint());
        attr.setRequiredOverride(annot.requiredOverride() == RequiredOverride.IGNORED ? null : annot.requiredOverride() == RequiredOverride.REQUIRED ? true : false);
        if (annot.validationConfigurations().length != 0) {
          ValidationConfiguration[] configurations=annot.validationConfigurations();
          for (          ValidationConfiguration configuration : configurations) {
            ConfigurationItem[] items=configuration.configurationItems();
            Map<String,String> itemMap=new HashMap<String,String>();
            for (            ConfigurationItem item : items) {
              itemMap.put(item.itemName(),item.itemValue());
            }
            attr.getValidationConfigurations().put(configuration.validationImplementation(),itemMap);
          }
        }
      }
    }
  }
}

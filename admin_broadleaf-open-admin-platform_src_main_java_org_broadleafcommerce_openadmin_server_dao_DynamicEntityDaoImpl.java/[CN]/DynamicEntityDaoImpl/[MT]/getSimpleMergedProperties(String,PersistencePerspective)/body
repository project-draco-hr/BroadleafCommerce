{
  Class<?>[] entityClasses;
  try {
    entityClasses=getAllPolymorphicEntitiesFromCeiling(Class.forName(entityName));
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  if (!ArrayUtils.isEmpty(entityClasses)) {
    return getMergedProperties(entityName,entityClasses,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
  }
 else {
    Map<String,FieldMetadata> mergedProperties=new HashMap<String,FieldMetadata>();
    Class<?> targetClass;
    try {
      targetClass=Class.forName(entityName);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    Map<String,FieldMetadata> attributesMap=metadata.getFieldPresentationAttributes(null,targetClass,this);
    for (    String property : attributesMap.keySet()) {
      FieldMetadata presentationAttributes=attributesMap.get(property);
      if (!presentationAttributes.getExcluded()) {
        Field field=FieldManager.getSingleField(targetClass,property);
        if (!Modifier.isStatic(field.getModifiers())) {
          if (field.getAnnotation(AdminPresentationCollection.class) == null && field.getAnnotation(AdminPresentationAdornedTargetCollection.class) == null && field.getAnnotation(AdminPresentationMap.class) == null) {
            buildProperty(targetClass,null,new ForeignKey[]{},MergedPropertyType.PRIMARY,null,mergedProperties,null,"",property,null,false,0,presentationAttributes,((BasicFieldMetadata)presentationAttributes).getExplicitFieldType(),field.getType());
          }
 else {
            CollectionMetadata fieldMetadata=(CollectionMetadata)presentationAttributes;
            if (StringUtils.isEmpty(fieldMetadata.getCollectionCeilingEntity()) && field.getAnnotation(AdminPresentationMap.class) == null) {
              ParameterizedType listType=(ParameterizedType)field.getGenericType();
              Class<?> listClass=(Class<?>)listType.getActualTypeArguments()[0];
              fieldMetadata.setCollectionCeilingEntity(listClass.getName());
            }
            mergedProperties.put(property,fieldMetadata);
          }
        }
      }
    }
    return mergedProperties;
  }
}

{
  Class<?>[] entityClasses;
  try {
    entityClasses=getAllPolymorphicEntitiesFromCeiling(Class.forName(entityName));
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  if (!ArrayUtils.isEmpty(entityClasses)) {
    return getMergedProperties(entityName,entityClasses,(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY),persistencePerspective.getAdditionalNonPersistentProperties(),persistencePerspective.getAdditionalForeignKeys(),MergedPropertyType.PRIMARY,persistencePerspective.getPopulateToOneFields(),persistencePerspective.getIncludeFields(),persistencePerspective.getExcludeFields(),persistencePerspective.getConfigurationKey(),"");
  }
 else {
    Map<String,FieldMetadata> mergedProperties=new HashMap<String,FieldMetadata>();
    Class<?> targetClass;
    try {
      targetClass=Class.forName(entityName);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    Map<String,FieldMetadata> attributesMap=metadata.getFieldPresentationAttributes(null,targetClass,this,"");
    for (    String property : attributesMap.keySet()) {
      FieldMetadata presentationAttribute=attributesMap.get(property);
      if (!presentationAttribute.getExcluded()) {
        Field field=FieldManager.getSingleField(targetClass,property);
        if (!Modifier.isStatic(field.getModifiers())) {
          boolean handled=false;
          for (          MetadataProvider provider : metadataProviders) {
            boolean response=provider.addMetadataFromFieldType(new AddMetadataFromFieldTypeRequest(field,targetClass,null,new ForeignKey[]{},MergedPropertyType.PRIMARY,null,mergedProperties,null,"",property,null,false,0,attributesMap,presentationAttribute,((BasicFieldMetadata)presentationAttribute).getExplicitFieldType(),field.getType(),this));
            if (response) {
              handled=true;
            }
          }
          if (!handled) {
            defaultMetadataProvider.addMetadataFromFieldType(new AddMetadataFromFieldTypeRequest(field,targetClass,null,new ForeignKey[]{},MergedPropertyType.PRIMARY,null,mergedProperties,null,"",property,null,false,0,attributesMap,presentationAttribute,((BasicFieldMetadata)presentationAttribute).getExplicitFieldType(),field.getType(),this));
          }
        }
      }
    }
    return mergedProperties;
  }
}

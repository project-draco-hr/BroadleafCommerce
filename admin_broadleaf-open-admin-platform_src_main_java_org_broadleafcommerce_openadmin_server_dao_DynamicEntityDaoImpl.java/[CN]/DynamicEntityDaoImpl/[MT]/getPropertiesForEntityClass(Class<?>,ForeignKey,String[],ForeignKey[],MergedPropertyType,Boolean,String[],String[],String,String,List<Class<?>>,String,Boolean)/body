{
  Map<String,FieldMetadata> presentationAttributes=metadata.getFieldPresentationAttributes(null,targetClass,this);
  if (isParentExcluded) {
    for (    String key : presentationAttributes.keySet()) {
      LOG.debug("getPropertiesForEntityClass:Excluding " + key + " because parent is excluded.");
      presentationAttributes.get(key).setExcluded(true);
    }
  }
  Map idMetadata=getIdMetadata(targetClass);
  Map<String,FieldMetadata> fields=new HashMap<String,FieldMetadata>();
  String idProperty=(String)idMetadata.get("name");
  List<String> propertyNames=getPropertyNames(targetClass);
  propertyNames.add(idProperty);
  Type idType=(Type)idMetadata.get("type");
  List<Type> propertyTypes=getPropertyTypes(targetClass);
  propertyTypes.add(idType);
  PersistentClass persistentClass=getPersistentClass(targetClass.getName());
  Iterator testIter=persistentClass.getPropertyIterator();
  List<Property> propertyList=new ArrayList<Property>();
  while (testIter.hasNext()) {
    Property property=(Property)testIter.next();
    if (property.getName().contains(".")) {
      throw new IllegalArgumentException("Properties from entities that utilize a period character ('.') in their name are incompatible with this system. The property name in question is: (" + property.getName() + ") from the class: ("+ targetClass.getName()+ ")");
    }
    propertyList.add(property);
  }
  buildProperties(targetClass,foreignField,additionalForeignFields,additionalNonPersistentProperties,mergedPropertyType,presentationAttributes,propertyList,fields,propertyNames,propertyTypes,idProperty,populateManyToOneFields,includeFields,excludeFields,configurationKey,ceilingEntityFullyQualifiedClassname,parentClasses,prefix,isParentExcluded);
  BasicFieldMetadata presentationAttribute=new BasicFieldMetadata();
  presentationAttribute.setExplicitFieldType(SupportedFieldType.STRING);
  presentationAttribute.setVisibility(VisibilityEnum.HIDDEN_ALL);
  if (!ArrayUtils.isEmpty(additionalNonPersistentProperties)) {
    Class<?>[] entities=getAllPolymorphicEntitiesFromCeiling(targetClass);
    for (    String additionalNonPersistentProperty : additionalNonPersistentProperties) {
      if (StringUtils.isEmpty(prefix) || (!StringUtils.isEmpty(prefix) && additionalNonPersistentProperty.startsWith(prefix))) {
        String myAdditionalNonPersistentProperty=additionalNonPersistentProperty;
        int finalDotPos=additionalNonPersistentProperty.lastIndexOf('.');
        if (finalDotPos >= 0) {
          myAdditionalNonPersistentProperty=myAdditionalNonPersistentProperty.substring(finalDotPos + 1,myAdditionalNonPersistentProperty.length());
        }
        Field testField=null;
        Method testMethod=null;
        for (        Class<?> clazz : entities) {
          try {
            testMethod=clazz.getMethod(myAdditionalNonPersistentProperty);
            if (testMethod != null) {
              break;
            }
          }
 catch (          NoSuchMethodException e) {
          }
          testField=getFieldManager().getField(clazz,myAdditionalNonPersistentProperty);
          if (testField != null) {
            break;
          }
        }
        if (testField != null || testMethod != null) {
          fields.put(additionalNonPersistentProperty,metadata.getFieldMetadata(prefix,additionalNonPersistentProperty,propertyList,SupportedFieldType.STRING,null,targetClass,presentationAttribute,mergedPropertyType,this));
        }
      }
    }
  }
  return fields;
}

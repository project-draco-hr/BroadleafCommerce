{
  CombinedPaymentContextSeed seed=((WorkflowPaymentContext)context).getSeedData();
  Map<PaymentInfo,Referenced> infos=seed.getInfos();
  PaymentContextImpl paymentContext=new PaymentContextImpl(seed.getOrderTotal(),seed.getOrderTotal());
  Iterator<PaymentInfo> itr=infos.keySet().iterator();
  while (itr.hasNext()) {
    PaymentInfo info=itr.next();
    if (paymentService.isValidCandidate(info.getType())) {
      paymentContext.setPaymentData(info,infos.get(info));
      PaymentResponseItem paymentResponseItem;
switch (seed.getActionType()) {
case AUTHORIZE:
        paymentResponseItem=paymentService.authorize(paymentContext);
      break;
case AUTHORIZEANDDEBIT:
    paymentResponseItem=paymentService.authorizeAndDebit(paymentContext);
  break;
case BALANCE:
paymentResponseItem=paymentService.balance(paymentContext);
break;
case CREDIT:
paymentResponseItem=paymentService.credit(paymentContext);
break;
case DEBIT:
paymentResponseItem=paymentService.debit(paymentContext);
break;
case VOID:
paymentResponseItem=paymentService.voidPayment(paymentContext);
break;
default :
throw new PaymentException("Module (" + paymentService.getClass().getName() + ") does not support payment type of: "+ seed.getActionType().toString());
}
if (paymentResponseItem.getAmountPaid() == null || paymentResponseItem.getTransactionTimestamp() == null || paymentResponseItem.getTransactionSuccess() == null) {
throw new PaymentException("The PaymentResponseItem instance did not contain one or more of the following: amountPaid, transactionTimestamp or transactionSuccess");
}
seed.getPaymentResponse().addPaymentResponseItem(info,paymentResponseItem);
paymentContext.addPayment(paymentResponseItem.getAmountPaid());
}
}
return context;
}

{
  Order order=((PricingContext)context).getSeedData();
  Map<OrderItem,List<FulfillmentGroupItem>> partialOrderItemMap=new HashMap<OrderItem,List<FulfillmentGroupItem>>();
  for (  FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
    for (    FulfillmentGroupItem fgItem : fulfillmentGroup.getFulfillmentGroupItems()) {
      OrderItem orderItem=fgItem.getOrderItem();
      int fgItemQty=fgItem.getQuantity();
      int orderItemQty=orderItem.getQuantity();
      if (fgItemQty != orderItemQty) {
        List<FulfillmentGroupItem> fgItemList=partialOrderItemMap.get(orderItem);
        if (fgItemList == null) {
          fgItemList=new ArrayList<FulfillmentGroupItem>();
          partialOrderItemMap.put(orderItem,fgItemList);
        }
        fgItemList.add(fgItem);
        Money totalItemAmount=orderItem.getTotalPrice();
        Money proratedOrderAdjustment=orderItem.getProratedOrderAdjustment();
        if (proratedOrderAdjustment != null) {
          totalItemAmount=totalItemAmount.subtract(orderItem.getProratedOrderAdjustment());
        }
        fgItem.setTotalItemAmount(totalItemAmount.multiply(fgItemQty).divide(orderItemQty));
        if (orderItem.isTaxable()) {
          Money totalTaxAmount=orderItem.getTotalTaxableAmount();
          fgItem.setTotalItemTaxableAmount(totalTaxAmount.multiply(fgItemQty).divide(orderItemQty));
        }
 else {
          fgItem.setTotalItemTaxableAmount(new Money(getCurrency(fulfillmentGroup)));
        }
      }
 else {
        Money totalItemAmount=orderItem.getTotalPrice();
        Money proratedOrderAdjustment=orderItem.getProratedOrderAdjustment();
        if (proratedOrderAdjustment != null) {
          totalItemAmount=totalItemAmount.subtract(orderItem.getProratedOrderAdjustment());
        }
        fgItem.setTotalItemAmount(totalItemAmount);
        if (orderItem.isTaxable()) {
          fgItem.setTotalItemTaxableAmount(orderItem.getTotalTaxableAmount());
        }
 else {
          fgItem.setTotalItemTaxableAmount(new Money(getCurrency(fulfillmentGroup)));
        }
      }
    }
  }
  for (  OrderItem orderItem : partialOrderItemMap.keySet()) {
    Money totalItemAmount=orderItem.getTotalPrice().subtract(orderItem.getProratedOrderAdjustment());
    Money totalFGItemAmount=sumItemAmount(partialOrderItemMap.get(orderItem),order);
    Money amountDiff=totalItemAmount.subtract(totalFGItemAmount);
    if (!(amountDiff.getAmount().compareTo(BigDecimal.ZERO) == 0)) {
      long numApplicationsNeeded=countNumberOfUnits(amountDiff);
      Money unitAmount=getUnitAmount(amountDiff);
      for (      FulfillmentGroupItem fgItem : partialOrderItemMap.get(orderItem)) {
        numApplicationsNeeded=numApplicationsNeeded - applyDifference(fgItem,numApplicationsNeeded,unitAmount);
        if (numApplicationsNeeded == 0) {
          break;
        }
      }
    }
  }
  for (  OrderItem orderItem : partialOrderItemMap.keySet()) {
    Money totalTaxAmount=orderItem.getTotalTaxableAmount();
    Money totalFGTaxAmount=sumTaxAmount(partialOrderItemMap.get(orderItem),order);
    Money taxDiff=totalTaxAmount.subtract(totalFGTaxAmount);
    if (!(taxDiff.getAmount().compareTo(BigDecimal.ZERO) == 0)) {
      long numApplicationsNeeded=countNumberOfUnits(taxDiff);
      Money unitAmount=getUnitAmount(taxDiff);
      for (      FulfillmentGroupItem fgItem : partialOrderItemMap.get(orderItem)) {
        numApplicationsNeeded=numApplicationsNeeded - applyTaxDifference(fgItem,numApplicationsNeeded,unitAmount);
        if (numApplicationsNeeded == 0) {
          break;
        }
      }
    }
  }
  context.setSeedData(order);
  return context;
}

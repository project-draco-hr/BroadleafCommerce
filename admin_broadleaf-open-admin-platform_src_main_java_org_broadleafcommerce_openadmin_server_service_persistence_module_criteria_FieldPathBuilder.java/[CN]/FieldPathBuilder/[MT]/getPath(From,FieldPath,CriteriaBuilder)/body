{
  FieldPath myFieldPath=fieldPath;
  if (!StringUtils.isEmpty(fieldPath.getTargetProperty())) {
    myFieldPath=getFieldPath(root,fieldPath.getTargetProperty());
  }
  From myRoot=root;
  for (  String pathElement : myFieldPath.getAssociationPath()) {
    myRoot=myRoot.join(pathElement);
  }
  Path path=myRoot;
  for (int i=0; i < myFieldPath.getTargetPropertyPieces().size(); i++) {
    String piece=myFieldPath.getTargetPropertyPieces().get(i);
    if (path.getJavaType().isAnnotationPresent(Embeddable.class)) {
      String original=((SingularAttributePath)path).getAttribute().getDeclaringType().getJavaType().getName() + "." + ((SingularAttributePath)path).getAttribute().getName()+ "."+ piece;
      String copy=path.getJavaType().getName() + "." + piece;
      copyCollectionPersister(original,copy,((CriteriaBuilderImpl)builder).getEntityManagerFactory().getSessionFactory());
    }
    try {
      path=path.get(piece);
    }
 catch (    IllegalArgumentException e) {
      EntityManagerFactoryImpl em=((CriteriaBuilderImpl)builder).getEntityManagerFactory();
      Metamodel mm=em.getMetamodel();
      boolean found=false;
      Class<?>[] polyClasses=dynamicDaoHelper.getAllPolymorphicEntitiesFromCeiling(path.getJavaType(),em.getSessionFactory(),true,true);
      for (      Class<?> clazz : polyClasses) {
        ManagedType mt=mm.managedType(clazz);
        try {
          Attribute attr=mt.getAttribute(piece);
          if (attr != null) {
            Root additionalRoot=criteria.from(clazz);
            restrictions.add(builder.equal(path,additionalRoot));
            path=additionalRoot.get(piece);
            found=true;
            break;
          }
        }
 catch (        IllegalArgumentException e2) {
        }
      }
      if (!found) {
        throw new IllegalArgumentException("Could not resolve requested attribute against path, including" + " known polymorphic versions of the root",e);
      }
    }
    if (path.getParentPath() != null && path.getParentPath().getJavaType().isAnnotationPresent(Embeddable.class) && path instanceof PluralAttributePath) {
      throw new CriteriaConversionException(String.format("Unable to create a JPA criteria Path through an @Embeddable object to a collection that resides therein (%s)",fieldPath.getTargetProperty()),fieldPath);
    }
  }
  return path;
}

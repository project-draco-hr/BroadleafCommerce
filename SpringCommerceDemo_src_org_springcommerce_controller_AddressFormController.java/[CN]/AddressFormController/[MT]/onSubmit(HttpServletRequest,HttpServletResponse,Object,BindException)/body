{
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  Address addressFromDB=new Address();
  Address address=(Address)command;
  User user=userService.readUserByUsername(auth.getName());
  if (request.getParameter("addressId") != null) {
    addressFromDB=addressService.readAddressById(Long.valueOf(request.getParameter("addressId")));
  }
 else {
    List<Address> addressList=addressService.readAddressByUserId(user.getId());
    for (Iterator<Address> itr=addressList.iterator(); itr.hasNext(); ) {
      Address addressItr=(Address)itr.next();
      if (address.getAddressName().equalsIgnoreCase(addressItr.getAddressName())) {
        errors.rejectValue("addressName","addressName.duplicate",new Object[]{new String(address.getAddressName())},null);
      }
    }
  }
  AddressStandarizationResponse standardizedResponse=addressStandardizationService.standardizeAddress(address);
  if (standardizedResponse.isErrorDetected()) {
    logger.debug("Address verification Failed. Please check the address and try again");
    address.setStandardized(false);
    errors.rejectValue("zipCode","addressVerification.failed",null,null);
  }
 else {
    address.setStandardized(true);
    standardizedResponse.getAddress().setAddressName(address.getAddressName());
    if (addressFromDB.getId() != null) {
      standardizedResponse.getAddress().setId(addressFromDB.getId());
    }
    addressFromDB=standardizedResponse.getAddress();
    addressFromDB.setUser(user);
  }
  ModelAndView mav=new ModelAndView(getSuccessView(),errors.getModel());
  if (errors.hasErrors()) {
    logger.debug("Error returning back to the form");
    return showForm(request,response,errors);
  }
  addressService.saveAddress(addressFromDB);
  mav.addObject("saved",true);
  return mav;
}

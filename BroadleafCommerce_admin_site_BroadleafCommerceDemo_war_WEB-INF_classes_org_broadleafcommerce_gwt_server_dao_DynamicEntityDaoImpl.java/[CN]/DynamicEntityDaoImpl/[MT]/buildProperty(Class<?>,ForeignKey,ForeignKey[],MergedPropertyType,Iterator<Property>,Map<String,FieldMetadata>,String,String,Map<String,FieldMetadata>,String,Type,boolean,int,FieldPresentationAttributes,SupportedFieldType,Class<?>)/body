{
  if (explicitType != null && explicitType.equals(SupportedFieldType.BROADLEAF_ENUMERATION)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.BROADLEAF_ENUMERATION,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.BOOLEAN)) || returnedClass.equals(Boolean.class) || returnedClass.equals(Character.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.BOOLEAN,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.INTEGER)) || returnedClass.equals(Byte.class) || returnedClass.equals(Short.class)|| returnedClass.equals(Integer.class)|| returnedClass.equals(Long.class)) {
    if (propertyName.equals(idProperty)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.ID,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.DATE)) || returnedClass.equals(Calendar.class) || returnedClass.equals(Date.class)|| returnedClass.equals(Timestamp.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.DATE,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.STRING)) || returnedClass.equals(String.class)) {
    if (propertyName.equals(idProperty)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.ID,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.MONEY)) || returnedClass.equals(Money.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.MONEY,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.DECIMAL)) || returnedClass.equals(Double.class) || returnedClass.equals(BigDecimal.class)) {
    fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.DECIMAL,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.FOREIGN_KEY)) || foreignField != null && isPropertyForeignKey) {
    ClassMetadata foreignMetadata;
    foreignMetadata=sessionFactory.getClassMetadata(Class.forName(foreignField.getForeignKeyClass()));
    Class<?> foreignResponseType=foreignMetadata.getIdentifierType().getReturnedClass();
    if (foreignResponseType.equals(String.class)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.FOREIGN_KEY,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.FOREIGN_KEY,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
    fields.get(propertyName).setForeignKeyProperty(foreignMetadata.getIdentifierPropertyName());
    fields.get(propertyName).setForeignKeyClass(foreignField.getForeignKeyClass());
    fields.get(propertyName).setForeignKeyDisplayValueProperty(foreignField.getDisplayValueProperty());
  }
 else   if ((explicitType != null && explicitType.equals(SupportedFieldType.ADDITIONAL_FOREIGN_KEY)) || additionalForeignFields != null && additionalForeignKeyIndexPosition >= 0) {
    ClassMetadata foreignMetadata;
    foreignMetadata=sessionFactory.getClassMetadata(Class.forName(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass()));
    Class<?> foreignResponseType=foreignMetadata.getIdentifierType().getReturnedClass();
    if (foreignResponseType.equals(String.class)) {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.ADDITIONAL_FOREIGN_KEY,SupportedFieldType.STRING,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
 else {
      fields.put(propertyName,getFieldMetadata(prefix,propertyName,propertyIterator,SupportedFieldType.ADDITIONAL_FOREIGN_KEY,SupportedFieldType.INTEGER,type,targetClass,presentationAttribute,mergedPropertyType,metadataOverrides));
    }
    fields.get(propertyName).setForeignKeyProperty(foreignMetadata.getIdentifierPropertyName());
    fields.get(propertyName).setForeignKeyClass(additionalForeignFields[additionalForeignKeyIndexPosition].getForeignKeyClass());
    fields.get(propertyName).setForeignKeyDisplayValueProperty(additionalForeignFields[additionalForeignKeyIndexPosition].getDisplayValueProperty());
  }
}

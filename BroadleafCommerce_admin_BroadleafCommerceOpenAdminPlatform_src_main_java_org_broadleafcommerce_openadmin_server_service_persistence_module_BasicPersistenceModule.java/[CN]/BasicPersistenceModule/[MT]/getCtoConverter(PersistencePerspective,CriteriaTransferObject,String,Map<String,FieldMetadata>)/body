{
  BaseCtoConverter ctoConverter=new BaseCtoConverter();
  for (  String propertyName : mergedProperties.keySet()) {
    AssociationPath associationPath;
    int dotIndex=propertyName.lastIndexOf(".");
    String property;
    if (dotIndex >= 0) {
      property=propertyName.substring(dotIndex + 1,propertyName.length());
      String prefix=propertyName.substring(0,dotIndex);
      StringTokenizer tokens=new StringTokenizer(prefix,".");
      List<AssociationPathElement> elementList=new ArrayList<AssociationPathElement>();
      Class clazz=Class.forName(mergedProperties.get(propertyName).getInheritedFromType());
      StringBuffer sb=new StringBuffer();
      StringBuffer pathBuilder=new StringBuffer();
      while (tokens.hasMoreElements()) {
        String token=tokens.nextToken();
        sb.append(token);
        pathBuilder.append(token);
        Field field=getFieldManager().getField(clazz,pathBuilder.toString());
        Embedded embedded=field.getAnnotation(Embedded.class);
        if (embedded != null) {
          sb.append(".");
        }
 else {
          elementList.add(new AssociationPathElement(sb.toString()));
          sb=new StringBuffer();
        }
        pathBuilder.append(".");
      }
      if (elementList.size() > 0) {
        AssociationPathElement[] elements=elementList.toArray(new AssociationPathElement[]{});
        associationPath=new AssociationPath(elements);
      }
 else {
        property=sb.toString() + property;
        associationPath=AssociationPath.ROOT;
      }
    }
 else {
      property=propertyName;
      associationPath=AssociationPath.ROOT;
    }
switch (mergedProperties.get(propertyName).getFieldType()) {
case BOOLEAN:
      ctoConverter.addBooleanMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
    break;
case DATE:
  ctoConverter.addDateMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case DECIMAL:
ctoConverter.addDecimalMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case MONEY:
ctoConverter.addDecimalMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case INTEGER:
ctoConverter.addLongMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
default :
ctoConverter.addStringLikeMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case EMAIL:
ctoConverter.addStringLikeMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case FOREIGN_KEY:
if (cto.get(propertyName).getFilterValues().length > 0) {
ForeignKey foreignKey=(ForeignKey)persistencePerspective.getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.FOREIGNKEY);
if (mergedProperties.get(propertyName).getCollection()) {
if (ForeignKeyRestrictionType.COLLECTION_SIZE_EQ.toString().equals(foreignKey.getRestrictionType().toString())) {
ctoConverter.addCollectionSizeEqMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addLongMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getForeignKeyProperty());
}
}
 else if (cto.get(propertyName).getFilterValues()[0] == null || cto.get(propertyName).getFilterValues()[0].equals("null")) {
ctoConverter.addNullMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,propertyName);
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addLongEQMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getForeignKeyProperty());
}
}
break;
case ADDITIONAL_FOREIGN_KEY:
if (cto.get(propertyName).getFilterValues().length > 0) {
int additionalForeignKeyIndexPosition=-1;
additionalForeignKeyIndexPosition=Arrays.binarySearch(persistencePerspective.getAdditionalForeignKeys(),new ForeignKey(propertyName,null,null),new Comparator<ForeignKey>(){
public int compare(ForeignKey o1,ForeignKey o2){
return o1.getManyToField().compareTo(o2.getManyToField());
}
}
);
ForeignKey foreignKey=persistencePerspective.getAdditionalForeignKeys()[additionalForeignKeyIndexPosition];
if (mergedProperties.get(propertyName).getCollection()) {
if (ForeignKeyRestrictionType.COLLECTION_SIZE_EQ.toString().equals(foreignKey.getRestrictionType().toString())) {
ctoConverter.addCollectionSizeEqMapping(ceilingEntityFullyQualifiedClassname,propertyName,AssociationPath.ROOT,propertyName);
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addLongMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getForeignKeyProperty());
}
}
 else if (cto.get(propertyName).getFilterValues()[0] == null || cto.get(propertyName).getFilterValues()[0].equals("null")) {
ctoConverter.addNullMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,propertyName);
}
 else {
AssociationPath foreignCategory=new AssociationPath(new AssociationPathElement(propertyName));
ctoConverter.addLongEQMapping(ceilingEntityFullyQualifiedClassname,propertyName,foreignCategory,mergedProperties.get(propertyName).getForeignKeyProperty());
}
}
break;
case ID:
switch (mergedProperties.get(propertyName).getSecondaryType()) {
case INTEGER:
ctoConverter.addLongEQMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
case STRING:
ctoConverter.addStringLikeMapping(ceilingEntityFullyQualifiedClassname,propertyName,associationPath,property);
break;
}
break;
}
}
return ctoConverter;
}

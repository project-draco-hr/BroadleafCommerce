{
  String ceilingEntityFullyQualifiedClassname=persistencePackage.getCeilingEntityFullyQualifiedClassname();
  String[] customCriteria=persistencePackage.getCustomCriteria();
  if (ArrayUtils.isEmpty(customCriteria) || customCriteria.length != 5) {
    ServiceException e=new ServiceException("Invalid request for entity: " + ceilingEntityFullyQualifiedClassname);
    LOG.error("Invalid request for entity: " + ceilingEntityFullyQualifiedClassname,e);
    throw e;
  }
  AdminUser adminUser=adminRemoteSecurityService.getPersistentAdminUser();
  if (adminUser == null) {
    ServiceException e=new ServiceException("Unable to determine current user logged in status");
    LOG.error("Unable to determine current user logged in status",e);
    throw e;
  }
  try {
    String moduleKey=customCriteria[0];
    String operation=customCriteria[1];
    List<Long> targets=new ArrayList<Long>();
    if (!StringUtils.isEmpty(customCriteria[2])) {
      String[] parts=customCriteria[2].split(",");
      for (      String part : parts) {
        try {
          targets.add(Long.valueOf(part));
        }
 catch (        NumberFormatException e) {
        }
      }
    }
    String comment=customCriteria[3];
    String requiredPermission;
    if (moduleKey.equals("userSandBox")) {
      requiredPermission="PERMISSION_ALL_USER_SANDBOX";
    }
 else {
      requiredPermission="PERMISSION_ALL_APPROVER_SANDBOX";
    }
    boolean allowOperation=false;
    for (    AdminRole role : adminUser.getAllRoles()) {
      for (      AdminPermission permission : role.getAllPermissions()) {
        if (permission.getName().equals(requiredPermission)) {
          allowOperation=true;
          break;
        }
      }
    }
    if (!allowOperation) {
      ServiceException e=new ServiceException("Current user does not have permission to perform operation");
      LOG.error("Current user does not have permission to perform operation",e);
      throw e;
    }
    SandBox originalSandBox;
    SandBox currentSandBox;
    if (moduleKey.equals("userSandBox")) {
      currentSandBox=sandBoxService.retrieveUserSandBox(null,adminUser);
      originalSandBox=currentSandBox;
    }
 else {
      originalSandBox=sandBoxService.retrieveUserSandBox(null,adminUser);
      currentSandBox=sandBoxService.retrieveApprovalSandBox(originalSandBox);
    }
    if (operation.equals("promoteAll")) {
      sandBoxService.promoteAllSandBoxItems(currentSandBox,comment);
    }
 else     if (operation.equals("promoteSelected")) {
      List<SandBoxItem> items=retrieveSandBoxItems(targets,dynamicEntityDao,currentSandBox);
      sandBoxService.promoteSelectedItems(currentSandBox,comment,items);
    }
 else     if (operation.equals("revertRejectAll")) {
      if (moduleKey.equals("userSandBox")) {
        sandBoxService.revertAllSandBoxItems(originalSandBox,currentSandBox);
      }
 else {
        sandBoxService.rejectAllSandBoxItems(originalSandBox,currentSandBox,comment);
      }
    }
 else     if (operation.equals("revertRejectSelected")) {
      List<SandBoxItem> items=retrieveSandBoxItems(targets,dynamicEntityDao,currentSandBox);
      if (moduleKey.equals("userSandBox")) {
        sandBoxService.revertSelectedSandBoxItems(currentSandBox,items);
      }
 else {
        sandBoxService.rejectSelectedSandBoxItems(currentSandBox,comment,items);
      }
    }
    PersistencePerspective persistencePerspective=persistencePackage.getPersistencePerspective();
    Map<String,FieldMetadata> originalProps=helper.getSimpleMergedProperties(SandBoxItem.class.getName(),persistencePerspective);
    cto.get("sandBoxId").setFilterValue(currentSandBox.getId().toString());
    cto.get("archivedFlag").setFilterValue(Boolean.FALSE.toString());
    BaseCtoConverter ctoConverter=helper.getCtoConverter(persistencePerspective,cto,SandBoxItem.class.getName(),originalProps);
    PersistentEntityCriteria queryCriteria=ctoConverter.convert(cto,SandBoxItem.class.getName());
    List<Serializable> records=dynamicEntityDao.query(queryCriteria,SandBoxItemImpl.class);
    Entity[] results=helper.getRecords(originalProps,records);
    PersistentEntityCriteria countCriteria=ctoConverter.convert(new CriteriaTransferObjectCountWrapper(cto).wrap(),ceilingEntityFullyQualifiedClassname);
    int totalRecords=dynamicEntityDao.count(countCriteria,SandBoxItemImpl.class);
    DynamicResultSet response=new DynamicResultSet(results,totalRecords);
    return response;
  }
 catch (  Exception e) {
    LOG.error("Unable to execute persistence activity",e);
    throw new ServiceException("Unable to execute persistence activity for entity: " + ceilingEntityFullyQualifiedClassname,e);
  }
}

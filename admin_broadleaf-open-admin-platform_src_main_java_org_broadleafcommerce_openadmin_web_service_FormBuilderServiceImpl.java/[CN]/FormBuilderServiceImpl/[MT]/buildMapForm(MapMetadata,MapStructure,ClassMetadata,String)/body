{
  EntityForm ef=new EntityForm();
  ef.setEntityType(mapMd.getTargetClass());
  ComboField keyField=new ComboField();
  keyField.withName("key").withFieldType("combo_field").withFriendlyName("Key");
  if (mapMd.getKeys() != null) {
    for (    String[] key : mapMd.getKeys()) {
      keyField.putOption(key[0],key[1]);
    }
  }
 else {
    PersistencePackageRequest ppr=PersistencePackageRequest.standard().withClassName(mapMd.getMapKeyOptionEntityClass());
    Entity[] rows=adminEntityService.getRecords(ppr);
    for (    Entity entity : rows) {
      String keyValue=entity.getPMap().get(mapMd.getMapKeyOptionEntityValueField()).getValue();
      String keyDisplayValue=entity.getPMap().get(mapMd.getMapKeyOptionEntityDisplayField()).getValue();
      keyField.putOption(keyValue,keyDisplayValue);
    }
  }
  ef.addField(keyField,EntityForm.MAP_KEY_GROUP,EntityForm.DEFAULT_TAB_NAME);
  List<Property> mapFormProperties=new ArrayList<Property>(Arrays.asList(cmd.getProperties()));
  CollectionUtils.filter(mapFormProperties,new Predicate(){
    @Override public boolean evaluate(    Object object){
      Property p=(Property)object;
      return ArrayUtils.contains(p.getMetadata().getAvailableToTypes(),mapStructure.getValueClassName());
    }
  }
);
  setEntityFormFields(ef,mapFormProperties);
  Field f=new Field().withName("symbolicId").withFieldType(SupportedFieldType.HIDDEN.toString()).withValue(parentId);
  ef.addHiddenField(f);
  f=new Field().withName("priorKey").withFieldType(SupportedFieldType.HIDDEN.toString());
  ef.addHiddenField(f);
  return ef;
}

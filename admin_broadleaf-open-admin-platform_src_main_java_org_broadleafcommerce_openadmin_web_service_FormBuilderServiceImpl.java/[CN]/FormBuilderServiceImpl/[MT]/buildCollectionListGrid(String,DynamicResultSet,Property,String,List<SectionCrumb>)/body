{
  FieldMetadata fmd=field.getMetadata();
  PersistencePackageRequest ppr=PersistencePackageRequest.fromMetadata(fmd,sectionCrumbs);
  if (field != null) {
    ppr.setSectionEntityField(field.getName());
  }
  ClassMetadata cmd=adminEntityService.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
  List<Field> headerFields=new ArrayList<Field>();
  ListGrid.Type type=null;
  boolean editable=false;
  boolean sortable=false;
  boolean readOnly=false;
  boolean hideIdColumn=false;
  boolean canFilterAndSort=true;
  String idProperty="id";
  String altIdProperty=null;
  for (  Property property : cmd.getProperties()) {
    if (property.getMetadata() instanceof BasicFieldMetadata && SupportedFieldType.ID == ((BasicFieldMetadata)property.getMetadata()).getFieldType() && !property.getName().contains(".")) {
      idProperty=property.getName();
      break;
    }
  }
  if (fmd instanceof BasicFieldMetadata) {
    readOnly=((BasicFieldMetadata)fmd).getReadOnly();
    for (    Property p : cmd.getProperties()) {
      if (p.getMetadata() instanceof BasicFieldMetadata) {
        BasicFieldMetadata md=(BasicFieldMetadata)p.getMetadata();
        if (SupportedFieldType.ID.equals(md.getFieldType())) {
          idProperty=md.getName();
        }
        if (md.isProminent() != null && md.isProminent() && !ArrayUtils.contains(getGridHiddenVisibilities(),md.getVisibility())) {
          Field hf=createHeaderField(p,md);
          headerFields.add(hf);
        }
      }
    }
    type=ListGrid.Type.TO_ONE;
  }
 else   if (fmd instanceof BasicCollectionMetadata) {
    BasicCollectionMetadata bcm=(BasicCollectionMetadata)fmd;
    readOnly=!bcm.isMutable();
    for (    Property p : cmd.getProperties()) {
      if (p.getMetadata() instanceof BasicFieldMetadata) {
        BasicFieldMetadata md=(BasicFieldMetadata)p.getMetadata();
        if (md.isProminent() != null && md.isProminent() && !ArrayUtils.contains(getGridHiddenVisibilities(),md.getVisibility())) {
          Field hf=createHeaderField(p,md);
          headerFields.add(hf);
        }
      }
    }
    type=ListGrid.Type.BASIC;
    if (bcm.getAddMethodType().equals(AddMethodType.PERSIST)) {
      editable=true;
    }
    sortable=StringUtils.isNotBlank(bcm.getSortProperty());
  }
 else   if (fmd instanceof AdornedTargetCollectionMetadata) {
    readOnly=!((AdornedTargetCollectionMetadata)fmd).isMutable();
    AdornedTargetCollectionMetadata atcmd=(AdornedTargetCollectionMetadata)fmd;
    for (    String fieldName : atcmd.getGridVisibleFields()) {
      Property p=cmd.getPMap().get(fieldName);
      BasicFieldMetadata md=(BasicFieldMetadata)p.getMetadata();
      Field hf=createHeaderField(p,md);
      headerFields.add(hf);
    }
    type=ListGrid.Type.ADORNED;
    if (atcmd.getMaintainedAdornedTargetFields().length > 0) {
      editable=true;
    }
    AdornedTargetList adornedList=(AdornedTargetList)atcmd.getPersistencePerspective().getPersistencePerspectiveItems().get(PersistencePerspectiveItemType.ADORNEDTARGETLIST);
    sortable=StringUtils.isNotBlank(adornedList.getSortField());
    idProperty=adornedList.getIdProperty();
    altIdProperty=BasicPersistenceModule.ALTERNATE_ID_PROPERTY;
  }
 else   if (fmd instanceof MapMetadata) {
    readOnly=!((MapMetadata)fmd).isMutable();
    MapMetadata mmd=(MapMetadata)fmd;
    Property p2=cmd.getPMap().get("key");
    BasicFieldMetadata keyMd=(BasicFieldMetadata)p2.getMetadata();
    keyMd.setFriendlyName("Key");
    Field hf=createHeaderField(p2,keyMd);
    headerFields.add(hf);
    if (mmd.isSimpleValue()) {
      Property valueProperty=cmd.getPMap().get("value");
      BasicFieldMetadata valueMd=(BasicFieldMetadata)valueProperty.getMetadata();
      valueMd.setFriendlyName("Value");
      hf=createHeaderField(valueProperty,valueMd);
      headerFields.add(hf);
      idProperty="key";
      hideIdColumn=true;
    }
 else {
      for (      Property p : cmd.getProperties()) {
        if (p.getMetadata() instanceof BasicFieldMetadata) {
          BasicFieldMetadata md=(BasicFieldMetadata)p.getMetadata();
          String valueClassName=mmd.getValueClassName();
          if (!StringUtils.isEmpty(mmd.getToOneTargetProperty())) {
            Class<?> clazz;
            try {
              clazz=Class.forName(mmd.getValueClassName());
            }
 catch (            ClassNotFoundException e) {
              throw ExceptionHelper.refineException(e);
            }
            java.lang.reflect.Field nestedField=FieldManager.getSingleField(clazz,mmd.getToOneTargetProperty());
            ManyToOne manyToOne=nestedField.getAnnotation(ManyToOne.class);
            if (manyToOne != null && !manyToOne.targetEntity().getName().equals(void.class.getName())) {
              valueClassName=manyToOne.targetEntity().getName();
            }
 else {
              OneToOne oneToOne=nestedField.getAnnotation(OneToOne.class);
              if (oneToOne != null && !oneToOne.targetEntity().getName().equals(void.class.getName())) {
                valueClassName=oneToOne.targetEntity().getName();
              }
            }
          }
          if (md.getTargetClass().equals(valueClassName)) {
            if (md.isProminent() != null && md.isProminent() && !ArrayUtils.contains(getGridHiddenVisibilities(),md.getVisibility())) {
              hf=createHeaderField(p,md);
              headerFields.add(hf);
            }
          }
        }
      }
    }
    type=ListGrid.Type.MAP;
    editable=true;
    canFilterAndSort=false;
  }
  String ceilingType="";
  if (fmd instanceof BasicFieldMetadata) {
    ceilingType=cmd.getCeilingType();
  }
 else   if (fmd instanceof CollectionMetadata) {
    ceilingType=((CollectionMetadata)fmd).getCollectionCeilingEntity();
  }
  if (CollectionUtils.isEmpty(headerFields)) {
    String message="There are no listgrid header fields configured for the class " + ceilingType + " and property '"+ field.getName()+ "'.";
    if (type == ListGrid.Type.ADORNED || type == ListGrid.Type.ADORNED_WITH_FORM) {
      message+=" Please configure 'gridVisibleFields' in your @AdminPresentationAdornedTargetCollection configuration";
    }
 else {
      message+=" Please mark some @AdminPresentation fields with 'prominent = true'";
    }
    LOG.error(message);
  }
  ListGrid listGrid=createListGrid(ceilingType,headerFields,type,drs,sectionKey,fmd.getOrder(),idProperty,altIdProperty,sectionCrumbs);
  listGrid.setSubCollectionFieldName(field.getName());
  listGrid.setFriendlyName(field.getMetadata().getFriendlyName());
  if (StringUtils.isEmpty(listGrid.getFriendlyName())) {
    listGrid.setFriendlyName(field.getName());
  }
  listGrid.setContainingEntityId(containingEntityId);
  listGrid.setReadOnly(readOnly);
  listGrid.setHideIdColumn(hideIdColumn);
  listGrid.setCanFilterAndSort(canFilterAndSort);
  if (editable) {
    listGrid.getRowActions().add(DefaultListGridActions.UPDATE);
  }
  if (readOnly) {
    listGrid.getRowActions().add(DefaultListGridActions.VIEW);
  }
  if (sortable) {
    listGrid.setCanFilterAndSort(false);
    listGrid.getToolbarActions().add(DefaultListGridActions.REORDER);
  }
  listGrid.getRowActions().add(DefaultListGridActions.REMOVE);
  return listGrid;
}

{
  this.id=category.getId();
  this.name=category.getName();
  this.description=category.getDescription();
  this.active=category.isActive();
  this.activeStartDate=category.getActiveStartDate();
  this.activeEndDate=category.getActiveEndDate();
  this.url=category.getUrl();
  this.urlKey=category.getUrlKey();
  if (category.getCategoryAttributes() != null && !category.getCategoryAttributes().isEmpty()) {
    categoryAttributes=new ArrayList<CategoryAttributeWrapper>();
    for (    CategoryAttribute attribute : category.getCategoryAttributes()) {
      CategoryAttributeWrapper wrapper=(CategoryAttributeWrapper)context.getBean(CategoryAttributeWrapper.class.getName());
      wrapper.wrapSummary(attribute,request);
      categoryAttributes.add(wrapper);
    }
  }
  Integer productLimit=(Integer)request.getAttribute("productLimit");
  Integer productOffset=(Integer)request.getAttribute("productOffset");
  Integer subcategoryLimit=(Integer)request.getAttribute("subcategoryLimit");
  Integer subcategoryOffset=(Integer)request.getAttribute("subcategoryOffset");
  if (productLimit != null && productOffset == null) {
    productOffset=1;
  }
  if (subcategoryLimit != null && subcategoryOffset == null) {
    subcategoryOffset=1;
  }
  if (productLimit != null && productOffset != null) {
    SearchService searchService=(SearchService)context.getBean("blSearchService");
    ProductSearchCriteria searchCriteria=new ProductSearchCriteria();
    searchCriteria.setPage(productOffset);
    searchCriteria.setPageSize(productLimit);
    searchCriteria.setFilterCriteria(new HashMap<String,String[]>());
    try {
      ProductSearchResult result=searchService.findExplicitProductsByCategory(category,searchCriteria);
      List<Product> productList=result.getProducts();
      if (productList != null && !productList.isEmpty()) {
        if (products == null) {
          products=new ArrayList<ProductWrapper>();
        }
        for (        Product p : productList) {
          ProductWrapper productSummaryWrapper=(ProductWrapper)context.getBean(ProductWrapper.class.getName());
          productSummaryWrapper.wrapSummary(p,request);
          products.add(productSummaryWrapper);
        }
      }
    }
 catch (    ServiceException e) {
      throw new WebApplicationException(Response.status(Response.Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("An unexpected error occured  " + e.getMessage()).build());
    }
  }
  if (subcategoryLimit != null && subcategoryOffset != null) {
    subcategories=buildSubcategoryTree(subcategories,category,request);
  }
}

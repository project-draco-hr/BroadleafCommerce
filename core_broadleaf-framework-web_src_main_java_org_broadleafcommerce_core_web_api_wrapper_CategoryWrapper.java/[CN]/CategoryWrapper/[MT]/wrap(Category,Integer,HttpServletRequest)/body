{
  this.id=category.getId();
  this.name=category.getName();
  this.description=category.getDescription();
  this.activeStartDate=category.getActiveStartDate();
  this.activeEndDate=category.getActiveEndDate();
  this.url=category.getUrl();
  this.urlKey=category.getUrlKey();
  Integer productLimit=(Integer)request.getAttribute("productLimit");
  Integer productOffset=(Integer)request.getAttribute("productOffset");
  Integer subcategoryLimit=(Integer)request.getAttribute("subcategoryLimit");
  Integer subcategoryOffset=(Integer)request.getAttribute("subcategoryOffset");
  if (productLimit != null && productOffset != null && subcategoryLimit != null && subcategoryOffset != null && depth != null) {
    CatalogService catalogService=(CatalogService)context.getBean("blCatalogService");
    List<Product> productList=catalogService.findProductsForCategory(category,productLimit,productOffset);
    if (productList != null && !productList.isEmpty()) {
      if (products == null) {
        products=new ArrayList<ProductWrapper>();
      }
      for (      Product p : productList) {
        ProductWrapper productWrapper;
        if (p instanceof ProductBundle) {
          productWrapper=(ProductWrapper)context.getBean(ProductBundleWrapper.class.getName());
        }
 else {
          productWrapper=(ProductWrapper)context.getBean(ProductWrapper.class.getName());
        }
        productWrapper.wrap(p,request);
        products.add(productWrapper);
      }
    }
    subcategories=buildSubcategoryTree(subcategories,category,request,depth);
  }
}

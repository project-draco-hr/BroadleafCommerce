{
  USPSShippingPriceResponse shippingPriceResponse=new USPSShippingPriceResponse();
  RateV3ResponseDocument doc;
  String xml=null;
  try {
    xml=generateXml(hostInput);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Host Response: " + xml);
    }
    doc=RateV3ResponseDocument.Factory.parse(xml);
  }
 catch (  XmlException e) {
    if (xml != null) {
      try {
        ErrorDocument error=ErrorDocument.Factory.parse(xml);
        ErrorV2Type errorType=error.getError();
        shippingPriceResponse.setErrorDetected(true);
        shippingPriceResponse.setErrorCode(String.valueOf(errorType.getNumber()));
        shippingPriceResponse.setErrorText(errorType.getDescription());
        return shippingPriceResponse;
      }
 catch (      XmlException e1) {
        throw new RuntimeException(e);
      }
    }
 else {
      throw new RuntimeException(e);
    }
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
  try {
    SimpleDateFormat dateFormat=new SimpleDateFormat("dd-MMM-yyyy");
    SimpleDateFormat dateAndTimeFormat=new SimpleDateFormat("dd-MMM-yyyy h:mm a");
    RateV3ResponseType responseType=doc.getRateV3Response();
    ResponsePackageV3Type[] packages=responseType.getPackageArray();
    for (    ResponsePackageV3Type packageItem : packages) {
      String id=packageItem.getID();
      USPSContainerItem key=new USPSContainerItem();
      key.setPackageId(id);
      USPSContainerItem originalItem=(USPSContainerItem)request.getContainerItems().get(request.getContainerItems().indexOf(key));
      shippingPriceResponse.getResponses().push(originalItem);
      if (packageItem.getError() != null) {
        shippingPriceResponse.setErrorDetected(true);
        originalItem.setErrorDetected(true);
        originalItem.setErrorCode(String.valueOf(packageItem.getError().getNumber()));
        originalItem.setErrorText(packageItem.getError().getDescription());
      }
      originalItem.setZone(packageItem.getZone());
      if (packageItem.xgetRestrictions() != null) {
        originalItem.setRestrictions(packageItem.getRestrictions());
      }
      PostageV3Type[] postages=packageItem.getPostageArray();
      for (      PostageV3Type postage : postages) {
        int classId=postage.getCLASSID();
        USPSServiceResponseType shippingMethod=USPSServiceResponseType.getInstance(String.valueOf(classId));
        USPSPostage uspsPostage=new USPSPostage();
        if (postage.xgetCommercialRate() != null) {
          uspsPostage.setCommercialRate(new Money(postage.getCommercialRate()));
        }
        uspsPostage.setRate(new Money(postage.getRate()));
        if (postage.xgetCommitmentDate() != null) {
          uspsPostage.setCommitmentDate(dateFormat.parse(postage.getCommitmentDate()));
        }
        buildLocations(uspsPostage.getLocations(),postage.getLocationArray());
        for (        CommitmentV3Type commitment : postage.getCommitmentArray()) {
          USPSCommitment uspsCommitment=new USPSCommitment();
          uspsCommitment.setCommitmentDateAndTime(dateAndTimeFormat.parse(commitment.getCommitmentDate() + " " + commitment.getCommitmentTime()));
          buildLocations(uspsCommitment.getLocations(),commitment.getLocationArray());
        }
        originalItem.getPostage().put(shippingMethod,uspsPostage);
      }
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return shippingPriceResponse;
}
